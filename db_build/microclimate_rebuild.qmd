---
title: "microclimate_rebuild"
format: html
editor: visual
---
```{r setup, include=FALSE}
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, DBI, RPostgres, here)
```

## Connect to Db

```{r}
# establish connection
tryCatch({
  print("Connecting to Databaseâ€¦")
  con <- dbConnect(dbDriver("Postgres"),
                          dbname = Sys.getenv("aws_dbname"),
                          host = Sys.getenv("aws_host"),
                          port = Sys.getenv("aws_port"),
                          user = Sys.getenv("aws_user"),
                          password = Sys.getenv("aws_password"),
                          timezone=NULL)
  print("Database Connected!")
},
error=function(cond) {
  print("Unable to connect to Database.")
})

```

## pull all hobo tables

```{r}
hobo_location = dbGetQuery(con, "SELECT * FROM ribbitr.hobo.hobo_location")
hobo_region = dbGetQuery(con, "SELECT * FROM ribbitr.hobo.hobo_region")
hobo_site = dbGetQuery(con, "SELECT * FROM ribbitr.hobo.hobo_site")
hobo_obs = dbGetQuery(con, "SELECT * FROM ribbitr.hobo.hobo")  # uy que heavy
```

## create logger table
```{r}
# seems that every time entry has a separate hobo_id? This doesn't make sense to me. Maybe this was done to allow for a single unique key, rahter than a compound key. But I disagree with it. I think it should be a compound key between a sensor_id and a time. This may mean that I need to begin again from the raw data to reconstruct this, if I can't separate data from different sensors at similar and different locations, at a given site.
logger = hobo_obs %>%
  select(hobo_id, hobo_site_id) %>%
  distinct()
```

## pivot hobo to long form

```{r}
# identify which value columns are incorrectly cast as char
hobo_char = hobo_obs %>%
  select_if(is.character) %>%
  select(-hobo_id,-hobo_site_id)

hobo_char_col = names(hobo_char)

# convert character columns to numeric
hobo_obs_conv = hobo_obs %>%
  mutate_at(vars(hobo_char_col), as.numeric)

# pivot
hobo_obs_long = hobo_obs_conv %>%
  pivot_longer(!c(date_time, hobo_id, hobo_site_id), names_to = "metric", values_to = "value", values_drop_na = TRUE)

```