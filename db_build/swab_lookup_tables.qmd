---
title: "swab_lookup_restructure"
format: html
editor: source
---

## Setup

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to DB
dbcon <- hopToDB()

```

## load table pointers

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from DB
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))

```

## pull capture_id and associated sample ids, write to new table, drop columns
```{r}

sample_lookup_gen <- function(table, id_col, sample_cols, sample_type) {
  # unique sample ids
  sample_lookup = table %>%
    select(all_of(c(sample_cols,
                  id_col))) %>%
    pivot_longer(!all_of(id_col), names_to = "name", values_to = "value") %>%
    filter(!is.na(value),
           value != "Pe_Bd00000",
           value != "Pe_Toe00000",
           value != "Pe_16S00000",
           value != "Pe_AMP00000",
           value != "Pe_Muc00000",
           value != "Pe_Bac00000",
           value != "Pe_IG00000") %>%
    rename(sample_name = value) %>%
    mutate(sample_type = sample_type) %>%
    select(sample_name,
           sample_type,
           !!id_col) %>%
    collect() %>%
  
  return(sample_lookup)
}

s1 = sample_lookup_gen(db_capture, "capture_id", c("bd_swab_id"), "bd")
s2 = sample_lookup_gen(db_capture, "capture_id", c("genetic_id"), "genetic")
s3 = sample_lookup_gen(db_capture, "capture_id", c("microbiome_swab_id"), "microbiome")
s4 = sample_lookup_gen(db_capture, "capture_id", c("amp_id", "amp_id_2", "amp_id_3", "amp_id_4"), "amp")
s5 = sample_lookup_gen(db_capture, "capture_id", c("mucosome_id"), "mucosome")
s6 = sample_lookup_gen(db_capture, "capture_id", c("bacterial_swab_id"), "bacterial")
s7 = sample_lookup_gen(db_capture, "capture_id", c("antibody_id", "antibody_id_2", "antibody_id_3", "antibody_id_4"), "antibody")
s8 = sample_lookup_gen(db_capture, "capture_id", c("crispr_id"), "crispr")

select_cols = c("sample_name",
                "sample_type",
                "capture_id")

all_samples = rbind(s1 %>%
                     select(all_of(select_cols)),
                   s2 %>%
                     select(all_of(select_cols)),
                   s3 %>%
                     select(all_of(select_cols)),
                   s4 %>%
                     select(all_of(select_cols)),
                   s5 %>%
                     select(all_of(select_cols)),
                   s6 %>%
                     select(all_of(select_cols)),
                   s7 %>%
                     select(all_of(select_cols)),
                   s8 %>%
                     select(all_of(select_cols)))

```
## load new table pointers

## parse for duplicates (same sample id, multiple capture ids)
```{r}
s1_dupes = get_dupes(s1, sample_name)
s2_dupes = get_dupes(s2, sample_name)
s3_dupes = get_dupes(s3, sample_name)
s4_dupes = get_dupes(s4, sample_name)
s5_dupes = get_dupes(s5, sample_name)
s6_dupes = get_dupes(s6, sample_name)
s7_dupes = get_dupes(s7, sample_name)
s8_dupes = get_dupes(s8, sample_name)

all_capture = db_capture %>% 
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  collect()

true_dupes <- function(dupes) {
  true_dupes = dupes %>%
    select(capture_id, sample_name) %>%
    left_join(all_capture, by = "capture_id") %>%
    get_dupes(sample_name, survey_id, species_capture, svl_mm)
}

# distinguish between:
#   true dupes -- same sample_name & survey -- should be coalesced into a single capture
#   dirty dupes -- same sample_name & survey -- should be split into two sample_names, where possible

s1_dupes_true = true_dupes(s1_dupes)
s1_dupes_dirty = anti_join(s1_dupes, s1_dupes_true, by = "capture_id") %>%
  left_join(all_capture, by = "capture_id")

s2_dupes_true = true_dupes(s2_dupes)
s2_dupes_dirty = anti_join(s2_dupes, s2_dupes_true, by = "capture_id") %>%
  left_join(all_capture, by = "capture_id")

s3_dupes_true = true_dupes(s3_dupes)
s3_dupes_dirty = anti_join(s3_dupes, s3_dupes_true, by = "capture_id") %>%
  left_join(all_capture, by = "capture_id")

s4_dupes_true = true_dupes(s4_dupes)
s4_dupes_dirty = anti_join(s4_dupes, s4_dupes_true, by = "capture_id") %>%
  left_join(all_capture, by = "capture_id")

s5_dupes_true = true_dupes(s5_dupes)
s5_dupes_dirty = anti_join(s5_dupes, s5_dupes_true, by = "capture_id") %>%
  left_join(all_capture, by = "capture_id")

s6_dupes_true = true_dupes(s6_dupes)
s6_dupes_dirty = anti_join(s6_dupes, s6_dupes_true, by = "capture_id") %>%
  left_join(all_capture, by = "capture_id")

s7_dupes_true = true_dupes(s7_dupes)
s7_dupes_dirty = anti_join(s7_dupes, s7_dupes_true, by = "capture_id") %>%
  left_join(all_capture, by = "capture_id")

s8_dupes_true = true_dupes(s8_dupes)
s8_dupes_dirty = anti_join(s8_dupes, s8_dupes_true, by = "capture_id") %>%
  left_join(all_capture, by = "capture_id")

```

## coalesce true dupes
```{r}

reconcile_true_dupes <- function(true_dupes) {
  true_dupes_reconciled = true_dupes %>%
  select(-dupe_count) %>%
  group_by(sample_name, survey_id, species_capture, svl_mm) %>%
  summarise(across(everything(), ~ first(na.omit(.)))) %>%
  ungroup()
}

s1_dupes_true_reconciled = reconcile_true_dupes(s1_dupes_true)
s1_dupes_true_drop = anti_join(s1_dupes_true, s1_dupes_true_reconciled, by = "capture_id")

s2_dupes_true_reconciled = reconcile_true_dupes(s2_dupes_true)
s2_dupes_true_drop = anti_join(s2_dupes_true, s2_dupes_true_reconciled, by = "capture_id")

s3_dupes_true_reconciled = reconcile_true_dupes(s3_dupes_true)
s3_dupes_true_drop = anti_join(s3_dupes_true, s3_dupes_true_reconciled, by = "capture_id")

s4_dupes_true_reconciled = reconcile_true_dupes(s4_dupes_true)
s4_dupes_true_drop = anti_join(s4_dupes_true, s4_dupes_true_reconciled, by = "capture_id")

s5_dupes_true_reconciled = reconcile_true_dupes(s5_dupes_true)
s5_dupes_true_drop = anti_join(s5_dupes_true, s5_dupes_true_reconciled, by = "capture_id")

s6_dupes_true_reconciled = reconcile_true_dupes(s6_dupes_true)
s6_dupes_true_drop = anti_join(s6_dupes_true, s6_dupes_true_reconciled, by = "capture_id")

s7_dupes_true_reconciled = reconcile_true_dupes(s7_dupes_true)
s7_dupes_true_drop = anti_join(s7_dupes_true, s7_dupes_true_reconciled, by = "capture_id")

s8_dupes_true_reconciled = reconcile_true_dupes(s8_dupes_true)
s8_dupes_true_drop = anti_join(s8_dupes_true, s8_dupes_true_reconciled, by = "capture_id")

```

# split dirty dupes into team, to help understand cause
```{r}
all_dupes_dirty = bind_rows(s1_dupes_dirty,
                            s2_dupes_dirty,
                            s3_dupes_dirty,
                            s4_dupes_dirty,
                            s5_dupes_dirty,
                            s6_dupes_dirty,
                            s7_dupes_dirty,
                            s8_dupes_dirty)

all_dupes_dirty_penn = all_dupes_dirty %>%
  filter(region == "pennsylvania")
all_dupes_dirty_panama = all_dupes_dirty %>%
  filter(country == "panama")
all_dupes_dirty_sn = all_dupes_dirty %>%
  filter(region == "california")
all_dupes_dirty_brazil = all_dupes_dirty %>%
  filter(country == "brazil")

all_dupes_dirty_reconciled = all_dupes_dirty %>%
  group_by(sample_name) %>%
  mutate(sample_name = paste0(sample_name, "_DDC", row_number())) %>%
  ungroup()

# perhaps reassign sample_name with prefix? sample_name _DDC#
#   this way they won't generate conflicts with the samples, and we can resolve them in their own timeline.

```
## Pull amp_swab_ids

```{r}
amp_id_capture = tbl(dbcon, Id("survey_data", "capture")) %>%
  select(amp_id,
         amp_id_2,
         amp_id_3,
         amp_id_4) %>%
  pivot_longer(cols = starts_with("amp_id"),    # Select columns to pivot
               names_to = "sample",             # Name of the new column for the old column names
               values_to = "amp_id") %>%
  select(amp_id) %>%
  filter(!is.na(amp_id)) %>%
  collect()

amp_id_results = tbl(dbcon, Id("survey_data", "amp_totals_gia")) %>%
  select(amp_id) %>%
  filter(!is.na(amp_id)) %>%
  collect()

unique_amp_id = distinct(bind_rows(amp_id_capture, amp_id_results))
```

## Write to new table

```{r}
# dbWriteTable(dbcon, Id("survey_data", "amp_lookup"), unique_amp_id, overwrite = TRUE)
```
