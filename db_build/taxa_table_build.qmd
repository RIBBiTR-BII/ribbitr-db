---
title: "taxa_table_build"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, uuid, RIBBiTR-BII/ribbitrrr, EML, ropensci/bold, ropensci/taxize, EDIorg/taxonomyCleanr)

# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

# librarian::shelf(roxygen2, devtools)

# connect to database
dbcon = hopToDB("ribbitr")
```

Pull metadata and tables

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from DB
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
```

# build taxa table
```{r}
sn_aural = db_aural %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(species_aural, region, country) %>%
  rename(scientific_name = species_aural) %>%
  collect()

sn_capture = db_capture %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(species_capture, region, country) %>%
  rename(scientific_name = species_capture) %>%
  collect()

sn_ves = db_ves %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(species_ves, region, country) %>%
  rename(scientific_name = species_ves) %>%
  collect()

sn_cmr = db_cmr %>%
  left_join(db_site, by = c("site_id_tagged" = "site_id")) %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(species_cmr, region, country) %>%
  rename(scientific_name = species_cmr) %>%
  collect()

sn_all = bind_rows(sn_aural,
                   sn_capture,
                   sn_ves,
                   sn_cmr) %>%
  filter(!is.na(scientific_name)) %>%
  arrange(scientific_name)

sn_br = sn_all %>%
  filter(country == "brazil") %>%
  select(scientific_name) %>%
  distinct()

sn_ca = sn_all %>%
  filter(region == "california") %>%
  select(scientific_name) %>%
  distinct()

sn_pa = sn_all %>%
  filter(country == "panama") %>%
  select(scientific_name) %>%
  distinct()

sn_pe = sn_all %>%
  filter(region == "pennsylvania") %>%
  select(scientific_name) %>%
  distinct()


sn_unique_df = sn_all %>%
  select(scientific_name) %>%
  group_by(scientific_name) %>%
  summarise(count = n()) %>%
  arrange(scientific_name) %>%
  collect()

sn_unique_str = sn_all %>%
  # mutate(sn = str_replace(scientific_name, "_", " ")) %>%
  pull(scientific_name) %>%
  unique()

```

# taxonomy clean
```{r}

taxa_map_path = here("staging", "taxa_mapping")
# taxa_map = create_taxa_map(path = taxa_map_path, x = sn_unique_df, col = 'scientific_name')
# taxa_trim = trim_taxa(path = taxa_map_path)
# 
# # remove taxa
# rm_list = c(
#   "control",
#   "see_notes",
#   "tadpole_species_1",
#   "tad_spp_2",
#   "unknown",
#   "unknown_species"
# )
# 
# taxa_rm = map(rm_list, ~ remove_taxa(.x, path = taxa_map_path))
# 
# # replace taxa
# taxa_rp = replace_taxa("chiasmocleis_cf._atlantica", "chiasmocleis", path = taxa_map_path)
# taxa_rp = replace_taxa("Desmognathaus_sp.", "desmognathus", path = taxa_map_path)
# taxa_rp = replace_taxa("desmognathus_so", "desmognathus", path = taxa_map_path)
# taxa_rp = replace_taxa("desmog_spp", "desmognathus", path = taxa_map_path)
# taxa_rp = replace_taxa("desmog_spp.", "desmognathus", path = taxa_map_path)
# taxa_rp = replace_taxa("ischnocnema_sp._02_(aff._lactea)", "ischnocnema", path = taxa_map_path)
# taxa_rp = replace_taxa("larval_salamander_sp.", "caudata", path = taxa_map_path)
# taxa_rp = replace_taxa("ololygon_aff._brieni", "ololygon", path = taxa_map_path)
# taxa_rp = replace_taxa("ololygon_aff._littoralis", "ololygon", path = taxa_map_path)
# taxa_rp = replace_taxa("ololygon_cf_litoralis", "ololygon", path = taxa_map_path)
# taxa_rp = replace_taxa("pristimantis_sp._potential_new_sp", "pristimantis", path = taxa_map_path)
# taxa_rp = replace_taxa("Rana_catesbeiana_x_Rana_clamitans_(possibly)", "rana", path = taxa_map_path)
# taxa_rp = replace_taxa("red_backed_salamander", "plethodon cinereus", path = taxa_map_path)
# taxa_rp = replace_taxa("toad_sp.", "bufonidae", path = taxa_map_path)
# taxa_rp = replace_taxa("esparadana_prosoblepon", "espadarana prosoblepon", path = taxa_map_path)
# taxa_rp = replace_taxa("desmongnathus_sp", "desmognathus", path = taxa_map_path)
# taxa_rp = replace_taxa("desmoganthus_sp.", "desmognathus", path = taxa_map_path)
# taxa_rp = replace_taxa("bufo_americanus", "Anaxyrus americanus", path = taxa_map_path)
# taxa_rp = replace_taxa("colostethus_panamensis", "Colostethus panamansis", path = taxa_map_path)
# taxa_rp = replace_taxa("hyliola_regilla", "Pseudacris regilla", path = taxa_map_path)
# taxa_rp = replace_taxa("leptodactylus_marmoratus", "Adenomera marmorata", path = taxa_map_path)


taxa_map = read_taxa_map(taxa_map_path)

sn_replace_region = sn_all %>%
  group_by(scientific_name, region, country) %>%
  summarise(count = n()) %>%
  arrange(scientific_name) %>%
  collect() %>%
  left_join(taxa_map, by = c("scientific_name" = "taxa_raw")) %>%
  filter(taxa_replacement != "")

sn_replace_br = sn_replace_region %>%
  filter(country == "brazil") %>%
  select(scientific_name:taxa_replacement)

sn_replace_ca = sn_replace_region %>%
  filter(region == "california") %>%
  select(scientific_name:taxa_replacement)

sn_replace_pa = sn_replace_region %>%
  filter(country == "panama") %>%
  group_by(scientific_name) %>%
  summarise(count = sum(count),
            taxa_replacement = first(taxa_replacement)) %>%
  select(scientific_name:taxa_replacement)

sn_replace_pe = sn_replace_region %>%
  filter(region == "pennsylvania") %>%
  select(scientific_name:taxa_replacement)

```

# scrape taxa details
```{r}
taxa_detail = function(tm) {
  taxa_map = tm %>%
    mutate(taxa_trimmed = na_if(taxa_trimmed, ''),
           taxa_replacement = na_if(taxa_replacement, ''),
           taxa_search = case_when(
             taxa_removed ~ NA,
             !is.na(taxa_replacement) ~ taxa_replacement,
             !is.na(taxa_trimmed) ~ taxa_trimmed,
             TRUE ~ NA
           ),
           taxa_parent = word(taxa_search, 1))
  
  unique_taxa = unique(as.character(na.omit(taxa_map$taxa_search)))
  unique_parent = unique(as.character(na.omit(taxa_map$taxa_parent)))
  
  cat("searching taxa in AmphibiaWeb\n")
  t_aw = scrape_amphibiaweb(as.character(unique_taxa))
  
  safe_gna_verifier <- safely(gna_verifier)
  safe_gnr_resolve <- safely(gnr_resolve)
  
  cat("searching taxa in ITIS\n")
  t_itis = map(unique_taxa, ~ safe_gna_verifier(.x, data_sources = 3, capitalize = TRUE))
  cat("searching taxa in NCBI\n")
  t_ncbi = map(unique_taxa, ~ safe_gna_verifier(.x, data_sources = 4, capitalize = TRUE))
  cat("searching taxa in IUCN\n")
  t_iucn = map(unique_taxa, ~ safe_gna_verifier(.x, data_sources = 163, capitalize = TRUE))
  
  # t_iucn_s = map(unique_taxa, ~ iucn_summary(.x))
  
  # cat("searching parent taxa in ITIS\n")
  # p_itis = map(unique_parent, ~ safe_gna_verifier(.x, data_sources = 3, capitalize = TRUE))
  # cat("searching parent taxa in NCBI\n")
  # p_ncbi = map(unique_parent, ~ safe_gna_verifier(.x, data_sources = 4, capitalize = TRUE))
  
  strip_df <- function(map_out) {
    # Filter out elements with errors
    valid_elements <- keep(map_out, ~ is.null(.$error))
    
    # Use map_df to efficiently combine all valid results
    tbl_out <- map_df(valid_elements, "result")
    
    # If the result is empty, return an empty tibble
    if (nrow(tbl_out) == 0) {
      return(tibble())
    }
    
    # Determine column types dynamically
    col_types <- map_chr(tbl_out, class)
    
    # Define type conversion functions
    type_converters <- list(
      "character" = as.character,
      "numeric" = as.numeric,
      "integer" = as.integer,
      "logical" = as.logical,
      "factor" = as.factor,
      "Date" = as.Date,
      "POSIXct" = as.POSIXct
    )
    
    # Convert columns to their appropriate types
    tbl_out <- tbl_out %>%
      mutate(across(everything(), 
                    ~ type_converters[[col_types[cur_column()]]](.x)))
    
    # Ensure the result is a tibble
    as_tibble(tbl_out)
  }
  
  df_t_itis = strip_df(t_itis)
  df_t_ncbi = strip_df(t_ncbi)
  df_t_iucn = strip_df(t_iucn)
  # df_p_itis = strip_df(p_itis)
  # df_p_ncbi = strip_df(p_ncbi)
  
  h_itis = itis_hierarchy(df_t_itis$currentRecordId, "up")
  
  taxa_map_out = taxa_map %>%
    left_join(t_aw %>%
                mutate(taxa_search = name_submitted,
                       amphibiaweb_id_matched = amphib_id,
                       amphibiaweb_order = ordr,
                       amphibiaweb_family = family,
                       amphibiaweb_subfamily = subfamily,
                       amphibiaweb_canonical_matched = paste(genus, species),
                       amphibiaweb_common = common_name,
                       amphibiaweb_url = url) %>%
                filter(!is.na(amphib_id)) %>%
                select(taxa_search,
                       amphibiaweb_id_matched,
                       amphibiaweb_order,
                       amphibiaweb_family,
                       amphibiaweb_subfamily,
                       amphibiaweb_canonical_matched,
                       amphibiaweb_common,
                       amphibiaweb_url), by = "taxa_search") %>%
  left_join(df_t_itis %>%
              mutate(taxa_search = submittedName,
                     itis_tsn_matched = recordId,
                     itis_canonical_matched = matchedCanonicalSimple,
                     itis_status_matched = taxonomicStatus,
                     itis_tsn_current = currentRecordId,
                     itis_canonical_current = currentCanonicalSimple) %>%
              select(taxa_search,
                     itis_tsn_matched,
                     itis_canonical_matched,
                     itis_status_matched,
                     itis_tsn_current,
                     itis_canonical_current), by = "taxa_search") %>%
    left_join(df_t_ncbi %>%
                mutate(taxa_search = submittedName,
                       ncbi_id_matched = recordId,
                       ncbi_canonical_matched = matchedCanonicalSimple) %>%
                select(taxa_search,
                       ncbi_id_matched,
                       ncbi_canonical_matched), by = "taxa_search") %>%
    left_join(df_t_iucn %>%
                mutate(taxa_search = submittedName,
                       iucn_tsn_matched = recordId,
                       iucn_canonical_matched = matchedCanonicalSimple,
                       iucn_status_matched = taxonomicStatus,
                       iucn_tsn_current = currentRecordId,
                       iucn_canonical_current = currentCanonicalSimple) %>%
                select(taxa_search,
                       iucn_tsn_matched,
                       iucn_canonical_matched,
                       iucn_status_matched,
                       iucn_tsn_current,
                       iucn_canonical_current), by = "taxa_search")

  return(taxa_map_out)
  
}

taxa_map_detail = taxa_detail(taxa_map)

taxa_map_detail_count = taxa_map_detail %>%
  left_join(sn_unique_df, by = c( "taxa_raw" = "scientific_name"))

itis_synonym = taxa_map_detail_count %>%
  filter(itis_status_matched == "Synonym")

q_aw = scrape_amphibiaweb(as.character(taxa_map$taxa_search))
q_gna = gna_verifier("Helianthus annuus", data_sources = 118)
gna_verifier(c("Helianthus annuus", "Homo saapiens"))

q_gna = map(as.character(na.omit(taxa_map$taxa_search)), ~ gna_verifier(.x, data_sources = 3, capitalize = TRUE))


taxa_resolved = resolve_sci_taxa(path = taxa_map_path, data.sources = 118)
taxa_resolved = resolve_sci_taxa(x = taxa_map, data.sources = 118)

taxa_clean = revise_taxa(taxa_map_path, sn_unique_df, "scientific_name", ",")


ds = gnr_datasources()

emp = gnr_resolve(c("rana muscosa", "rana pipiens"), data_source_ids = 118, fields = "all")

emp = gna_search("Rana muscosa")
emp = gna_parse("Rana muscosa")


emp_2 = gnr_resolve(c("rana muscosa", "rana pipiens"), data_source_ids = 118, fields = "all")

speciesList = classification(c("rana muscosa", "rana pipiens"), db = "itis")

peace = gna_parse(sn_unique)
```

# taxa details 1-by-1
```{r}

map_rank = function(rank) {
  rmap = c("kingdom" = 1,
           "subkingdom" = 2,
           "infrakingdom" = 3,
           "phylum" = 4,
           "subphylum" = 5,
           "infraphylum" = 6,
           "superclass" = 7,
           "class" = 8,
           "order" = 9,
           "family" = 10,
           "subfamily" = 11,
           "genus" = 12,
           "species" = 13)
  
  return(as.integer(rmap[rank]))
}

taxa_lookup = function(taxa) {
  cat(taxa, ": ", sep = "")
  cat("AmphibiaWeb")
  taxa_aw = scrape_amphibiaweb(taxa)
  cat(", ITIS")
  taxa_itis = gna_verifier(taxa, data_sources = 3, capitalize = TRUE)
  cat(", NCBI")
  taxa_ncbi = gna_verifier(taxa, data_sources = 4, capitalize = TRUE)
  cat(", IUCN")
  taxa_iucn = gna_verifier(taxa, data_sources = 163, capitalize = TRUE)
  
  ranknum_itis = map_rank(tolower(itis_taxrank(taxa_itis$currentRecordId)))
  
  hierarchy_itis = itis_hierarchy(taxa_itis$currentRecordId, "full") %>%
    mutate(ranknum = map_int(rankname, ~ map_rank(.x))) %>%
    filter(ranknum >= 9,
           ranknum <= ranknum_itis) %>%
    select(rankname,
           taxonname) %>%
    pivot_wider(names_from = rankname,
                values_from = taxonname)
  
 taxa_out = tibble(
   taxa_search = taxa,
   amphibiaweb_id_matched = taxa_aw$amphib_id,
   amphibiaweb_order = taxa_aw$ordr,
   amphibiaweb_family = taxa_aw$family,
   amphibiaweb_subfamily = taxa_aw$subfamily,
   amphibiaweb_genus = taxa_aw$genus,
   amphibiaweb_species = taxa_aw$species,
   amphibiaweb_common = taxa_aw$common_name,
   amphibiaweb_url = taxa_aw$url
 )
  
}

taxa_detail = function(tm) {
  taxa_map = tm %>%
    mutate(taxa_trimmed = na_if(taxa_trimmed, ''),
           taxa_replacement = na_if(taxa_replacement, ''),
           taxa_search = case_when(
             taxa_removed ~ NA,
             !is.na(taxa_replacement) ~ taxa_replacement,
             !is.na(taxa_trimmed) ~ taxa_trimmed,
             TRUE ~ NA
           ),
           taxa_parent = word(taxa_search, 1))
  
  unique_taxa = unique(as.character(na.omit(taxa_map$taxa_search)))
  unique_parent = unique(as.character(na.omit(taxa_map$taxa_parent)))
  
  cat("searching taxa in AmphibiaWeb\n")
  t_aw = scrape_amphibiaweb(as.character(unique_taxa))
  
  safe_gna_verifier <- safely(gna_verifier)
  safe_gnr_resolve <- safely(gnr_resolve)
  
  cat("searching taxa in ITIS\n")
  t_itis = map(unique_taxa, ~ safe_gna_verifier(.x, data_sources = 3, capitalize = TRUE))
  cat("searching taxa in NCBI\n")
  t_ncbi = map(unique_taxa, ~ safe_gna_verifier(.x, data_sources = 4, capitalize = TRUE))
  cat("searching taxa in IUCN\n")
  t_iucn = map(unique_taxa, ~ safe_gna_verifier(.x, data_sources = 163, capitalize = TRUE))
  
  # t_iucn_s = map(unique_taxa, ~ iucn_summary(.x))
  
  # cat("searching parent taxa in ITIS\n")
  # p_itis = map(unique_parent, ~ safe_gna_verifier(.x, data_sources = 3, capitalize = TRUE))
  # cat("searching parent taxa in NCBI\n")
  # p_ncbi = map(unique_parent, ~ safe_gna_verifier(.x, data_sources = 4, capitalize = TRUE))
  
  strip_df <- function(map_out) {
    # Filter out elements with errors
    valid_elements <- keep(map_out, ~ is.null(.$error))
    
    # Use map_df to efficiently combine all valid results
    tbl_out <- map_df(valid_elements, "result")
    
    # If the result is empty, return an empty tibble
    if (nrow(tbl_out) == 0) {
      return(tibble())
    }
    
    # Determine column types dynamically
    col_types <- map_chr(tbl_out, class)
    
    # Define type conversion functions
    type_converters <- list(
      "character" = as.character,
      "numeric" = as.numeric,
      "integer" = as.integer,
      "logical" = as.logical,
      "factor" = as.factor,
      "Date" = as.Date,
      "POSIXct" = as.POSIXct
    )
    
    # Convert columns to their appropriate types
    tbl_out <- tbl_out %>%
      mutate(across(everything(), 
                    ~ type_converters[[col_types[cur_column()]]](.x)))
    
    # Ensure the result is a tibble
    as_tibble(tbl_out)
  }
  
  df_t_itis = strip_df(t_itis)
  df_t_ncbi = strip_df(t_ncbi)
  df_t_iucn = strip_df(t_iucn)
  # df_p_itis = strip_df(p_itis)
  # df_p_ncbi = strip_df(p_ncbi)
  
  h_itis = itis_hierarchy(df_t_itis$currentRecordId, "up")
  
  taxa_map_out = taxa_map %>%
    left_join(t_aw %>%
                mutate(taxa_search = name_submitted,
                       amphibiaweb_id_matched = amphib_id,
                       amphibiaweb_order = ordr,
                       amphibiaweb_family = family,
                       amphibiaweb_subfamily = subfamily,
                       amphibiaweb_canonical_matched = paste(genus, species),
                       amphibiaweb_common = common_name,
                       amphibiaweb_url = url) %>%
                filter(!is.na(amphib_id)) %>%
                select(taxa_search,
                       amphibiaweb_id_matched,
                       amphibiaweb_order,
                       amphibiaweb_family,
                       amphibiaweb_subfamily,
                       amphibiaweb_canonical_matched,
                       amphibiaweb_common,
                       amphibiaweb_url), by = "taxa_search") %>%
  left_join(df_t_itis %>%
              mutate(taxa_search = submittedName,
                     itis_tsn_matched = recordId,
                     itis_canonical_matched = matchedCanonicalSimple,
                     itis_status_matched = taxonomicStatus,
                     itis_tsn_current = currentRecordId,
                     itis_canonical_current = currentCanonicalSimple) %>%
              select(taxa_search,
                     itis_tsn_matched,
                     itis_canonical_matched,
                     itis_status_matched,
                     itis_tsn_current,
                     itis_canonical_current), by = "taxa_search") %>%
    left_join(df_t_ncbi %>%
                mutate(taxa_search = submittedName,
                       ncbi_id_matched = recordId,
                       ncbi_canonical_matched = matchedCanonicalSimple) %>%
                select(taxa_search,
                       ncbi_id_matched,
                       ncbi_canonical_matched), by = "taxa_search") %>%
    left_join(df_t_iucn %>%
                mutate(taxa_search = submittedName,
                       iucn_tsn_matched = recordId,
                       iucn_canonical_matched = matchedCanonicalSimple,
                       iucn_status_matched = taxonomicStatus,
                       iucn_tsn_current = currentRecordId,
                       iucn_canonical_current = currentCanonicalSimple) %>%
                select(taxa_search,
                       iucn_tsn_matched,
                       iucn_canonical_matched,
                       iucn_status_matched,
                       iucn_tsn_current,
                       iucn_canonical_current), by = "taxa_search")

  return(taxa_map_out)
  

```
