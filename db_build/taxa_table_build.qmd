---
title: "taxa_table_build"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, uuid, RIBBiTR-BII/ribbitrrr, EML, ropensci/bold, ropensci/taxize, EDIorg/taxonomyCleanr)

# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

# connect to database
dbcon = hopToDB("ribbitr")
```

Pull metadata and tables

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from DB
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
```

# build taxa table
```{r}
sn_aural = db_aural %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(species_aural, region, country) %>%
  rename(scientific_name = species_aural) %>%
  collect()

sn_capture = db_capture %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(species_capture, region, country) %>%
  rename(scientific_name = species_capture) %>%
  collect()

sn_ves = db_ves %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(species_ves, region, country) %>%
  rename(scientific_name = species_ves) %>%
  collect()

sn_cmr = db_cmr %>%
  left_join(db_site, by = c("site_id_tagged" = "site_id")) %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(species_cmr, region, country) %>%
  rename(scientific_name = species_cmr) %>%
  collect()

sn_all = bind_rows(sn_aural,
                   sn_capture,
                   sn_ves,
                   sn_cmr) %>%
  filter(!is.na(scientific_name)) %>%
  arrange(scientific_name)

sn_br = sn_all %>%
  filter(country == "brazil") %>%
  select(scientific_name) %>%
  distinct()

sn_ca = sn_all %>%
  filter(region == "california") %>%
  select(scientific_name) %>%
  distinct()

sn_pa = sn_all %>%
  filter(country == "panama") %>%
  select(scientific_name) %>%
  distinct()

sn_pe = sn_all %>%
  filter(region == "pennsylvania") %>%
  select(scientific_name) %>%
  distinct()


sn_unique_df = sn_all %>%
  select(scientific_name) %>%
  group_by(scientific_name) %>%
  summarise(count = n()) %>%
  arrange(scientific_name) %>%
  collect()

sn_unique_str = sn_all %>%
  # mutate(sn = str_replace(scientific_name, "_", " ")) %>%
  pull(scientific_name) %>%
  unique()

```

# taxonomy clean
```{r}

taxa_map_path = here("staging", "taxa_mapping")
taxa_map = create_taxa_map(path = taxa_map_path, x = sn_unique_df, col = 'scientific_name')
taxa_trim = trim_taxa(path = taxa_map_path)

# remove taxa
rm_list = c(
  "control",
  "see_notes",
  "tadpole_species_1",
  "tad_spp_2",
  "unknown",
  "unknown_species"
)

taxa_rm = map(rm_list, ~ remove_taxa(.x, path = taxa_map_path))

# replace taxa
taxa_rp = replace_taxa("chiasmocleis_cf._atlantica", "chiasmocleis", path = taxa_map_path)
taxa_rp = replace_taxa("Desmognathaus_sp.", "desmognathus", path = taxa_map_path)
taxa_rp = replace_taxa("desmognathus_so", "desmognathus", path = taxa_map_path)
taxa_rp = replace_taxa("desmog_spp", "desmognathus", path = taxa_map_path)
taxa_rp = replace_taxa("desmog_spp.", "desmognathus", path = taxa_map_path)
taxa_rp = replace_taxa("ischnocnema_sp._02_(aff._lactea)", "ischnocnema", path = taxa_map_path)
taxa_rp = replace_taxa("larval_salamander_sp.", "caudata", path = taxa_map_path)
taxa_rp = replace_taxa("ololygon_aff._brieni", "ololygon", path = taxa_map_path)
taxa_rp = replace_taxa("ololygon_aff._littoralis", "ololygon", path = taxa_map_path)
taxa_rp = replace_taxa("ololygon_cf_litoralis", "ololygon", path = taxa_map_path)
taxa_rp = replace_taxa("pristimantis_sp._potential_new_sp", "pristimantis", path = taxa_map_path)
taxa_rp = replace_taxa("Rana_catesbeiana_x_Rana_clamitans_(possibly)", "rana", path = taxa_map_path)
taxa_rp = replace_taxa("red_backed_salamander", "plethodon cinereus", path = taxa_map_path)
taxa_rp = replace_taxa("toad_sp.", "bufonidae", path = taxa_map_path)
taxa_rp = replace_taxa("esparadana_prosoblepon", "espadarana prosoblepon", path = taxa_map_path)
taxa_rp = replace_taxa("desmongnathus_sp", "desmognathus", path = taxa_map_path)
taxa_rp = replace_taxa("desmoganthus_sp.", "desmognathus", path = taxa_map_path)
taxa_rp = replace_taxa("bufo_americanus", "anaxyrus americanus", path = taxa_map_path)
taxa_rp = replace_taxa("colostethus_panamensis", "colostethus panamansis", path = taxa_map_path)
taxa_rp = replace_taxa("hyliola_regilla", "pseudacris regilla", path = taxa_map_path)
taxa_rp = replace_taxa("leptodactylus_marmoratus", "adenomera marmorata", path = taxa_map_path)
taxa_rp = replace_taxa("boana_bandeirante", "boana bandeirantes", path = taxa_map_path)
taxa_rp = replace_taxa("eurycea_bislaneata", "eurycea bislineata", path = taxa_map_path)
taxa_rp = replace_taxa("hyalinobatrachium_fleishmanni", "hyalinobatrachium fleischmanni", path = taxa_map_path)
taxa_rp = replace_taxa("lithobates_sylvaticus", "rana sylvatica", path = taxa_map_path)
taxa_rp = replace_taxa("plethodon_glutinosis", "plethodon glutinosus", path = taxa_map_path)



taxa_map = read_taxa_map(taxa_map_path)

sn_replace_region = sn_all %>%
  group_by(scientific_name, region, country) %>%
  summarise(count = n()) %>%
  arrange(scientific_name) %>%
  collect() %>%
  left_join(taxa_map, by = c("scientific_name" = "taxa_raw")) %>%
  filter(taxa_replacement != "")

sn_replace_br = sn_replace_region %>%
  filter(country == "brazil") %>%
  select(scientific_name:taxa_replacement)

sn_replace_ca = sn_replace_region %>%
  filter(region == "california") %>%
  select(scientific_name:taxa_replacement)

sn_replace_pa = sn_replace_region %>%
  filter(country == "panama") %>%
  group_by(scientific_name) %>%
  summarise(count = sum(count),
            taxa_replacement = first(taxa_replacement)) %>%
  select(scientific_name:taxa_replacement)

sn_replace_pe = sn_replace_region %>%
  filter(region == "pennsylvania") %>%
  select(scientific_name:taxa_replacement)

```

# taxa lookup functions
```{r}

map_rank = function(rank) {
  rmap = c("kingdom" = 1,
           "subkingdom" = 2,
           "infrakingdom" = 3,
           "phylum" = 4,
           "subphylum" = 5,
           "infraphylum" = 6,
           "superclass" = 7,
           "class" = 8,
           "order" = 9,
           "family" = 10,
           "subfamily" = 11,
           "genus" = 12,
           "species" = 13)
  
  return(as.integer(rmap[rank]))
}

safely_gna_verifier = safely(gna_verifier)

taxa_lookup = function(taxa) {
  # intentionally written non-vectorized, to build in time buffers between query for each database as requested
  
  cat("\033[1;37m", taxa, ": ", sep = "")
  cat("\033[38;5;240m", "AmphibiaWeb", sep = "")
  taxa_aw = scrape_amphibiaweb(taxa, quietly = TRUE)
  cat(", ITIS", sep = "")
  taxa_itis = safely_gna_verifier(taxa, data_sources = 3, capitalize = TRUE)
  
  if (is.null(taxa_itis$error)){
    if (!is.na(taxa_itis$result$currentRecordId)){
      itis_pos = TRUE
    } else {
      itis_pos = FALSE
    }
  } else {
    itis_pos = FALSE
  }
  
  if (itis_pos) {
    cat(", ITIS hierarchy", sep = "")
    rankname_itis = tolower(itis_taxrank(taxa_itis$result$currentRecordId))
    ranknum_itis = map_rank(rankname_itis)
    
    hierarchy_itis = itis_hierarchy(taxa_itis$result$currentRecordId, "full") %>%
      mutate(ranknum = map_int(rankname, ~ map_rank(.x))) %>%
      filter(ranknum >= 9,
             ranknum <= ranknum_itis) %>%
      select(rankname,
             taxonname) %>%
      pivot_wider(names_from = rankname,
                  values_from = taxonname) %>%
      mutate(rankname = rankname_itis)
  }
  
  
  cat(", NCBI", sep = "")
  taxa_ncbi = safely_gna_verifier(taxa, data_sources = 4, capitalize = TRUE)
  cat(", IUCN\n", sep = "")
  taxa_iucn = safely_gna_verifier(taxa, data_sources = 163, capitalize = TRUE)
  
  taxa_out = taxa_aw %>%
    rename_with(~ paste0("aw_", .)) %>%
    mutate(taxa_search = taxa)
  
  if (is.null(taxa_itis$error)) {
    taxa_out = taxa_out %>%
      bind_cols(taxa_itis$result %>%
                  rename_with(~ paste0("itis_", .)))
    
    if (itis_pos) {
      taxa_out = taxa_out %>%
        bind_cols(hierarchy_itis %>%
                    rename_with(~ paste0("itis_", .)))
    }
  }
  
  if (is.null(taxa_ncbi$error)) {
    taxa_out = taxa_out %>%
      bind_cols(taxa_ncbi$result %>%
                  rename_with(~ paste0("ncbi_", .)))
  }
  
  if (is.null(taxa_iucn$error)) {
    taxa_out = taxa_out %>%
      bind_cols(taxa_iucn$result %>%
                  rename_with(~ paste0("iucn_", .)))
  }
  
  return(taxa_out)
}

taxa_list = c("rana muscosa",
              "rana",
              "bogus")

taxa_lookup_map = function(taxa_list) {
  taxa_lm = map_df(taxa_list, ~ taxa_lookup(.x))
  
  taxa_lm_clean = taxa_lm %>%
    mutate("amphibiaweb_species" = ifelse(is.na(aw_species), NA, paste(aw_order, aw_species))) %>%
    rename("amphibiaweb_id_matched" = "aw_amphib_id",
           "amphibiaweb_order" = "aw_order",
           "amphibiaweb_family" = "aw_family",
           "amphibiaweb_subfamily" = "aw_subfamily",
           "amphibiaweb_genus" = "aw_genus",
           "amphibiaweb_common" = "aw_common_name",
           "amphibiaweb_url" = "aw_url",
           "itis_tsn_matched" = "itis_recordId",
           "itis_canonical_matched" = "itis_matchedCanonicalSimple",
           "itis_status_matched" = "itis_taxonomicStatus",
           "itis_match_type" = "itis_matchType",
           "itis_tsn_current" = "itis_currentRecordId",
           "itis_canonical_current" = "itis_currentCanonicalSimple",
           "itis_rank_current" = "itis_rankname",
           "ncbi_id_matched" = "ncbi_recordId",
           "ncbi_canonical_matched" = "ncbi_matchedCanonicalSimple",
           "iucn_tsn_matched" = "iucn_recordId",
           "iucn_canonical_matched" = "iucn_matchedCanonicalSimple",
           "iucn_status_matched" = "iucn_taxonomicStatus",
           "iucn_tsn_current" = "iucn_currentRecordId",
           "iucn_canonical_current" = "iucn_currentCanonicalSimple") %>%
    select(any_of(c("taxa_search",
                    "amphibiaweb_id_matched",
                    "amphibiaweb_order",
                    "amphibiaweb_family",
                    "amphibiaweb_subfamily",
                    "amphibiaweb_genus",
                    "amphibiaweb_species",
                    "amphibiaweb_common",
                    "amphibiaweb_url",
                    "itis_tsn_matched",
                    "itis_canonical_matched",
                    "itis_status_matched",
                    "itis_match_type",
                    "itis_tsn_current",
                    "itis_canonical_current",
                    "itis_rank_current",
                    "itis_order",
                    "itis_family",
                    "itis_genus",
                    "itis_species",
                    "ncbi_id_matched",
                    "ncbi_canonical_matched",
                    "iucn_tsn_matched",
                    "iucn_canonical_matched",
                    "iucn_status_matched",
                    "iucn_tsn_current",
                    "iucn_canonical_current")))
  
  return(list(taxa_lm,
              taxa_lm_clean))
}

```

# run taxa lookup
```{r}
taxa_map_clean = read_taxa_map(taxa_map_path) %>%
  mutate(taxa_trimmed = na_if(taxa_trimmed, ''),
         taxa_replacement = na_if(taxa_replacement, ''),
         taxa_search = case_when(
           taxa_removed ~ NA,
           !is.na(taxa_replacement) ~ tolower(taxa_replacement),
           !is.na(taxa_trimmed) ~ tolower(taxa_trimmed),
           TRUE ~ NA
         ))

taxa_unique = unique(as.character(na.omit(taxa_map_clean$taxa_search)))

taxa_lookup_res = taxa_lookup_map(taxa_unique)

taxa_lookup_all = taxa_lookup_res[[1]]
taxa_lookup_clean = taxa_lookup_res[[2]]

# collect all unique, unsearched parent taxa
parent_cols = c("itis_order",
                "itis_family",
                "itis_genus")

add_parent_taxa = tolower(unique(na.omit(unlist(taxa_lookup_clean[parent_cols])))) %>%
  setdiff(taxa_unique)

parent_lookup_res = taxa_lookup_map(add_parent_taxa)

parent_lookup_all = parent_lookup_res[[1]]
parent_lookup_clean = parent_lookup_res[[2]]

taxa_lookup_final = bind_rows(taxa_lookup_clean,
                              parent_lookup_clean)

```

# checks
```{r}
taxa_dupes = get_dupes(taxa_lookup_final, itis_canonical_current)
itis_na = taxa_lookup_final %>%
  filter(is.na(itis_tsn_matched))
itis_partial = taxa_lookup_final %>%
  filter(itis_match_type == "PartialExact")
itis_synonym = taxa_lookup_final %>%
  filter(itis_status_matched == "Synonym")

```