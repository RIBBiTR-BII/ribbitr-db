---
title: "db_conflict_cleaning"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)

# connect to database
dbcon = hopToDB(prefix = "ribbitr")

```

Pull metadata and tables

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from DB
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_location = tbl(dbcon, Id("survey_data", "location"))
db_qpcr_bd = tbl(dbcon, Id("survey_data", "qpcr_bd_results"))

```

# nas on natural key columns
```{r}

# join down
aural_chain = tbl_chain("aural", mdc)
capture_chain = tbl_chain("capture", mdc)
ves_chain = tbl_chain("ves", mdc)

db_aural_chain = tbl_join(dbcon, aural_chain, join = "full")
db_capture_chain = tbl_join(dbcon, capture_chain, join = "full")
db_ves_chain = tbl_join(dbcon, ves_chain, join = "full")

# na on visit.date

# identify conflict
db_conflict_aural = db_aural_chain %>%
  filter(is.null(date),
         is.na(survey_id),
         !is.na(visit_id)) %>%
  collect()

db_conflict_capture = db_capture_chain %>%
  filter(is.null(date),
         is.na(survey_id),
         !is.na(visit_id)) %>%
  collect()

db_conflict_ves = db_ves_chain %>%
  filter(is.null(date),
         is.na(survey_id),
         !is.na(visit_id)) %>%
  collect()

# nothing depends on these. just drop.

drop_visit = db_visit %>%
  filter(is.na(date)) %>%
  collect()

# rows_delete(db_visit, drop_visit, by="visit_id", unmatched="ignore")

## null detection type

# visit_ids in survey which are not found in visit
survey_invalid = db_survey %>%
  filter(is.na(detection_type))

aural_invalid = inner_join(db_aural, survey_invalid, by="survey_id") %>% collect()
capture_invalid = inner_join(db_capture, survey_invalid, by="survey_id") %>% collect()
ves_invalid = inner_join(db_ves, survey_invalid, by="survey_id") %>% collect()

# no observations which depend on survey_invalid. great. drop the nulls.
drop_survey = db_survey %>%
  filter(is.na(observers_survey) & is.na(duration_minutes) & is.na(detection_type))


dbBegin(dbcon)

tryCatch(
  {
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    dbCommit(dbcon)
    print("Transaction successful! All tables are up to date.")
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

# relable as detection type "other"

detection_type_rename = db_survey %>%
  filter(is.na(detection_type)) %>%
  mutate(detection_type = "other")

dbBegin(dbcon)

tryCatch(
  {
    db_survey = db_survey %>%
      rows_update(detection_type_rename, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    dbCommit(dbcon)
    print("Transaction successful!")
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

orphaned data

```{r}

# visit_ids in survey which are not found in visit
survey_orphans = anti_join(db_survey, db_visit, by="visit_id")

aural_orphans = inner_join(db_aural, survey_orphans, by="survey_id") %>% collect()
capture_orphans = inner_join(db_capture, survey_orphans, by="survey_id") %>% collect()
ves_orphans = inner_join(db_ves, survey_orphans, by="survey_id") %>% collect()

# no orphans which depend on survey_orphans. great. drop them.

drop_survey = anti_join(db_survey, db_visit, by="visit_id") %>%
  select(any_of(colnames(db_survey)))

dbBegin(dbcon)

tryCatch(
  {
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    dbCommit(dbcon)
    print("Transaction successful! All tables are up to date.")
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

investigate duplicate bd_swab data...

```{r}

count_cap = db_capture %>% pull(bd_swab_id)
count_pcr = db_qpcr_bd %>% pull(bd_swab_id)

unique_cap = unique(db_capture %>% pull(bd_swab_id))
unique_pcr = unique(db_qpcr_bd %>% pull(bd_swab_id))
```