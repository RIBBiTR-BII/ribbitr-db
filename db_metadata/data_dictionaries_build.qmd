---
title: "Build Data Dictionaries"
author: Cob Staines
format: html
editor: source
---

```{r setup, include=FALSE}
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, DBI, RPostgres, here, RIBBiTR-BII/ribbitrrr)

## Connect to DB
dbcon <- hopToDB(prefix = "ribbitr")

```

## Pull Schemas

```{r}
schemas <- dbGetQuery(con, "SELECT schema_name FROM information_schema.schemata
                      WHERE schema_name NOT LIKE 'pg_temp_%'
                      AND schema_name NOT LIKE 'pg_toast_temp_%'
                      AND schema_name != 'pg_catalog'
                      AND schema_name != 'information_schema'
                      AND schema_name != 'public';")$schema_name
```

## Define functions to pull table and column metadata

```{r}

build_table_dictionary <- function(schema) {
  table_query <- paste0("
    SELECT 
      t.table_schema, t.table_name,
      (SELECT count(*) FROM information_schema.columns c WHERE c.table_name = t.table_name AND c.table_schema = t.table_schema) as column_count,
      pg_catalog.obj_description(format('%s.%s',t.table_schema,t.table_name)::regclass::oid, 'pg_class') as table_description
    FROM 
      information_schema.tables t
    WHERE 
      t.table_schema = '", schema, "'
  ")
  
  tables <- tbl(dbcon, sql(table_query))
  
  return(tables)
}

build_column_dictionary <- function(schema) {
  col_query <- paste0("
    SELECT 
      c.table_schema,
      c.table_name,
      c.column_name,
      c.data_type,
      c.character_maximum_length,
      c.numeric_precision,
      c.datetime_precision,
      c.is_nullable,
      c.column_default,
      c.ordinal_position,
      pg_catalog.col_description(format('%s.%s',c.table_schema,c.table_name)::regclass::oid, c.ordinal_position) as pg_description
    FROM 
      information_schema.columns c
    WHERE 
      c.table_schema = '", schema, "'
    ORDER BY 
      c.table_name, c.ordinal_position
  ")
  
  columns <- tbl(dbcon, sql(col_query)) %>% collect()
  
  const_query <- paste0("
    SELECT tc.table_schema, tc.table_name, kcu.column_name, tc.constraint_name, tc.constraint_type
    FROM
      information_schema.key_column_usage kcu
    LEFT JOIN 
      information_schema.table_constraints tc
      ON kcu.table_schema = tc.table_schema
      AND kcu.table_name = tc.table_name
      AND kcu.constraint_name = tc.constraint_name
    WHERE 
      kcu.table_schema = '", schema, "'
  ")
  
  constraints <-tbl(dbcon, sql(const_query)) %>% collect()
  
  pkeys = constraints %>%
    filter(constraint_type == "PRIMARY KEY") %>%
    select(table_name,
           column_name) %>%
    mutate(primary_key = TRUE)
  
  fkeys = constraints %>%
    filter(constraint_type == "FOREIGN KEY") %>%
    select(table_name,
           column_name) %>%
    mutate(foreign_key = TRUE)
  
  unique = constraints %>%
    filter(constraint_type == "UNIQUE") %>%
    select(table_name,
           column_name) %>%
    mutate(unique = TRUE)
  
  columns_constraints = columns %>%
    left_join(pkeys, by = c("table_name", "column_name")) %>%
    left_join(fkeys, by = c("table_name", "column_name")) %>%
    left_join(unique, by = c("table_name", "column_name")) %>%
    mutate(primary_key = ifelse(is.na(primary_key), FALSE, TRUE),
           foreign_key = ifelse(is.na(foreign_key), FALSE, TRUE),
           unique = ifelse(is.na(unique), FALSE, TRUE),
           key_type = case_when(  # depreciate on Jan 2025
             primary_key ~ "PK",
             foreign_key ~ "FK",
             TRUE ~ NA_character_)) %>%
    select(table_schema,
           table_name,
           column_name,
           primary_key,
           foreign_key,
           unique,
           is_nullable,
           everything())
    
  
  return(columns_constraints)
}

column_dict_supplementary= c(
  "definition",
  "units",
  "accuracy",
  "scale",
  "format",
  "reviewed",
  "natural_key"
)

column_dict_mutate_supplementary <- function(dict) {
  
  dict_out = dict %>%
    mutate(
          definition = "",
          units = "",
          accuracy = "",
          scale = "",
          format = "",
          reviewed = FALSE,
          natural_key = FALSE
    )

  return(dict_out)
}

```

# Build data dictionaries locally (temp)

```{r}
# dir.create(file.path(here("staging", "metadata")), showWarnings = FALSE) # not needed

table_dict_build = list()
column_dict_build = list()

for (schema in schemas) {
  table_dict_build[[schema]] <- build_table_dictionary(schema) %>%
    collect()
  
  column_dict_build[[schema]] <- column_dict_mutate_supplementary(build_column_dictionary(schema)) %>%
    select(table_schema, table_name, column_name, all_of(column_dict_supplementary), everything()) %>%
    collect()
  
  cat("Dictionaries assembled for schema:", schema, "\n")
}

```

# Write data dictionaries to db as single transaction

```{r}

dbBegin(con)

tryCatch(
  {
    for (schema in schemas) {
      
        # Write table dictionary
      dbWriteTable(dbcon,
                   name = Id(schema, "metadata_tables"),
                   value = table_dict_build[[schema]],
                   overwrite = TRUE)
      table_pkey_str = paste0("
                        ALTER TABLE ribbitr.", schema, ".metadata_tables
                        ADD PRIMARY KEY (table_schema, table_name)
                        ")
      dbExecute(dbcon, table_pkey_str)
      
      # Write column dictionary
      dbWriteTable(dbcon,
                   name = Id(schema, "metadata_columns"),
                   value = column_dict_build[[schema]],
                   overwrite = TRUE)
      column_pkey_str = paste0("
                        ALTER TABLE ribbitr.", schema, ".metadata_columns
                        ADD PRIMARY KEY (table_schema, table_name, column_name);
                        ")
      dbExecute(dbcon, column_pkey_str)
      default_val_str = paste0("
                        ALTER TABLE ribbitr.", schema, ".metadata_columns
                        ALTER COLUMN reviewed SET DEFAULT FALSE;
                        ")
      dbExecute(dbcon, default_val_str)
      
      
      
      cat("Dictionaries created for schema:", schema, "\n")
    }

    # Commit the transaction if successful
    dbCommit(dbcon)
    cat("Transaction successful!")

}, error = function(e) {
  # Rollback in case of error
  dbRollback(dbcon)
  message("Transaction failed: ", e$message)
})

```


```{r}
dbDisconnect(dbcon)
```
