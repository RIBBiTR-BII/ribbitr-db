---
title: "bd qPCR push Richards-Zawacki"
format: html
editor: source
---

## Setup

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, rio, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to DB
dbcon <- hopToDB("wibbitr")

## Point to local data directory
ddir = Sys.getenv("data_dir")  # data directory
# Keeping .csv files in a central directory. Naming convention uses download date to distinguish batches.
wddir = here(ddir, "bd_qpcr_results", "ribbitr_data_2025-05-30", "ribbitr_data") # working data directory

```

## load table pointers

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))

```

## load results from file

```{r}
# list.files(here(wddir, "penn", "2023", ""))

# brasil
## 2022
raw_br_2022_01 = import_list(here(wddir, "Brazil2022", "RIBBiTR_BrazilSwabs2022_10132023_Plate1_RERUN2_RESULTS.xlsx"))
raw_br_2022_03 = import_list(here(wddir, "Brazil2022", "RIBBiTR_BrazilSwabs2022_08172023_Plate3_RERUN_Results.xlsx"))
raw_br_2022_04 = import_list(here(wddir, "Brazil2022", "RIBBiTR_BrazilSwabs2022_10132023_Plate4_RESULTS.xlsx"))
## 2023
raw_br_2023_01 = import_list(here(wddir, "Brazil2023", "RIBBiTR_BrazilSwabs2023_03252024_plate1_RERUN_results.xlsx"))
raw_br_2023_02 = import_list(here(wddir, "Brazil2023", "RIBBiTR_BrazilSwabs2023_03082024_plate2_Results.xlsx"))
raw_br_2023_03 = import_list(here(wddir, "Brazil2023", "RIBBiTR_BrazilSwabs2023_03112024_plate3_Results.xlsx"))
raw_br_2023_04 = import_list(here(wddir, "Brazil2023", "RIBBiTR_BrazilSwabs2023_03142024_plate4_Results.xlsx"))
raw_br_2023_05 = import_list(here(wddir, "Brazil2023", "RIBBiTR_BrazilSwabs2023_03142024_plate5_Results.xlsx"))
raw_br_2023_06 = import_list(here(wddir, "Brazil2023", "RIBBiTR_BrazilSwabs2023_03262024_plate6_Results.xlsx"))
raw_br_2023_07 = import_list(here(wddir, "Brazil2023", "RIBBiTR_BrazilSwabs2023_04122024_plate7_results.xlsx"))

# panama
## 2022
raw_pa_2022_01 = import_list(here(wddir, "Panama2022", "RIBBiTR_PanamaSwabs2022_10022023_Plate1_Results.xlsx"))
raw_pa_2022_02 = import_list(here(wddir, "Panama2022", "RIBBiTR_PanamaSwabs2022_10232023_Plate2_Results.xlsx"))
raw_pa_2022_03 = import_list(here(wddir, "Panama2022", "RIBBiTR_PanamaSwabs2022_11062023_Plate3_Results.xlsx"))
raw_pa_2022_04 = import_list(here(wddir, "Panama2022", "RIBBiTR_PanamaSwabs2022_01082024_Plate4_RERUN2_Results.xlsx"))
raw_pa_2022_05 = import_list(here(wddir, "Panama2022", "RIBBiTR_PanamaSwabs2022_01112024_Plate5_Results.xlsx"))
## 2023
raw_pa_2023_01 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_05022024_plate1_results.xlsx"))
raw_pa_2023_02 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_05022024_plate2_results.xlsx"))
raw_pa_2023_03 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_05062024_plate3_results.xlsx"))
raw_pa_2023_04 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_05092024_plate4_results.xlsx"))
raw_pa_2023_05 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_05312024_plate5_results.xlsx"))
raw_pa_2023_06 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_07032024_plate6_results.xlsx"))
raw_pa_2023_07 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_06112024_plate7_results.xlsx"))
raw_pa_2023_08 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_07032024_plate8_results.xlsx"))
raw_pa_2023_09 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_07082024_plate9_results.xlsx"))
raw_pa_2023_10 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_07092024_plate10_results.xlsx"))
raw_pa_2023_11 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_07122024_plate11_results.xlsx"))
raw_pa_2023_12 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_07122024_plate12_results.xlsx"))
raw_pa_2023_13 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_07252024_plate13_results.xlsx"))
raw_pa_2023_14 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_07262024_plate14_results.xlsx"))
raw_pa_2023_15 = import_list(here(wddir, "Panama2023", "RIBBiTR_PanamaSwabs2023_08062024_plate15_results.xlsx"))
## 2023NovDec
raw_pa_2023nd_01 = import_list(here(wddir, "PanamaNovDec2023", "RIBBiTR_PanamaSwabsNovDec2023_11192024_Plate1_results.xlsx"))
raw_pa_2023nd_02 = import_list(here(wddir, "PanamaNovDec2023", "RIBBiTR_PanamaSwabsNovDec2023_12112024_Plate2_results.xlsx"))
raw_pa_2023nd_03 = import_list(here(wddir, "PanamaNovDec2023", "RIBBiTR_PanamaSwabsNovDec2023_12192024_Plate3_results.xlsx"))


# penn
## 2022
raw_pe_2022_01 = import_list(here(wddir, "Penn2022", "PaBdSwabs2022_plate1RERUN_03212023_results!.xlsx"))
raw_pe_2022_02 = import_list(here(wddir, "Penn2022", "PaBdSwabs2022_04062023_Plate2_Results!.xlsx"))
# raw_pe_hmm = import_list(here(wddir, "Penn2022", "PaBdSwabs2022_qPCR_03022023_Plate 1_RBV_RESULTS.xls"))
## 2023
raw_pe_2023_01 = import_list(here(wddir, "Penn2023", "RIBBiTR_qPCR_Penn2023_17August2023_Plate1_RESULTS.xls"))
raw_pe_2023_02 = import_list(here(wddir, "Penn2023", "RIBBiTR_qPCR_Penn2023_17August2023_Plate2_RESULTS.xls"))
raw_pe_2023_03 = import_list(here(wddir, "Penn2023", "RIBBiTR_qPCR_Penn2023_18August2023_Plate3_Results.xlsx"))
## 2024
raw_pe_2024_01 = import_list(here(wddir, "Penn2024", "RIBBiTR_PennSwabs2024_02032025_Plate1_Results.xlsx"))
raw_pe_2024_02 = import_list(here(wddir, "Penn2024", "RIBBiTR_PennSwabs2024_02052025_Plate2_Results.xlsx"))
raw_pe_2024_03 = import_list(here(wddir, "Penn2024", "RIBBiTR_PennSwabs2024_02102025_Plate3_Results.xlsx"))
raw_pe_2024_04 = import_list(here(wddir, "Penn2024", "RIBBiTR_PennSwabs2024_02112025_Plate4_Results.xlsx"))
raw_pe_2024_05 = import_list(here(wddir, "Penn2024", "RIBBiTR_PennSwabs2024_02272025_Plate5_Rerun_results.xlsx"))

tz_local = "America/New_York"

```

## scrape xls files
```{r}

scrape_qpcr_xls <- function(raw_xls) {
  xls <- clean_names(raw_xls)
  
  experiment_name <- str_replace(first(xls$sample_setup[which(xls$sample_setup[,1] == "Experiment Name"),2]), ".edt", "")
  chemistry <- tolower(first(xls$sample_setup[which(xls$sample_setup[,1] == "Chemistry"),2]))
  
  clean_xls <- xls$working_results %>%
    clean_names() %>%
    mutate(
      qpcr_plate_name = ifelse("q_pcr_plate" %in% names(.), q_pcr_plate, experiment_name),
      extraction_plate_name = ifelse("extraction_plate" %in% names(.), extraction_plate, NA_character_),
      qpcr_plate_run = case_when(
        !str_detect(qpcr_plate_name, "RERUN") ~ 1L,
        str_detect(qpcr_plate_name, "RERUN(?!\\d)") ~ 2L,
        TRUE ~ as.integer(str_extract(qpcr_plate_name, "RERUN(\\d+)") %>% str_replace("RERUN", "")) + 1L),
      qpcr_date = as.Date(parse_date_time(str_extract(qpcr_plate_name, "\\d{8}"), orders = "mdY")),
      extraction_date = as.Date(parse_date_time(str_extract(extraction_plate_name, "\\d{8}"), orders = "mdY")),
      master_mix = chemistry
    )
  
  namelist = c("sample_name",
               "bd_ct_mean",
               "bd_quantity_mean",
               "extraction_plate",
               "q_pcr_plate",
               "qpcr_date",
               "extraction_date",
               "master_mix",
               "plate_run")
  
  cols_not_found = setdiff(namelist, names(clean_xls))
  
  # if (length(cols_not_found) != 0) {
  #   stop(paste0("Required columns not found:", str(cols_not_found)))
  # }
  
  return(clean_xls)
}

clean_br_2022_01 = scrape_qpcr_xls(raw_br_2022_01)
clean_br_2022_03 = scrape_qpcr_xls(raw_br_2022_03)
clean_br_2022_04 = scrape_qpcr_xls(raw_br_2022_04)

clean_br_2023_01 = scrape_qpcr_xls(raw_br_2023_01)
clean_br_2023_02 = scrape_qpcr_xls(raw_br_2023_02)
clean_br_2023_03 = scrape_qpcr_xls(raw_br_2023_03)
clean_br_2023_04 = scrape_qpcr_xls(raw_br_2023_04)
clean_br_2023_05 = scrape_qpcr_xls(raw_br_2023_05)
clean_br_2023_06 = scrape_qpcr_xls(raw_br_2023_06)
clean_br_2023_07 = scrape_qpcr_xls(raw_br_2023_07)

clean_pa_2022_01 = scrape_qpcr_xls(raw_pa_2022_01)
clean_pa_2022_02 = scrape_qpcr_xls(raw_pa_2022_02)
clean_pa_2022_03 = scrape_qpcr_xls(raw_pa_2022_03)
clean_pa_2022_04 = scrape_qpcr_xls(raw_pa_2022_04)
clean_pa_2022_05 = scrape_qpcr_xls(raw_pa_2022_05)

clean_pa_2023_01 = scrape_qpcr_xls(raw_pa_2023_01)
clean_pa_2023_02 = scrape_qpcr_xls(raw_pa_2023_02)
clean_pa_2023_03 = scrape_qpcr_xls(raw_pa_2023_03)
clean_pa_2023_04 = scrape_qpcr_xls(raw_pa_2023_04)
clean_pa_2023_05 = scrape_qpcr_xls(raw_pa_2023_05)
clean_pa_2023_06 = scrape_qpcr_xls(raw_pa_2023_06)
clean_pa_2023_07 = scrape_qpcr_xls(raw_pa_2023_07)
clean_pa_2023_08 = scrape_qpcr_xls(raw_pa_2023_08)
clean_pa_2023_09 = scrape_qpcr_xls(raw_pa_2023_09)
clean_pa_2023_10 = scrape_qpcr_xls(raw_pa_2023_10)
clean_pa_2023_11 = scrape_qpcr_xls(raw_pa_2023_11)
clean_pa_2023_12 = scrape_qpcr_xls(raw_pa_2023_12)
clean_pa_2023_13 = scrape_qpcr_xls(raw_pa_2023_13)
clean_pa_2023_14 = scrape_qpcr_xls(raw_pa_2023_14)
clean_pa_2023_15 = scrape_qpcr_xls(raw_pa_2023_15)

clean_pa_2023nd_01 = scrape_qpcr_xls(raw_pa_2023nd_01)
clean_pa_2023nd_02 = scrape_qpcr_xls(raw_pa_2023nd_02)
clean_pa_2023nd_03 = scrape_qpcr_xls(raw_pa_2023nd_03)

clean_pe_2022_01 = scrape_qpcr_xls(raw_pe_2022_01)
clean_pe_2022_02 = scrape_qpcr_xls(raw_pe_2022_02) %>%
  mutate(bd_quantity_mean = as.numeric(bd_quantity_mean))

clean_pe_2023_01 = scrape_qpcr_xls(raw_pe_2023_01) %>%
  rename(bd_ct_mean = ct_mean,
         bd_quantity_mean = quantity_mean) 
clean_pe_2023_02 = scrape_qpcr_xls(raw_pe_2023_02) %>%
  rename(bd_ct_mean = ct_mean,
         bd_quantity_mean = quantity_mean) %>%
  mutate(bd_quantity_mean = as.numeric(bd_quantity_mean))
clean_pe_2023_03 = scrape_qpcr_xls(raw_pe_2023_03)

clean_pe_2024_01 = scrape_qpcr_xls(raw_pe_2024_01)
clean_pe_2024_02 = scrape_qpcr_xls(raw_pe_2024_02)
clean_pe_2024_03 = scrape_qpcr_xls(raw_pe_2024_03)
clean_pe_2024_04 = scrape_qpcr_xls(raw_pe_2024_04)
clean_pe_2024_05 = scrape_qpcr_xls(raw_pe_2024_05)

clean_pe_2022_02$bd_quantity_mean[clean_pe_2022_02$sample_name == "2022-05-18-admin-rapi18"] = 11603.6640625
clean_pe_2022_02$bd_quantity_mean[clean_pe_2022_02$sample_name == "2022-05-18‚Äêadmin-rapi16"] = 11241.6748046875
clean_pe_2022_02$sample_name[clean_pe_2022_02$sample_name == "2022-05-18‚Äêadmin-rapi16"] = "2022-05-18-admin-rapi16"
clean_pe_2022_02$bd_quantity_mean[clean_pe_2022_02$sample_name == "POS 3.27.23"] = 1101634

bind_results = bind_rows(clean_br_2022_01,
                         clean_br_2022_03,
                         clean_br_2022_04,
                         clean_br_2023_01,
                         clean_br_2023_02,
                         clean_br_2023_03,
                         clean_br_2023_04,
                         clean_br_2023_05,
                         clean_pa_2022_01,
                         clean_pa_2022_02,
                         clean_pa_2022_03,
                         clean_pa_2022_04,
                         clean_pa_2022_05,
                         clean_pa_2023_01,
                         clean_pa_2023_02,
                         clean_pa_2023_03,
                         clean_pa_2023_04,
                         clean_pa_2023_05,
                         clean_pa_2023_06,
                         clean_pa_2023_07,
                         clean_pa_2023_08,
                         clean_pa_2023_09,
                         clean_pa_2023_10,
                         clean_pa_2023_11,
                         clean_pa_2023_12,
                         clean_pa_2023_13,
                         clean_pa_2023_14,
                         clean_pa_2023_15,
                         clean_pa_2023nd_01,
                         clean_pa_2023nd_02,
                         clean_pa_2023nd_03,
                         clean_pe_2022_01,
                         clean_pe_2022_02,
                         clean_pe_2023_01,
                         clean_pe_2023_02,
                         clean_pe_2023_03,
                         clean_pe_2024_01,
                         clean_pe_2024_02,
                         clean_pe_2024_03,
                         clean_pe_2024_04,
                         clean_pe_2024_05)

clean_results = bind_results %>%
  rename(cycle_quant = bd_ct_mean,
         target_quant = bd_quantity_mean,
         sample_control = sample_type,
         qpcr_well = well,
         comments_qpcr = comments) %>%
  mutate(sample_type = "bd",
         detected = case_when(bd_pos_neg == "Positive" ~ 1,
                              bd_pos_neg == "Negative" ~ 0,
                              TRUE ~ NA_real_),
         qpcr_well = as.character(qpcr_well),
         qpcr_lab = "rz_lab",
         replicate_id = 1,
         replicates = "singlet",
         extraction_lab = "rz_lab",
         extraction_kit = "qiagen_dneasy",
         standard = "plasmid-pisces",
         standard_target_type = "ITS1",
         qpcr_machine = "quantstudio_3",
         swab_type = "mw113",
         qpcr_dilution_factor = 1,
         template_dna_volume_uL = 5,
         extract_volume_uL = 20,
         total_qpcr_volume_uL = 25,
         sample_control = ifelse(sample_name %in% c("qPCR Negative", "Negative Swab", "Positive Swab", "POS EXTRACT CONTROL", "NEG EXTRACT CONTROL"), "Control", sample_control),
         target_quant_per_swab = target_quant * qpcr_dilution_factor * extract_volume_uL / template_dna_volume_uL,
         its1_copies_per_standard_unit = case_match(standard_target_type,
                                                    "ITS1" ~ 1,
                                                    "zoospore" ~ 60,
                                                    .default = NA),
         bd_its1_copies_per_swab = target_quant_per_swab * its1_copies_per_standard_unit) %>%
  filter(!is.na(sample_name),
         sample_control != "Control" | is.na(sample_control),
         !str_detect(sample_name, "^Pisces"),
         target_name == "Bd" | is.na(target_name),
         ipc == "Pass")


```

# checks
```{r}
violations_unique = get_dupes(clean_results, sample_name)

```

## reconcile dupes
```{r}
# allowing duplicate samples, for now

# violations_unique_resolved = violations_unique %>%
#   group_by(sample_name) %>%
#   mutate(sample_name = paste0(sample_name, "_DDR", row_number())) %>%
#   ungroup() %>%
#   select(-dupe_count)
# 
# distinct_results = clean_results %>%
#   anti_join(violations_unique, by = "sample_name") %>%
#   bind_rows(violations_unique_resolved)

```

# gelled
```{r}
gelled_results = clean_results %>%
  left_join(db_sample %>% collect(), by = c("sample_name", "sample_type")) %>%
  group_by(sample_name, sample_type) %>%
  mutate(uuid_name = paste0(sample_name, sample_type),
         sample_id = ifelse(is.na(sample_id), UUIDfromName("1208e62f-d3a1-462c-984f-0bf1f43f5837", uuid_name), sample_id)) %>%
  ungroup() %>%
  mutate(sample_name_bd = sample_name) %>%
  left_join(db_bd %>% 
              select(sample_name_bd,
                     qpcr_plate_name,
                     qpcr_well,
                     result_id) %>%
              collect(), by = c("sample_name_bd",
                                "qpcr_plate_name",
                                "qpcr_well")) %>%
  group_by(sample_name_bd,
           qpcr_plate_name,
           qpcr_well) %>%
  mutate(uuid_name = paste0(sample_name_bd, qpcr_well, qpcr_plate_name, qpcr_plate_run),
         result_id = ifelse(is.na(result_id), UUIDfromName("d41b1f58-5576-49b6-a303-0bddcc94a0f2", uuid_name), result_id)) %>%
  ungroup()

```

# subset data
```{r}
subset_bd_samples = gelled_results %>%
  select(any_of(colnames(db_sample))) %>%
  distinct() %>%
  filter(!is.na(sample_id))

compare_bd_samples = compare_df_cols(db_sample %>%
                                  filter(FALSE) %>%
                                  collect(), subset_bd_samples)

tray = compare_for_staging(db_sample %>% collect(), subset_bd_samples, "sample_id", return_all = TRUE, report = "sample")
final_bd_samples = bind_rows(tray$insert,
                             tray$update)

subset_bd = gelled_results %>%
  select(any_of(colnames(db_bd))) %>%
  distinct() %>%
  filter(!is.na(sample_id))

compare_bd = compare_df_cols(db_bd %>%
                               filter(FALSE) %>%
                               collect(), subset_bd)

tray = compare_for_staging(db_bd %>% collect(), subset_bd, "result_id", return_all = TRUE, report = "bd")
final_bd = bind_rows(tray$insert,
                       tray$update)

cheese = tray$update

peace = compare_updates(tray)

p1 = peace[[1]]
p2 = peace[[2]]
p3 = peace[[3]]

```

# commit

```{r}

dbBegin(dbcon)

tryCatch(
  {
    
    temp_sample = stage_to_temp(dbcon, db_sample, final_bd_samples)
    pointer = tbl(dbcon, temp_sample)
    rows_upsert(db_sample, pointer, by="sample_id", in_place=TRUE)
    
    temp_bd = stage_to_temp(dbcon, db_bd, final_bd)
    pointer = tbl(dbcon, temp_bd)
    rows_upsert(db_bd, pointer, by="result_id", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

```{r}
dbDisconnect(dbcon)
```
