---
title: "bd qPCR push SNARL"
format: html
editor: source
---

## Setup

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, rio, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to DB
dbcon <- hopToDB("wibbitr")
sncon = hopToDB("qpcr")

```

## load table pointers

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))

sn_results = tbl(sncon, Id("results"))
sn_plates = tbl(sncon, Id("plates"))
sn_qc = tbl(sncon, Id("qc"))
sn_results_ucsb = tbl(sncon, Id("results_ucsb_import"))
sn_results_snarl = tbl(sncon, Id("results_snarl_import"))

```

# load related data
```{r}
## Point to local data directory
ddir = Sys.getenv("data_dir")  # data directory
# Keeping .csv files in a central directory. Naming convention uses download date to distinguish batches.
wddir = here(ddir, "sierra") # working data directory

# list.files(here(wddir))
raw_2024_plates = read_csv(here(wddir,"2025-03-18", "final_plates.csv"))
raw_2024_qc = read_csv(here(wddir,"2025-03-18", "final_qc.csv"))
raw_2024_results = read_csv(here(wddir,"2025-03-18", "final_results.csv"), col_types = cols(well_notes = "c"))

raw_km = read_csv(here(wddir,"km_pep", "bd_results_kira.csv"))

tz_local = "America/Los_Angeles"

```

## load results from db

```{r}
# join file results
file_results = raw_2024_results %>%
  left_join(raw_2024_plates, by = c("plate_id" = "id")) %>%
  mutate(src = "2024_file")

# join and collect db results
load_results = bind_rows(sn_results %>%
                            collect() %>%
                           mutate(src = "db") %>%
                           filter(!(plate_id == "278" & replicate == "2")),  # check with Alexa
                          sn_results_ucsb %>%
                           mutate(src = "ucsb_import") %>%
                            collect()) %>%
  left_join(sn_plates %>%
              collect(), by = c("plate_id" = "id")) %>%
  bind_rows(file_results) %>%
  mutate(std_type = coalesce(std_type.x, std_type.y)) %>%
  select(-std_type.x,
         -std_type.y)
  
# identify loaded sample prefixes 
names_sn = load_results %>%
  filter(grepl("^[A-Z]{2,6}[0-9,\\.]+$", sample_id)) %>%
  mutate(sample_prefix = gsub("[0-9,\\.]+", "", sample_id)) %>%
  select(sample_prefix) %>%
  distinct() %>%
  arrange(sample_prefix)

# filter SN samples in db_bd
names_db_current = db_bd %>%
  filter(qpcr_lab == "snarl") %>%
  select(sample_name_bd) %>%
  collect() %>%
  rename(sample_name = sample_name_bd) %>%
  mutate(sample_prefix = gsub("[0-9,\\.]+", "", sample_name)) %>%
  group_by(sample_prefix) %>%
  count()


# identify sample prefixes in db_sample
names_db = db_sample %>%
  filter(grepl("^[A-Z]{2,6}[0-9,\\.]+$", sample_name)) %>%
  select(sample_name) %>%
  collect() %>%
  mutate(sample_prefix = gsub("[0-9,\\.]+", "", sample_name)) %>%
  group_by(sample_prefix) %>%
  count()

# determin set intersection
any_missing = setdiff(names_db$sample_prefix, names_sn$sample_prefix)
all_shared = intersect(names_db$sample_prefix, names_sn$sample_prefix)

# filter results only to shared prefixes... though this means new prefixes won't be accespted.
filtered_results = load_results %>%
  mutate(sample_prefix = gsub("[0-9,\\.]+", "", sample_id)) %>%
  filter(sample_prefix %in% all_shared)

```

# clean results
```{r}
clean_km = raw_km %>%
  rename(sample_id = bd_swab_id,
         plate_id = plate,
         date_start = qpcr_date,
         well_notes = notes) %>%
  mutate(plate_name = paste0(as.character(plate_id), "_km"),
         std_type = "plasmid",
         target = "ITS",
         replicate = 1) %>%
  # some KM results are in the UCSB database, some are not. Default to database, drop those from this dataset.
  anti_join(filtered_results %>%
              select(sample_id) %>%
              distinct(), by = "sample_id")

clean_results = filtered_results %>%
  bind_rows(clean_km) %>%
  rename(sample_name_bd = sample_id,
         qpcr_plate_name = plate_name,
         qpcr_well = well_id,
         replicate_id = replicate,
         cycle_quant = quant_cycle,
         target_quant = start_quant,
         comments_qpcr = well_notes,
         ucsb_source =  source,
         standard = std_type) %>%
  mutate(qpcr_dilution_factor = dilution * 10,
         other_plate_name = paste0("ucsb_", ucsb_source),
         qpcr_plate_name = coalesce(qpcr_plate_name, other_plate_name),
         standard = ifelse(is.na(standard) & target == "ITS", "plasmid-briggs", standard),
         standard = ifelse(standard == "plasmid", "plasmid-briggs", standard),
         extraction_plate_name = qpcr_plate_name,
         standard_target_type = case_match(standard,
                                           "genomic" ~ "zoospore",
                                           "gblock" ~ "ITS1",
                                           "plasmid-briggs" ~ "ITS1"),
         extraction_lab = "snarl",
         qpcr_lab = "snarl",
         swab_type = "mw113",
         master_mix = "bioline", 
         qpcr_machine = "biorad_cfx96",
         total_qpcr_volume_uL = 25,
         template_dna_volume_uL = 5,
         extract_volume_uL = 40,
         extraction_kit = "prepman",
         detected = case_match(target_quant,
                               0 ~ FALSE,
                               NA ~ NA,
                               .default = TRUE),
         replicate_detected = ifelse(detected, "p", "n"),
         qpcr_plate_run = 1,
         qpcr_date = as.Date(date_start),
         sample_type = "bd",
         comments_qpcr = ifelse(comments_qpcr == "", NA_character_, comments_qpcr),
         target_quant_per_swab = target_quant * qpcr_dilution_factor * extract_volume_uL / template_dna_volume_uL,
         its1_copies_per_standard_unit = case_match(standard_target_type,
                                                    "ITS1" ~ 1,
                                                    "zoospore" ~ 60,
                                                    .default = NA),
         bd_its1_copies_per_swab = target_quant_per_swab * its1_copies_per_standard_unit) %>%
  group_by(sample_name_bd,
           qpcr_plate_name) %>%
  mutate(replicate_count = max(replicate_id),
         replicates = case_match(replicate_count,
                                1 ~ "singlet",
                                2 ~ "duplicate",
                                3 ~ "triplicate",
                                4 ~ "quadruplicate",
                                5 ~ "quintuplicate",
                                6 ~ "sextuplicate",
                                .default = NA)) %>%
  ungroup()

```

```{r}
violations_unique = get_dupes(clean_results, sample_name_bd, qpcr_plate_name, replicate_id)
```

# We do a complete refresh of samples from the included datasets. This is because the ID systems between the two datasets are distinct... Could we do this better? Could we generate a unique result id based on a the primary key in the ucsb database? Maybes
```{r}
drop_bd = db_bd %>%
  filter(qpcr_lab == "snarl") %>%
  collect()

# these will be dropped and are not found in new data...
check_db = drop_bd %>%
  anti_join(clean_results %>%
              select(sample_name_bd) %>%
              distinct(), by = "sample_name_bd")

check_dataset = clean_results %>%
  anti_join(drop_bd %>%
              select(sample_name_bd) %>%
              distinct(), by = "sample_name_bd")

# SNARL Bd samples with no capture
no_cap_sample = db_bd %>%
  filter(qpcr_lab == "snarl") %>%
  select(sample_id) %>%
  mutate(sample_type = "bd") %>%
  left_join(db_sample, by = c("sample_id", "sample_type")) %>%
  filter(is.na(capture_id)) %>%
  distinct() %>%
  collect()

```

# gelled
```{r}
gelled_results = clean_results %>%
  left_join(db_sample %>% 
              collect(), by = c("sample_name_bd" = "sample_name", "sample_type")) %>%
  group_by(sample_name_bd) %>%
  mutate(uuid_name = paste0(sample_name_bd, sample_type),
         sample_id = ifelse(is.na(sample_id), UUIDfromName("1208e62f-d3a1-462c-984f-0bf1f43f5837", uuid_name), sample_id),
         sample_name = sample_name_bd) %>%
  ungroup() %>%
  left_join(db_bd %>% 
              select(result_id,
                     sample_name_bd,
                     replicate_id,
                     qpcr_plate_name,
                     standard) %>%
              collect(), by = c("sample_name_bd",
                                "replicate_id",
                                "qpcr_plate_name",
                                "standard")) %>%
  mutate(uuid_name = paste0(sample_name_bd, replicate_id, qpcr_plate_name),
         result_id = ifelse(is.na(result_id), UUIDfromName("d41b1f58-5576-49b6-a303-0bddcc94a0f2", uuid_name), result_id))

```

# subset data
```{r}
subset_bd_samples = gelled_results %>%
  select(any_of(colnames(db_sample))) %>%
  distinct() %>%
  filter(!is.na(sample_id))

compare_bd_samples = compare_df_cols(db_sample %>%
                                  filter(FALSE) %>%
                                  collect(), subset_bd_samples)

tray = compare_for_staging(db_sample %>% collect(), subset_bd_samples, "sample_id", return_all = TRUE, report = "sample")
upsert_sample = bind_rows(tray$insert,
                          tray$update)


subset_bd = gelled_results %>%
  select(any_of(colnames(db_bd))) %>%
  distinct() %>%
  filter(!is.na(sample_id))

compare_bd = compare_df_cols(db_bd %>%
                               filter(FALSE) %>%
                               collect(), subset_bd)

tray = compare_for_staging(db_bd %>%
                             filter(qpcr_lab == "snarl") %>%
                             collect(), subset_bd, "result_id", return_all = TRUE, report = "bd")

drop_bd = tray$orphan
upsert_bd = bind_rows(tray$insert,
                      tray$update)

```

# commit

```{r}

# upsert
dbBegin(dbcon)
tryCatch(
  {
    temp_sample = stage_to_temp(dbcon, db_sample, upsert_sample)
    pointer = tbl(dbcon, temp_sample)
    db_sample = db_sample %>%
      rows_upsert(pointer, by="sample_id", in_place=TRUE)
    
    temp_bd = stage_to_temp(dbcon, db_bd, drop_bd)
    pointer = tbl(dbcon, temp_bd)
    db_bd = db_bd %>%
      rows_delete(pointer, by="result_id", in_place=TRUE, unmatched = "ignore")
    
    temp_bd = stage_to_temp(dbcon, db_bd, upsert_bd)
    pointer = tbl(dbcon, temp_bd)
    db_bd = db_bd %>%
      rows_upsert(pointer, by="result_id", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })


# orphan samples
drop_samples = db_sample %>%
  filter(is.na(capture_id),
         sample_type == "bd") %>%
  anti_join(db_bd, by = "sample_id")

dB_sample = db_sample %>%
  rows_delete(drop_samples, by = "sample_id", in_place = TRUE, unmatched = "ignore")

```

```{r}
dbDisconnect(dbcon)
```
