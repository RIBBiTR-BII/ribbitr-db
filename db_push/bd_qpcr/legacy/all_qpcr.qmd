---
title: "all_qpcr"
format: html
editor: source
---

## Load Packages

```{r}

if(!require(librarian)){
  install.packages(librarian)
  library(librarian)
}

shelf(tidyverse, here, DBI, RPostgres, janitor, readxl, parsedate, stringr)

```

## Read in clean tables

```{r}
#| messages: false
#| warning: false
files <- list.files(here("clean_qpcr"))

for (i in 1:n_distinct(files)) {
  
  a <- read_csv(here("clean_qpcr", files[i]))
  
  assign(str_remove(files[i], "_qpcr.csv"), a)
  
}
rm(a)


```

## Bind tables

```{r}

all_qpcr <- plyr::rbind.fill(panama, serdp, brazil, ucsb) %>% 
  # select(!c(extraction_plate_id, qpcr_plate_id)) %>% 
  relocate(average_ct, .before = average_copy_number) %>% 
  relocate(c("total_volume_uL":"volume_template_dna_uL"), .after = average_copy_number) %>% 
  relocate(comments, .after = swab_type) %>% 
  rename(average_copy_number_per_swab = average_zoospores,
         extraction_plate_name = extraction_plate_id,
         qpcr_plate_name = qpcr_plate_id) %>% 
  mutate(average_copy_number_per_swab = if_else(is.na(average_copy_number_per_swab), 0, average_copy_number_per_swab),
         average_copy_number = if_else(is.na(average_copy_number), 0, average_copy_number),
         detected = if_else(average_copy_number > 0, 1, 0)) %>% 
  relocate(detected, .after = bd_swab_id) %>% 
  relocate(result, .before = replicate) %>% 
  relocate(average_ITS1_copies_per_swab, .after = average_copy_number_per_swab) %>% 
  #relocate(its_multiplyer, .before = average_copy_number_per_swab) %>% 
  unite(dilution_factor, c("dilution_factor", "dillution_factor"), na.rm = T, sep = "") %>% 
  mutate(dilution_factor = if_else(dilution_factor == "", NA, dilution_factor)) %>% 
  rename(average_its1_copies_per_swab=average_ITS1_copies_per_swab) %>% 
  mutate(standard = if_else(standard == "pisces", "plasmid-pisces", standard)) %>% 
  select(!c(average_copy_number_per_swab)) %>% # remove for now
  rename(total_qpcr_volume_uL = total_volume_uL,
         qpcr_dilution_factor = dilution_factor,
         average_target_quant = average_copy_number) %>% 
  mutate(qpcr_dilution_factor = as.numeric(str_replace(qpcr_dilution_factor, "1:", "")),
         standard_target_type = if_else(standard %in% c("plasmid-pisces", "plasmid-briggs", "gblock"), "ITS1", "zoospore"),
         qpcr_machine = if_else(qpcr_machine == "applied_biosystems_7500", "abi_7500", qpcr_machine),
         extraction_kit = if_else(is.na(extraction_kit), "qiagen_dneasy", extraction_kit),
         extract_volume_uL = case_when(extraction_kit == "prepman" ~ 40,
                                       extraction_kit == "qiagen_dneasy" ~ 200,
                                       extraction_kit == "ibi_spin_column_blood_tissue_kit" ~ 200,
                                       extraction_kit == "zymo_quick_dna" ~ 200),
         target_quant_per_swab = (average_target_quant * extract_volume_uL) / (volume_template_dna_uL * qpcr_dilution_factor),
         target_quant_per_swab = if_else(str_detect("RKS", bd_swab_id)| standard_target_type == "zoospore", 
                                         (target_quant_per_swab * 60), 
                                         target_quant_per_swab)) %>% 
  relocate(standard_target_type, .before = standard) %>% 
  relocate(extract_volume_uL, .after = volume_template_dna_uL) %>% 
  relocate(target_quant_per_swab, .after = extract_volume_uL)

write_csv(all_qpcr, here("final_qpcr", "merged_qpcr_w_plate.csv"))

```


```{r}

# sn_fig <- all_qpcr %>%
#   mutate(target_quant_per_swab = if_else(str_detect("RKS", bd_swab_id)| standard_target_type == "zoospore",
#                                          (target_quant_per_swab * 60),
#                                          target_quant_per_swab))
# 
# ggplot(all_qpcr, aes(x=log(average_its1_copies_per_swab),
#                  y=log(target_quant_per_swab),
#                  color=standard,
#                  shape = standard)) +
#   geom_jitter(width=0.8, height=0.8, alpha = I(0.4))

```


```{r}
#database connection
connection <- dbConnect(drv = dbDriver("Postgres"),
                        dbname = Sys.getenv("aws_dbname"),
                        host = Sys.getenv("aws_host"),
                        port = Sys.getenv("aws_port"),
                        user = Sys.getenv("aws_user"),
                        password = Sys.getenv("aws_password"))
#search path
dbExecute(connection, "set search_path to survey_data")

#query Data
bd_comp <- "select r.region, s.site, v.date, s2.detection_type, c.species_capture, c.bd_swab_id, bd.bd_swab_id
              from region r
              join site s on r.region_id = s.region_id
              join visit v on s.site_id = v.site_id
              join survey s2 on v.visit_id = s2.visit_id
              join capture c on s2.survey_id = c.survey_id
              join qpcr_bd_results bd on c.bd_swab_id = bd.bd_swab_id;"

bd_comp <- dbGetQuery(connection, bd_comp)

missing_ids <- anti_join(all_qpcr, bd_comp, by = c("bd_swab_id"))

c_cap <- "select c.bd_swab_id from capture c"
c_cap_id <- dbGetQuery(connection, c_cap)

```

