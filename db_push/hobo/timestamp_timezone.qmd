---
title: "timestamp_timezone"
format: html
---

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, dataPreparation, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr, ggplot2, plotly)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to DB
dbcon <- hopToDB("wibbitr")

```

# pointers

```{r}
db_test = tbl(dbcon, Id("survey_data", "timestamp_test"))

```

```{r}
dates = c("2021-01-01",
          "2022-02-02",
          "2023-03-03")

times = c("06:00:01")

tz_name = c("GMT0",
            "America/New_York",
            "America/Chicago",
            "America/Denver",
            "America/Los_Angeles",
            "Pacific/Honolulu",
            "America/Panama",
            "America/Sao_Paulo")

combos = expand.grid(dates, times, tz_name) %>%
  rename(date = Var1,
         time = Var2,
         tz = Var3) %>%
  mutate(datetime_local = ymd_hms(paste(date, time)))


tz_func = function(data, tz_name) {
  data_out = data %>%
    filter(tz == tz_name) %>%
    mutate(datetime_tz = force_tz(datetime_local, tzone = tz)) %>%
    select(datetime_local,
           tz,
           datetime_tz)
  
  dbWriteTable(dbcon, Id("survey_data", "timestamp_test"), data_out, append = TRUE)
  
  return(NULL)
}

for (tzi in tz_name) {
  tz_func(combos, tzi)
}

```

Retrieve values
```{r}
input = dbReadTable(dbcon, Id("survey_data", "timestamp_test"))

input_2 = tbl(dbcon, Id("survey_data", "timestamp_test")) %>%
  collect()

finally = input_2 %>%
  rename(tztz = tz) %>%
  mutate(local_time_tz = pmap(list(timestamptz, tztz), ~with_tz(..1, tzone = ..2)),
         local_time = pmap_vec(list(timestamptz, tztz), ~format(with_tz(..1, tzone = ..2)), "%Y-%m-%d %H:%M:%S"),
         local_time_lub = local_time(timestamptz, tztz))

finally$timestamptz
finally$local_time_tz
finally$local_time

```
