---
title: "sn_samples_2023"
format: html
---

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to RIBBiTR DB
dbcon <- hopToDB("wibbitr")

## Pull metadata from database
mdc = tbl(dbcon, Id("public", "all_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

## Point to local data directory
ddir = Sys.getenv("data_dir")  # data directory
# Keeping .csv files in a central directory. Naming convention uses download date to distinguish batches.
wddir = here(ddir, "sierra") # working data directory

```

# table pointers
```{r}
# pull relevant chain tables from RIBBiTR DB
db_sample = tbl(dbcon, Id("survey_data", "sample"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))
```

# raw files
```{r}
raw_sample_2023 = read_csv(here(wddir, "2025-04-10", "2023_SierraNevada_sampleData_Lindauer_231116_pits.csv"))
```

# clean
```{r}
clean_sample = raw_sample_2023 %>%
  clean_names() %>%
  rename(site = site_id,
         date = visit_date,
         body_temp_c = body_temperature,
         life_stage = capture_life_stage,
         sn_survey_id = survey_id,
         capture_utme = utme,
         capture_utmn = utmn,
         svl_mm = length,
         body_mass_g = weight,
         microhabitat_type = location,
         mucosome = mucosome_id,
         amp = amp_id,
         antibody = ig_id,
         bacterial = microbiome_id_culturing,
         microbiome = microbiome_id_genetic,
         genetic = toe_tip_id,
         bd = bd_swab_id,
         substrate_temp_c = substrate_temperature,
         microhabitat_detailed = substrate_type,
         time_of_capture = frog_temperature_time) %>%
  mutate(site = as.character(site),
         date = mdy(date),
         taxon_capture = case_match(species,
                                    "buca" ~ "anaxyrus_canorus",
                                    "hyre" ~ "pseudacris_regilla",
                                    "ramu" ~ "rana_muscosa"),
         sex = case_match(sex,
                          "f" ~ "female",
                          "m" ~ "male",
                          .default = NA_character_),
         local_cmr_id = as.character(pit_tag_ref)) %>%
  select(-capture_id,
         -visit_id) %>%
  arrange(bd,
          date,
          site)

```

# scrape
```{r}
distinct_visits = clean_sample %>%
  select(site,
         date) %>%
  distinct()

gelled_visit = distinct_visits %>%
  left_join(db_site %>% collect(), by = "site") %>%
  left_join(db_visit %>% collect(), by = c("site_id", "date"))

associated_captures = db_capture %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  filter(visit_id %in% gelled_visit$visit_id) %>%
  collect() %>%
  arrange(date,
          site,
          time_of_capture)

sub = associated_captures %>%
  filter(site == "72996",
         date == "2023-08-10")

ac_site_date = associated_captures %>%
  group_by(date,
           site) %>%
  count()

ac_sample = associated_captures %>%
  left_join(db_sample %>% collect(), by = "capture_id") %>%
  pivot_wider(names_from = "sample_type",
              values_from = "sample_name")

cs_site_date = clean_sample %>%
  group_by(date,
           site) %>%
  count()


cs_bd = clean_sample %>%
  filter(!is.na(bd))

ac_cs_sample = ac_sample %>%
  filter(bd %in% cs_bd$bd)

peace = setdiff(cs_bd$bd, ac_cs_sample$bd)
```

# join with capture id
```{r}
nrow(clean_sample)

common_cols = intersect(colnames(db_capture), colnames(clean_sample))

gelled_sample = clean_sample %>%
  inner_join(db_capture %>% collect(), by = common_cols)

peace = gelled_sample %>%
  select(all_of(common_cols))

```