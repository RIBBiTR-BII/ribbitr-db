---
title: "brazil_append"
format: html
editor: source
---
# Setup

## Load Packages

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, rio, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to DB
dbcon <- hopToDB("wibbitr")

## Pull metadata from database
mdc = tbl(dbcon, Id("public", "all_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

## Point to local data directory
ddir = Sys.getenv("data_dir")  # data directory
# Keeping .csv files in a central directory. Naming convention uses download date to distinguish batches.
wddir = here(ddir, "brazil") # working data directory

```

# 1 - Import data

## Pointers to relevant tables

```{r}
# pull relevant chain tables from DB
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))

```

## Load csv files

```{r}
# list.files(path = here(wddir))

in_focal = import_list(here(wddir, '2025-01-27', "RIBBiTR_Brazil_FocalSp_2024.xlsx"))
raw_focal_2022 = in_focal[["2022"]]
raw_focal_2023 = in_focal[["2023"]]
raw_focal_2024 = in_focal[["2024"]]

in_nonfocal = import_list(here(wddir, '2025-01-27', "RIBBiTR_Brazil_Non focal species_2024.xlsx"))
raw_nonfocal_2023 = in_nonfocal[["2023"]]
raw_nonfocal_2024 = in_nonfocal[["2024"]]

in_edna = import_list(here(wddir, '2025-01-27', "RIBBiTR_Brazil_eDNA_2024.xlsx"))
raw_edna_2022 = in_edna[["2022"]]
raw_edna_2023 = in_edna[["2023"]]
raw_edna_2024 = in_edna[["2024"]]

# # non RIBBiTR
raw_tissue = import_list(here(wddir, '2025-01-27', "Boraceia_species tissues_2024.xlsx"))[["Sheet1"]]
raw_loggers = read_csv(here(wddir, '2025-01-27', "RIBBiTR_Brazil_Dataloggers_2024_clean.csv"))

# legacy data
raw_ls_area <- read_csv(here(wddir, "legacy", "area_gps_landscapes_brazil_for_cob.csv"))
raw_sv_area <- read_csv(here(wddir, "legacy", "clean_sv_sites_latlon.csv"))

raw_ls <- read_csv(here(wddir, "legacy", "raw_data_landscapes_brazil_for_cob.csv"))
raw_sv <- read_csv(here(wddir, "legacy", "TS_Santa_Virginia_PCE_Legacy_Data_For_Cob_utm23s.csv"))


raw_cct = import_list(here(wddir, "legacy", "climate_ct.xlsx"))
raw_cct = raw_cct$Sheet1

local_tz = "America/Sao_Paulo"
```

# 2 - Clean data

## check for null columns & duplicated rows
- purely informational, all action taken in next step
```{r}
clean_focal = bind_rows(raw_focal_2022 %>%
                          clean_names() %>%
                          rename(date = date_ymd,
                                 snout_vent_length_mm = snout_vent_length,
                                 amp_id = amp_id_1,
                                 antibody_id = antibody_id_1,
                                 mic_swab_tube_id = dry_swab_tube_id),
                        raw_focal_2023 %>%
                          clean_names() %>%
                          rename(amp_id = amp_id_1,
                                 antibody_id = antibody_id_1) %>%
                          mutate(latitude = as.numeric(latitude),
                                 longitude = as.numeric(longitude),
                                 elevation_m = as.numeric(elevation_m),
                                 body_mass_g = as.numeric(body_mass_g),
                                 snout_vent_length_mm = as.numeric(snout_vent_length_mm)),
                        raw_focal_2024 %>%
                          clean_names() %>%
                          mutate(elevation_m = as.numeric(elevation_m),
                                 date = ymd(date))) %>%
  rename(species = species_capture,
         time = capture_time,
         genetic_id = toe_clip_tube_id) %>%
  mutate(time = as.hms(as.numeric(time)*24*60*60),
         date = ymd(date),
         tissue = ifelse(genetic_id != "NA", "toe", NA_character_),
         is_duplicate = FALSE,
         uuid_name_capture = paste0(date, transect_id, time, species, snout_vent_length_mm, body_mass_g, bd_swab_tube_id),
         capture_id = UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_capture),
         project_id = "ribbitr")

clean_nonfocal = bind_rows(raw_nonfocal_2023 %>%
                             clean_names() %>%
                             mutate(time = as.hms(as.numeric(time)*24*60*60),
                                    swab_id = correct_swab_id),
                           raw_nonfocal_2024 %>%
                             clean_names() %>%
                             mutate(time = as_hms(time),
                                    latitude = as.numeric(latitude))) %>%
  rename(date = date_ymd,
         bd_swab_tube_id = swab_id) %>%
  mutate(date = ymd(date),
         is_duplicate = FALSE,
         uuid_name_capture = paste0(date, transect_id, time, species, bd_swab_tube_id),
         capture_id = UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_capture),
         project_id = "ribbitr") %>%
  select(-correct_swab_id)

clean_tissue = raw_tissue %>%
  clean_names() %>%
  rename(date = capture_date,
         elevation_m = elev_m,
         mic_swab_tube_id = bacterial_swab_tube_id,
         bacterial_swab_tube_id = glycerol_swab_tube_id,
         genetic_id = sample_id,
         time = capture_time) %>%
  mutate(date = as.Date(date),
         latitude = as.numeric(latitude),
         longitude = as.numeric(longitude),
         time = as.hms(as.numeric(time)*24*60*60),
         uuid_name_capture = paste0(date, transect_id, time, species, snout_vent_length_mm, body_mass_g),
         capture_id = UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_capture),
         project_id = "ribbitr") %>%
  group_by(region,
           transect_id,
           date,
           species) %>%
  mutate(bd_swab_tube_id = ifelse(bd_swab_tube_id == "NA", NA_character_, bd_swab_tube_id),
         bacterial_swab_tube_id = ifelse(bacterial_swab_tube_id == "NA", NA_character_, bacterial_swab_tube_id),
         mic_swab_tube_id = ifelse(mic_swab_tube_id == "NA", NA_character_, mic_swab_tube_id)) %>%
  ungroup() %>%
  mutate(is_duplicate = is.na(bd_swab_tube_id))

clean_ls = raw_ls %>%
  clean_names() %>%
  unite(notes, notes, notes_2, remove = TRUE, na.rm = TRUE) %>%
  mutate(date = ifelse(date == "27/09/2018", "9/27/2018", date),
         date = mdy(date),
         sample_id = as.character(sample_id),
         project_id = "landscapes",
         bd_swab_tube_id = paste0("brls_", str_pad(sample_id, 3, pad = "0")),
         survey_time = "night",
         life_stage = case_when(
           grepl('jovem', notes) | grepl("juvenil", notes) ~ "juvenile",
           TRUE ~ "adult"),
         site_prefix = case_match(landscape_id,
                                  "1-Intervales" ~ "intervales",
                                  "2-Pilar" ~ "pilar",
                                  "3-StaVirginia" ~ "sta_virgínia",
                                  "4-Japi" ~ "japi",
                                  "5-Cotia" ~ "cotia",
                                  "6-RB" ~ "rb",
                                  "7-Bananal" ~ "bananal",
                                  "8-SLP" ~ "slp"),
         site = paste0(site_prefix, "_", tolower(forest_fragment_id)),
         frog_substrate = case_match(microclimate_of_capture_location,
                                        "Lago" ~ "lake",
                                        "Fragmento" ~ "forest",
                                        "Bordo" ~ "forest_edge",
                                        .default = NA_character_),
         uuid_name_capture = paste0(project_id, date, sample_id),
         capture_id = UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_capture),
         is_duplicate = FALSE)

clean_sv = raw_sv %>%
  clean_names() %>%
  rename(time = capture_time,
         survey_time = day_night,
         capture_utme = easting,
         capture_utmn = northing) %>%
  mutate(date = mdy(date),
         site = gsub(" ", "_", tolower(transect_id)),
         site = case_match(site,
                           "extra_poça_temporária" ~ "poca_temporaria",
                           "extra_trilha_olho_dagua" ~ "olho_de_agua",
                           .default = site),
         transect = tolower(transect_type),
         capture_utm_zone = 23,
         project_id = "pce_santa_virginia",
         id = as.character(id),
         bd_swab_tube_id = paste0("pce_", id),
         sex = case_match(sex,
                          'M' ~ "male",
                          c("F","FO") ~ "female",
                          c("U", "J") ~ NA),
         life_stage = case_match(sex,
                                 "J" ~ "juvenile",
                                 .default = "adult"),
         capture_animal_state = case_match(dead,
                                           "Y" ~ "dead",
                                           NA ~ NA,
                                           .default = "alive"),
         uuid_name_capture = paste0(project_id, date, id),
         capture_id = UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_capture),
         is_duplicate = FALSE)

compare_captures = compare_df_cols(
  clean_focal,
  clean_nonfocal,
  clean_tissue,
  clean_ls,
  clean_sv)

clean_capture = bind_rows(clean_focal,
                          clean_nonfocal,
                          clean_tissue,
                          clean_ls,
                          clean_sv) %>%
  rename(observer_capture = observer,
         taxon_capture = species,
         time_of_capture = time,
         capture_latitude = latitude,
         capture_longitude = longitude,
         svl_mm = snout_vent_length_mm,
         body_temp_c = frog_temperature_c,
         substrate_temp_c = substrate_temperature_c,
         microhabitat_type = frog_substrate,
         comments_capture = capture_comments,
         time_of_day = survey_time) %>%
  unite("comments_capture", c("comments_capture", "notes"), sep = "; ", na.rm = TRUE) %>%
  mutate(transect_type = tolower(transect_type),
         transect_type = ifelse(transect_type == "na", NA_character_, transect_type),
         time_of_day = tolower(time_of_day),
         time_of_day = ifelse(time_of_day == "na", NA_character_, time_of_day),
         life_stage = tolower(life_stage),
         life_stage = ifelse(life_stage == "na", NA_character_, life_stage),
         detection_type = "capture",
         microhabitat_type = tolower(microhabitat_type),
         tissue = tolower(tissue),
         sex = tolower(sex),
         sex = ifelse(sex == "na", NA_character_, sex),
         sex = ifelse(grepl("male", comments_capture, ignore.case = TRUE) &
                           !grepl("female", comments_capture, ignore.case = TRUE), "male", sex),
         sex = ifelse(grepl("female", comments_capture, ignore.case = TRUE), "female", sex),
         taxon_capture = tolower(gsub(" ", "_", taxon_capture)),
         taxon_capture = gsub("_sp.", "", taxon_capture),
         site = coalesce(site, new_transect_id, transect_id),
         site = tolower(site),
         site = ifelse(site == "na", NA_character_, site),
         site = gsub(" ", "_", site), 
         site = case_match(site,
                           "t3_(swamp)" ~ "t3",
                           "p3" ~ "s3",
                           "lago_da_anta" ~ "lago_anta",
                           "olho-de-agua" ~ "olho_de_agua",
                           "lago_1_(brutal)" ~ "lago_1",
                           "lago_2_(urutau)" ~ "lago_2",
                           "lago_2_urutau" ~ "lago_2",
                           "lago_1_(pedreira)" ~ "lago_3",
                           "lago_3_(pedreira)" ~ "lago_3",
                           .default = site),
         region = tolower(region),
         region = case_match(region,
                             "boracéia" ~ "boraceia",
                             "santa virginia" ~ "santa_virginia",
                             "santa virgínia" ~ "santa_virginia"),
         region = case_when(grepl("s\\d+", site) ~ "santa_virginia",
                            grepl("t\\d+", site) ~ "boraceia",
                            site == "lago_3" ~ "boraceia",
                            site == "alojamento" ~ "santa_virginia",
                            site == "estrada" ~ "santa_virginia",
                            site == "pirapitinga" ~ "santa_virginia",
                            site == "olho_de_agua" ~ "santa_virginia",
                            TRUE ~ region),
         capture_latitude = ifelse(capture_longitude > -30, NA, capture_latitude),
         capture_longitude = ifelse(capture_longitude > -30, NA, capture_longitude),
         capture_latitude = ifelse(capture_latitude == -23.35632 & capture_longitude == -45.88978, -23.65632, capture_latitude),
         transect = transect_type,
         observer_capture = gsub("_", ",", observer_capture),
         observer_capture = ifelse(observer_capture == "NA", NA_character_, observer_capture),
         body_temp_c = round(as.numeric(body_temp_c), digits = 1),
         substrate_temp_c = round(as.numeric(substrate_temp_c), digits = 1),
         wind_speed_m_s = as.numeric(wind_speed_mph) * 0.44704,
         relative_humidity_percent = as.numeric(rel_humidity),
         air_temp_c = round(as.numeric(air_temp_c), digits = 1),
         p_h = round(as.numeric(water_ph), digits = 1),
         water_temp_c = round(as.numeric(water_temperature_c), digits = 1)) %>%
  ribbitr_clean_taxa(taxon_capture, comments_capture)

compare_edna_raw = compare_df_cols(
  raw_edna_2022,
  raw_edna_2023,
  raw_edna_2024)

clean_edna = bind_rows(raw_edna_2022 %>%
                         clean_names() %>%
                         rename(country = location) %>%
                         mutate(collect_time = as_hms(as.numeric(collect_time)*24*60*60)),
                       raw_edna_2023 %>%
                         clean_names() %>%
                         rename(wind_speed_m_s = wind_speed_ms,
                                air_pressure_in_hg = pressure) %>%
                         mutate(collect_time = as_hms(as.numeric(collect_time)*24*60*60)),
                       raw_edna_2024 %>%
                         clean_names() %>%
                         rename(air_pressure_in_hg = bar) %>%
                         mutate(collect_time = as_hms(collect_time),
                                control = as.logical(control),
                                edna_volume_ml = as.numeric(edna_volume_ml))) %>%
  rename(edna_latitude = latitude,
         edna_longitude = longitude,
         collection_type = active_passive,
         date = date_ymd,
         edna_sample_name = edna_sample_id,
         edna_transect_m = location_m,
         edna_elevation_m = elevation_m,
         collection_time = collect_time) %>%
  unite("comments_edna", c("comments_based_renatos_spreadsheet", "notes"), sep = "; ", na.rm = TRUE) %>%
  mutate(detection_type = "edna",
         new_transect_id = ifelse(new_transect_id == "NA", NA_character_, new_transect_id),
         transect_id = ifelse(transect_id == "NA", NA_character_, transect_id),
         edna_latitude = round(as.numeric(ifelse(edna_latitude == "NA", NA, edna_latitude)), digits = 6),
         edna_longitude = round(as.numeric(ifelse(edna_longitude == "NA", NA, edna_longitude)), digits = 6),
         edna_elevation_m = as.numeric(edna_elevation_m),
         date = as.Date(date),
         filter_date = date,
         filter_start_time = as_hms(filter_start_time),
         filter_end_time = as_hms(filter_end_time),
         air_temp_c = round(as.numeric(air_temp_c), digits = 1),
         water_temp_c = round(as.numeric(water_temp_c), digits = 1),
         wind_speed_m_s = as.numeric(wind_speed_m_s),
         relative_humidity_percent = as.numeric(humidity),
         p_h = round(as.numeric(p_h), digits = 1),
         air_pressure_mbar = as.numeric(air_pressure_in_hg) * 33.8639,
         edna_elevation_m = as.numeric(edna_elevation_m),
         site = tolower(coalesce(new_transect_id, transect_id)),
         time_of_day = case_when(collection_time >= as_hms("08:00:00") & collection_time < as_hms("20:00:00") ~ "day",
                                 collection_time < as_hms("08:00:00") | collection_time >= as_hms("20:00:00") ~ "night",
                                 .default = NA_character_),
         project_id = "ribbitr")
```

## unify visit
```{r}
unified_visit = bind_rows(clean_edna,
                          clean_capture) %>%
  filter(!is.na(date),
         !is.na(site)) %>%
  select(date,
         time_of_day,
         campaign,
         site,
         project_id) %>%
  distinct()
```

## gel visit
```{r}
gelled_visit = unified_visit %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  mutate(uuid_name = paste0(site, date, time_of_day),
         visit_id = ifelse(is.na(visit_id), UUIDfromName("2f5bf5f7-d325-4b93-9c46-821f5b5178e8", uuid_name), visit_id),
         visit_lab = "becker_lab")
```

## Generate stats for log
```{r}
dblog = list()
dblog$date_min = min(gelled_visit$date)
dblog$date_max = max(gelled_visit$date)
dblog$site = gelled_visit$site %>% unique()
dblog$site_id = gelled_visit$site_id %>% unique()
dblog$region = db_site %>%
  left_join(db_region, by = "region_id") %>%
  filter(site %in% dblog$site) %>%
  pull(region) %>%
  unique()

```

## subset visit
```{r}
subset_visit = gelled_visit %>%
  select(any_of(colnames(db_visit))) %>%
  distinct() %>%
  drop_na(visit_id)

compare_visit = compare_df_cols(db_visit %>%
                                  filter(FALSE) %>%
                                  collect(), subset_visit)

tray = compare_for_staging(db_visit %>%
                             filter(site_id %in% dblog$site_id) %>%
                             collect(),
                           subset_visit, c("date", "site_id", "time_of_day"), return_all = TRUE, report = "visit")


upsert_visit = bind_rows(tray$insert,
                         tray$update)

# # # get visit_id
# vids = subset_visit %>%
#   select(visit_id) %>%
#   distinct() %>%
#   pull(visit_id)
# 
# dput(vids)

# upsert visit?
x_visit = (nrow(upsert_visit) > 0)

```

## upsert visits

```{r}
if (x_visit) {
  temp_visit = stage_to_temp(dbcon, db_visit, upsert_visit)
  pointer = tbl(dbcon, temp_visit)
  db_visit = rows_upsert(db_visit, pointer, by="visit_id", in_place=TRUE)
}

db_visit = tbl(dbcon, Id("survey_data", "visit"))

```

# environmental
```{r}
unified_env = bind_rows(clean_edna %>%
                          rename(obs_time = collection_time),
                        clean_capture %>%
                          rename(obs_time = time_of_capture,
                                 observers_survey = observer_capture)) %>%
  select(date,
         site,
         time_of_day,
         transect,
         obs_time,
         observers_survey,
         any_of(colnames(db_env))) %>%
  distinct() %>%
  mutate(detection_type = "environmental") %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc))
```

```{r}
gelled_env = unified_env %>%
  group_by(site,
           date,
           time_of_day,
           transect) %>%
  mutate(start_time = find_time_range(obs_time)$first_time,
         end_time = find_time_range(obs_time)$last_time) %>%
  ungroup() %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  group_by(site,
           date,
           time_of_day,
           detection_type,
           transect,
           start_time) %>%
  mutate(start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc), # assume duration = end_time - start_time
         uuid_name = paste0(visit_id, transect, start_time, detection_type),
         survey_id = ifelse(is.na(survey_id), UUIDfromName("c02ab86e-9e5a-4ac2-a1a6-bfa6c32ab614", uuid_name), survey_id),
         observers_survey = str_flatten_comma(unique(na.omit(unlist(str_split(observers_survey, ",\\s*")))), na.rm = TRUE),
         number_observers = count_observers(paste(observers_survey, collapse = ","))) %>%
  ungroup() %>%
  group_by(visit_id,
           transect,
           start_time,
           detection_type,
           survey_id,
           wind_speed_m_s,
           air_temp_c,
           water_temp_c,
           air_pressure_mbar,
           p_h,
           relative_humidity_percent) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  mutate(uuid_name_env = paste0(survey_id, start_time, wind_speed_m_s, air_temp_c, water_temp_c, p_h, relative_humidity_percent),
         environmental_id = UUIDfromName("f2fdbf80-0197-4821-b125-d589424e19c8", uuid_name_env),
         water_time = as_hms(ifelse(!is.na(water_temp_c) | !is.na(p_h), start_time, NA)),
         air_time = as_hms(ifelse(!is.na(wind_speed_m_s) | !is.na(air_temp_c) | !is.na(relative_humidity_percent), start_time, NA))) %>%
  filter(!(is.na(water_temp_c) & is.na(p_h) & is.na(wind_speed_m_s) & is.na(air_temp_c) & is.na(relative_humidity_percent)))

```

### 5 - Subset env tables

```{r}

# survey
subset_env_survey = gelled_env %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_env_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_env_survey)

peace = get_dupes(subset_env_survey, "transect", "detection_type", "visit_id", "start_time")

tray = compare_for_staging(db_survey %>% collect(), subset_env_survey, "survey_id", return_all = TRUE, report = "env_survey")
peace = compare_updates(tray)
upsert_env_survey = bind_rows(tray$insert,
                             tray$update)
# env
subset_env = gelled_env%>%
  select(any_of(colnames(db_env))) %>%
  distinct() %>%
  drop_na(environmental_id)

# compare columns
compare_env = compare_df_cols(db_env %>%
                                  filter(FALSE) %>%
                                  collect(), subset_env)

tray = compare_for_staging(db_env %>% collect(), subset_env, "environmental_id", return_all = TRUE, report = "env")
upsert_env = bind_rows(tray$insert,
                        tray$update)

peace = compare_updates(tray)

# anything to upsert?
x_env = (nrow(upsert_env_survey) > 0) | (nrow(upsert_env) > 0)

```

### Stage and commit env tables

```{r}

if (x_env) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_env_survey = stage_to_temp(dbcon, db_survey, upsert_env_survey)
      pointer = tbl(dbcon, temp_env_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_env = stage_to_temp(dbcon, db_env, upsert_env)
      pointer = tbl(dbcon, temp_env)
      rows_upsert(db_env, pointer, by="environmental_id", in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
```

# eDNA
```{r}
unified_edna = clean_edna %>%
  mutate(transect = NA) %>%
  group_by(site,
           date,
           time_of_day,
           transect) %>%
  mutate(start_time = find_time_range(collection_time)$first_time,
         end_time = find_time_range(collection_time)$last_time) %>%
  ungroup() %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = c("transect",
                   "visit_id",
                   "start_time",
                   "detection_type")) %>%
  filter(!is.na(site),
         !is.na(date))

if (nrow(unified_edna %>% filter(is.na(site_id))) > 0) {
  stop("Unknown sites returned, consider importing first.")
}

```

```{r}
gelled_edna = unified_edna %>%
  mutate(filter_date = date) %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         uuid_name = paste0(visit_id, start_time, transect, detection_type),
         survey_id = ifelse(is.na(survey_id),
                            UUIDfromName("c02ab86e-9e5a-4ac2-a1a6-bfa6c32ab614", uuid_name),
                            survey_id)) %>%
  ungroup() %>%
  mutate(uuid_name = paste0(survey_id, edna_sample_name, edna_latitude, collection_time, collection_type, filter_start_time),
         edna_id = UUIDfromName("e4d345d4-6433-40d2-9997-1b4ee8b1a627", uuid_name))
```


# subset edna
```{r}
# survey
subset_edna_survey = gelled_edna %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  filter(!is.na(survey_id))

# compare columns
compare_edna_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_edna_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_edna_survey, "survey_id", return_all = TRUE, report = "edna_survey")
upsert_edna_survey = bind_rows(tray$insert,
                               tray$update)
# edna
subset_edna = gelled_edna %>%
  select(any_of(colnames(db_edna))) %>%
  distinct() %>%
  filter(!is.na(edna_id))

# compare columns
compare_edna = compare_df_cols(db_edna %>%
                                  filter(FALSE) %>%
                                  collect(), subset_edna)

peace = get_dupes(subset_edna, edna_id)

tray = compare_for_staging(db_edna %>% collect(), subset_edna, "edna_id", return_all = TRUE, report = "edna")
upsert_edna = bind_rows(tray$insert,
                        tray$update)

# anything to upsert?
x_edna = (nrow(upsert_edna_survey) > 0) | (nrow(upsert_edna) > 0)

```

# stage and commit edna
```{r}

if (x_edna) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_edna_survey = stage_to_temp(dbcon, db_survey, upsert_edna_survey)
      pointer = tbl(dbcon, temp_edna_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_edna = stage_to_temp(dbcon, db_edna, upsert_edna)
      pointer = tbl(dbcon, temp_edna)
      rows_upsert(db_edna, pointer, by="edna_id", in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      stop("Transaction failed: ", e$message)
    })
}

# refresh
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
```

# Capture
```{r}
unified_capture = clean_capture %>%
  # inherit/assign site_id
  left_join(db_site %>%
              select(site,
                     site_id) %>%
              collect(), by = "site") %>%
  # inherit/assign visit_id
  left_join(db_visit %>%
              select(visit_id,
                     date,
                     time_of_day,
                     site_id) %>%
              collect(), by = c("date", "time_of_day", "site_id")) %>%
  group_by_at(c("date", "time_of_day", "site_id")) %>%
  ungroup() %>%
  # inherit/assign survey_id
  left_join(db_survey %>%
              select(survey_id,
                     visit_id,
                     transect,
                     detection_type) %>%
              collect(), by = c("visit_id", "transect", "detection_type"))

```

```{r}

gelled_capture = unified_capture %>%
group_by(visit_id,
         transect,
         detection_type) %>%
  mutate(start_time = find_time_range(time_of_capture)$first_time,
         end_time = find_time_range(time_of_capture)$last_time,
         start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc),  # assume duration = end_time - start_time
         uuid_name_survey = paste0(visit_id, transect, start_time, detection_type),
         survey_id = ifelse(is.na(survey_id), UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_survey), survey_id),
         observers_survey = paste(unique(unlist(strsplit(observer_capture, ", "))), collapse = ", "),
         number_observers = lengths(strsplit(observers_survey, ",")),
         observers_survey = ifelse(observers_survey == "NA", NA_character_, observers_survey),
         number_observers = ifelse(is.na(observers_survey), NA, number_observers)) %>%
  ungroup() %>%
  timestamp_of_capture_utc(tz = local_tz) %>%
  filter(!is.na(site))

peace = get_dupes(gelled_capture, capture_id)

```

# samples
```{r}
# sample_subtype = gelled_capture %>%
#   select(capture_id,
#          genetic_id,
#          tissue) %>%
#   rename(sample_subtype = tissue,
#          sample_name = genetic_id) %>%
#   mutate(sample_type = "genetic")

gelled_sample = gelled_capture %>%
  select(capture_id,
         bd_swab_tube_id,
         mic_swab_tube_id,
         bacterial_swab_tube_id,
         mucosome_id,
         amp_id,
         antibody_id,
         genetic_id) %>%
  rename(amp = amp_id,
         antibody = antibody_id,
         bacterial = bacterial_swab_tube_id,
         bd = bd_swab_tube_id,
         genetic = genetic_id,
         microbiome = mic_swab_tube_id,
         mucosome = mucosome_id) %>%
  pivot_longer(c("amp",
                 "antibody",
                 "bacterial",
                 "bd",
                 "genetic",
                 "microbiome",
                 "mucosome"),
               names_to = "sample_type",
               values_to = "sample_name") %>%
  filter(!is.na(sample_name),
         sample_name != "NA") %>%
  left_join(db_sample %>%
              select(sample_id, sample_name, sample_type) %>%
              collect(), by = c("sample_name", "sample_type")) %>%
  mutate(uuid_name = paste0(sample_name, sample_type),
         sample_id = ifelse(is.na(sample_id), UUIDfromName("1208e62f-d3a1-462c-984f-0bf1f43f5837", uuid_name), sample_id))


```



# subset & compare
```{r}

subset_capture_survey = gelled_capture %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

compare_capture_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture_survey)
tray = compare_for_staging(db_survey %>% collect(), subset_capture_survey, "survey_id", report = "survey_capture")
peace = compare_updates(tray)
upsert_capture_survey = bind_rows(tray$insert,
                                  tray$update)

subset_capture = gelled_capture %>%
  filter(!is_duplicate) %>%
  select(any_of(colnames(db_capture))) %>%
  drop_na(survey_id)

compare_capture = compare_df_cols(db_capture %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture)

tray = compare_for_staging(db_capture %>% collect(), subset_capture, "capture_id", report = "capture")
upsert_capture = bind_rows(tray$insert,
                           tray$update)

subset_taxa = gelled_capture %>%
  select(taxon_capture) %>%
  distinct() %>%
  left_join(db_taxa %>% collect(), by = c("taxon_capture" = "taxon_id")) %>%
  rename(taxon_id = taxon_capture) %>%
  drop_na(taxon_id)

tray = compare_for_staging(db_taxa %>% collect(), subset_taxa, "taxon_id", report = "taxa")
insert_capture_taxa = tray$insert

subset_sample = gelled_sample %>%
  select(any_of(colnames(db_sample))) %>%
  distinct()

compare_sample = compare_df_cols(db_sample %>%
                                  filter(FALSE) %>%
                                  collect(), subset_sample)

tray = compare_for_staging(db_sample %>% collect(), subset_sample, "sample_id", report = "sample")
upsert_sample = bind_rows(tray$insert,
                          tray$update)

# constrained_sample = upsert_sample %>%
#   resolve_sample_conflicts(db_sample)

if (nrow(tray$update) > 0) {
  warning("Sample updates may indicate duplicate capture_ids. Investigation recommended.")
}


x_capture = (nrow(upsert_capture_survey) > 0) | (nrow(insert_capture_taxa) > 0) | (nrow(upsert_capture) > 0 | nrow(upsert_sample) > 0)
```


# commit changes
```{r}
# update all landscape
dbBegin(dbcon)

tryCatch(
  {
    temp_taxa = stage_to_temp(dbcon, db_taxa, insert_capture_taxa)
    pointer = tbl(dbcon, temp_taxa)
    rows_insert(db_taxa, pointer, by="taxon_id", in_place=TRUE, conflict = "ignore")
    
    temp_capture_survey = stage_to_temp(dbcon, db_survey, upsert_capture_survey)
    pointer = tbl(dbcon, temp_capture_survey)
    rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
    
    temp_capture = stage_to_temp(dbcon, db_capture, upsert_capture)
    pointer = tbl(dbcon, temp_capture)
    rows_upsert(db_capture, pointer, by="capture_id", in_place=TRUE)
    
    temp_sample = stage_to_temp(dbcon, db_sample, upsert_sample)
    pointer = tbl(dbcon, temp_sample)
    rows_upsert(db_sample, pointer, by="sample_id", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```



```{r}
dbDisconnect(dbcon)
```