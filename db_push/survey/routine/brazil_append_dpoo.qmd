---
title: "brazil_append"
format: html
editor: source
---
# Setup

## Load Packages

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, rio, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to DB
dbcon <- hopToDB("wibbitr")

## Pull metadata from database
mdc = tbl(dbcon, Id("public", "all_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

## Point to local data directory
ddir = Sys.getenv("data_dir")  # data directory
# Keeping .csv files in a central directory. Naming convention uses download date to distinguish batches.
wddir = here(ddir, "brazil", '2025-01-27') # working data directory

```

# 1 - Import data

## Pointers to relevant tables

```{r}
# pull relevant chain tables from DB
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))

```

# existing brazil data dates
```{r}
data_br = db_visit %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(country == "brazil") %>%
  select(date,
         site,
         visit_id,
         project) %>%
  collect() %>%
  arrange(date,
          site)

visit_of_interest = data_br %>%
  filter(date > "2023-02-01") %>%
  pull(visit_id)

data_of_interest = db_sample %>%
  inner_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  filter(visit_id %in% visit_of_interest) %>%
    select(sample_name,
         sample_type,
         capture_id,
         life_stage,
         sex,
         comments_capture,
         taxon_capture,
         transect,
         time_of_day,
         date,
         site) %>%
    collect() %>%
  pivot_wider(names_from = "sample_type",
              values_from = "sample_name") %>%
  select(capture_id,
         taxon_capture,
         life_stage,
         sex,
         bd,
         genetic,
         comments_capture,
         transect,
         time_of_day,
         date,
         site) %>%
  rename(species = taxon_capture,
         bd_swab_id = bd,
         genetic_id = genetic) %>%
  arrange(bd_swab_id)

# write.csv(data_of_interest, here("staging", "br_2023_02_conflicting_data.csv"))
  
```

## Load csv files

```{r}
# list.files(path = here(wddir))

in_focal = import_list(here(wddir, "RIBBiTR_Brazil_FocalSp_2024.xlsx"))
raw_focal_2022 = in_focal[["2022"]]
raw_focal_2023 = in_focal[["2023"]]
raw_focal_2024 = in_focal[["2024"]]

in_nonfocal = import_list(here(wddir, "RIBBiTR_Brazil_Non focal species_2024.xlsx"))
raw_nonfocal_2023 = in_nonfocal[["2023"]]
raw_nonfocal_2024 = in_nonfocal[["2024"]]

in_edna = import_list(here(wddir, "RIBBiTR_Brazil_eDNA_2024.xlsx"))
raw_edna_2022 = in_edna[["2022"]]
raw_edna_2023 = in_edna[["2023"]]
raw_edna_2024 = in_edna[["2024"]]

# # non RIBBiTR
raw_tissue = import_list(here(wddir, "Boraceia_species tissues_2024.xlsx"))[["Sheet1"]]
raw_loggers = read_csv(here(wddir, "RIBBiTR_Brazil_Dataloggers_2024_clean.csv"))

```
# 2 - Clean data

## check for null columns & duplicated rows
- purely informational, all action taken in next step
```{r}
clean_focal = bind_rows(raw_focal_2022 %>%
                          clean_names() %>%
                          rename(date = date_ymd,
                                 snout_vent_length_mm = snout_vent_length,
                                 amp_id = amp_id_1,
                                 antibody_id = antibody_id_1,
                                 mic_swab_tube_id = dry_swab_tube_id),
                        raw_focal_2023 %>%
                          clean_names() %>%
                          rename(amp_id = amp_id_1,
                                 antibody_id = antibody_id_1) %>%
                          mutate(latitude = as.numeric(latitude),
                                 longitude = as.numeric(longitude),
                                 elevation_m = as.numeric(elevation_m),
                                 body_mass_g = as.numeric(body_mass_g),
                                 snout_vent_length_mm = as.numeric(snout_vent_length_mm)),
                        raw_focal_2024 %>%
                          clean_names() %>%
                          mutate(elevation_m = as.numeric(elevation_m),
                                 date = ymd(date))) %>%
  rename(species = species_capture,
         time = capture_time,
         genetic_id = toe_clip_tube_id) %>%
  mutate(time = as.hms(as.numeric(time)*24*60*60),
         date = ymd(date),
         tissue = ifelse(genetic_id != "NA", "toe", NA_character_),
         is_duplicate = FALSE,
         uuid_name_capture = paste0(date, transect_id, time, species, snout_vent_length_mm, body_mass_g, bd_swab_tube_id),
         capture_id = UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_capture))

clean_nonfocal = bind_rows(raw_nonfocal_2023 %>%
                             clean_names() %>%
                             mutate(time = as.hms(as.numeric(time)*24*60*60),
                                    swab_id = correct_swab_id),
                           raw_nonfocal_2024 %>%
                             clean_names() %>%
                             mutate(time = as_hms(time),
                                    latitude = as.numeric(latitude))) %>%
  rename(date = date_ymd,
         bd_swab_tube_id = swab_id) %>%
  mutate(date = ymd(date),
         is_duplicate = FALSE,
         uuid_name_capture = paste0(date, transect_id, time, species, bd_swab_tube_id),
         capture_id = UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_capture)) %>%
  select(-correct_swab_id)

clean_tissue = raw_tissue %>%
  clean_names() %>%
  rename(date = capture_date,
         elevation_m = elev_m,
         mic_swab_tube_id = bacterial_swab_tube_id,
         bacterial_swab_tube_id = glycerol_swab_tube_id,
         genetic_id = sample_id,
         time = capture_time) %>%
  mutate(date = as.Date(date),
         latitude = as.numeric(latitude),
         longitude = as.numeric(longitude),
         time = as.hms(as.numeric(time)*24*60*60),
         uuid_name_capture = paste0(date, transect_id, time, species, snout_vent_length_mm, body_mass_g),
         capture_id = UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_capture)) %>%
  group_by(region,
           transect_id,
           date,
           species) %>%
  mutate(bd_swab_tube_id = ifelse(bd_swab_tube_id == "NA", NA_character_, bd_swab_tube_id),
         bacterial_swab_tube_id = ifelse(bacterial_swab_tube_id == "NA", NA_character_, bacterial_swab_tube_id),
         mic_swab_tube_id = ifelse(mic_swab_tube_id == "NA", NA_character_, mic_swab_tube_id)) %>%
  ungroup() %>%
  mutate(is_duplicate = is.na(bd_swab_tube_id))



clean_capture = bind_rows(clean_focal,
                       clean_nonfocal,
                       clean_tissue) %>%
  rename(observer_capture = observer,
         taxon_capture = species,
         time_of_capture = time,
         capture_latitude = latitude,
         capture_longitude = longitude,
         svl_mm = snout_vent_length_mm,
         body_temp_c = frog_temperature_c,
         substrate_temp_c = substrate_temperature_c,
         microhabitat_type = frog_substrate,
         comments_capture = capture_comments) %>%
  unite("comments_capture", c("comments_capture", "notes"), sep = "; ", na.rm = TRUE) %>%
  mutate(transect_type = tolower(transect_type),
         transect_type = ifelse(transect_type == "na", NA_character_, transect_type),
         survey_time = tolower(survey_time),
         survey_time = ifelse(survey_time == "na", NA_character_, survey_time),
         life_stage = tolower(life_stage),
         life_stage = ifelse(life_stage == "na", NA_character_, life_stage),
         detection_type = "capture",
         microhabitat_type = tolower(microhabitat_type),
         tissue = tolower(tissue),
         sex = tolower(sex),
         sex = ifelse(sex == "na", NA_character_, sex),
         sex = ifelse(grepl("male", comments_capture, ignore.case = TRUE) &
                           !grepl("female", comments_capture, ignore.case = TRUE), "male", sex),
         sex = ifelse(grepl("female", comments_capture, ignore.case = TRUE), "female", sex),
         taxon_capture = tolower(gsub(" ", "_", taxon_capture)),
         taxon_capture = gsub("_sp.", "", taxon_capture),
         site = coalesce(new_transect_id, transect_id),
         site = tolower(site),
         site = ifelse(site == "na", NA_character_, site),
         site = gsub(" ", "_", site), 
         site = case_match(site,
                           "t3_(swamp)" ~ "t3",
                           "p3" ~ "s3",
                           "lago_da_anta" ~ "lago_anta",
                           "olho-de-agua" ~ "olho_de_agua",
                           "lago_1_(brutal)" ~ "lago_1",
                           "lago_2_(urutau)" ~ "lago_2",
                           "lago_2_urutau" ~ "lago_2",
                           "lago_1_(pedreira)" ~ "lago_3",
                           "lago_3_(pedreira)" ~ "lago_3",
                           .default = site),
         region = tolower(region),
         region = case_match(region,
                             "borac√©ia" ~ "boraceia",
                             "santa virginia" ~ "santa_virginia",
                             "santa virg√≠nia" ~ "santa_virginia"),
         region = case_when(grepl("s\\d+", site) ~ "santa_virginia",
                            grepl("t\\d+", site) ~ "boraceia",
                            site == "lago_3" ~ "boraceia",
                            site == "alojamento" ~ "santa_virginia",
                            site == "estrada" ~ "santa_virginia",
                            site == "pirapitinga" ~ "santa_virginia",
                            site == "olho_de_agua" ~ "santa_virginia",
                            TRUE ~ region),
         capture_latitude = ifelse(capture_longitude > -30, NA, capture_latitude),
         capture_longitude = ifelse(capture_longitude > -30, NA, capture_longitude),
         capture_latitude = ifelse(capture_latitude == -23.35632 & capture_longitude == -45.88978, -23.65632, capture_latitude),
         project = "ribbitr",
         visit_lab = "becker_lab",
         time_of_day = survey_time,
         transect = transect_type,
         observer_capture = gsub("_", ",", observer_capture),
         observer_capture = ifelse(observer_capture == "NA", NA_character_, observer_capture),
         body_temp_c = round(as.numeric(body_temp_c), digits = 1),
         substrate_temp_c = round(as.numeric(substrate_temp_c), digits = 1),
         wind_speed_m_s = as.numeric(wind_speed_mph) * 0.44704,
         relative_humidity_percent = as.numeric(rel_humidity),
         air_temp_c = round(as.numeric(air_temp_c), digits = 1),
         p_h = round(as.numeric(water_ph), digits = 1),
         water_temp_c = round(as.numeric(water_temperature_c), digits = 1)) %>%
  ribbitr_clean_taxa(taxon_capture, comments_capture)

peace = compare_df_cols(
  raw_edna_2022,
  raw_edna_2023,
  raw_edna_2024)

clean_edna = bind_rows(raw_edna_2022 %>%
                         clean_names() %>%
                         mutate(collect_time = as.hms(as.numeric(collect_time)*24*60*60)),
                       raw_edna_2023 %>%
                         clean_names() %>%
                         mutate(collect_time = as.hms(as.numeric(collect_time)*24*60*60)),
                       raw_edna_2024 %>%
                         clean_names() %>%
                         rename(air_pressure_) %>%
                         mutate(collect_time = as.hms(collect_time),
                                control = as.logical(control),
                                edna_volume_ml = as.numeric(edna_volume_ml)))
```

# 3 Checks
## gel

```{r}

gelled_capture = clean_capture %>%
  # inherit/assign site_id
  left_join(db_site %>%
              select(site,
                     site_id) %>%
              collect(), by = "site") %>%
  # inherit/assign visit_id
  left_join(db_visit %>%
              select(visit_id,
                     date,
                     time_of_day,
                     site_id) %>%
              collect(), by = c("date", "time_of_day", "site_id")) %>%
  group_by_at(c("date", "time_of_day", "site_id")) %>%
  mutate(uuid_name_visit = paste0(site, date, time_of_day),
         visit_id = ifelse(is.na(visit_id), UUIDfromName("b16032a6-76a0-428a-808a-50a969ba87de", uuid_name_visit), visit_id)) %>%
  ungroup() %>%
  # inherit/assign survey_id
  left_join(db_survey %>%
              select(survey_id,
                     visit_id,
                     transect,
                     detection_type) %>%
              collect(), by = c("visit_id", "transect", "detection_type")) %>%
  group_by(visit_id,
          transect,
          detection_type) %>%
  mutate(start_time = as_hms(min(time_of_capture, na.rm = TRUE)),
         end_time = as_hms(max(time_of_capture, na.rm = TRUE)),
         uuid_name_survey = paste0(visit_id, transect, start_time, detection_type),
         survey_id = ifelse(is.na(survey_id), UUIDfromName("e3c835a4-4c8d-491c-9970-011aba853686", uuid_name_survey), survey_id),
         observers_survey = paste(unique(unlist(strsplit(observer_capture, ", "))), collapse = ", "),
         number_observers = lengths(strsplit(observers_survey, ",")),
         observers_survey = ifelse(observers_survey == "NA", NA_character_, observers_survey),
         number_observers = ifelse(is.na(observers_survey), NA, number_observers)) %>%
  ungroup() %>%
  mutate(start_time = as_hms(ifelse(start_time == Inf, NA, start_time)),
         end_time = as_hms(ifelse(end_time == -Inf, NA, end_time)),
         visit_id = ifelse(is.na(site_id), NA, visit_id),
         survey_id = ifelse(is.na(site_id), NA, survey_id))

peace = get_dupes(gelled_capture, capture_id)

```

# samples
```{r}
# sample_subtype = gelled_capture %>%
#   select(capture_id,
#          genetic_id,
#          tissue) %>%
#   rename(sample_subtype = tissue,
#          sample_name = genetic_id) %>%
#   mutate(sample_type = "genetic")

sample_gelled = gelled_capture %>%
  select(capture_id,
         bd_swab_tube_id,
         mic_swab_tube_id,
         bacterial_swab_tube_id,
         mucosome_id,
         amp_id,
         antibody_id,
         genetic_id) %>%
  rename(amp = amp_id,
         antibody = antibody_id,
         bacterial = bacterial_swab_tube_id,
         bd = bd_swab_tube_id,
         genetic = genetic_id,
         microbiome = mic_swab_tube_id,
         mucosome = mucosome_id) %>%
  pivot_longer(c("amp",
                 "antibody",
                 "bacterial",
                 "bd",
                 "genetic",
                 "microbiome",
                 "mucosome"),
               names_to = "sample_type",
               values_to = "sample_name") %>%
  filter(!is.na(sample_name),
         sample_name != "NA") %>%
  left_join(db_sample %>%
              collect(), by = c("sample_name", "sample_type")) %>%
  mutate(uuid_name = paste0(sample_name, sample_type),
         sample_id = ifelse(is.na(sample_id), UUIDfromName("1208e62f-d3a1-462c-984f-0bf1f43f5837", uuid_name), sample_id))

```

# environmental
```{r}
gelled_env = gelled_capture %>%
  select(visit_id,
         transect,
         start_time,
         time_of_capture,
         any_of(colnames(db_env))) %>%
  distinct() %>%
  mutate(detection_type = "environmental") %>%
  group_by(visit_id,
           transect,
           start_time,
           detection_type) %>%
  mutate(uuid_name = paste0(visit_id, transect, start_time, detection_type),
         survey_id = ifelse(is.na(survey_id), UUIDfromName("f7b367fb-bbb6-40a8-85db-07d2760e7b95", uuid_name), survey_id)) %>%
  ungroup() %>%
  group_by(visit_id,
           transect,
           start_time,
           detection_type,
           survey_id,
           wind_speed_m_s,
           air_temp_c,
           water_temp_c,
           p_h,
           relative_humidity_percent) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  mutate(uuid_name_env = paste0(survey_id, start_time, wind_speed_m_s, air_temp_c, water_temp_c, p_h, relative_humidity_percent),
         environmental_id = UUIDfromName("37929955-baca-4968-9e7c-bc99bd05293c", uuid_name_env),
         water_time = as_hms(ifelse(!is.na(water_temp_c) | !is.na(p_h), start_time, NA)),
         air_time = as_hms(ifelse(!is.na(wind_speed_m_s) | !is.na(air_temp_c) | !is.na(relative_humidity_percent), start_time, NA))) %>%
  filter(!(is.na(water_temp_c) & is.na(p_h) & is.na(wind_speed_m_s) & is.na(air_temp_c) & is.na(relative_humidity_percent)))

```

# subset & compare
```{r}
subset_site = gelled_capture %>%
  select(any_of(colnames(db_site))) %>%
  distinct() %>%
  drop_na(site_id)

compare_site = compare_df_cols(db_site %>%
                                  filter(FALSE) %>%
                                  collect(), subset_site)
tray = compare_for_staging(db_site %>% collect(), subset_site, "site_id", report = "site")

subset_visit = gelled_capture %>%
  select(any_of(colnames(db_visit))) %>%
  distinct() %>%
  drop_na(visit_id)

compare_visit = compare_df_cols(db_visit %>%
                                  filter(FALSE) %>%
                                  collect(), subset_visit)
tray = compare_for_staging(db_visit %>% collect(), subset_visit, "visit_id", report = "visit")
upsert_visit = bind_rows(tray$insert,
                         tray$update)

# # get visit_id
# vids = subset_visit %>%
#   select(visit_id) %>%
#   distinct() %>%
#   pull(visit_id)
# 
# dput(vids)

subset_survey_capture = gelled_capture %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

compare_survey_capture = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_survey_capture)
tray_capt = compare_for_staging(db_survey %>% collect(), subset_survey_capture, "survey_id", report = "survey_capture")

subset_survey_env = gelled_env %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

compare_survey_env = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_survey_env)
tray_env = compare_for_staging(db_survey %>% collect(), subset_survey_env, "survey_id", report = "survey_env")
upsert_survey = bind_rows(tray_capt$insert,
                          tray_capt$update,
                          tray_env$insert,
                          tray_env$update)

subset_env = gelled_env %>%
  select(any_of(colnames(db_env)))

compare_env = compare_df_cols(db_env %>%
                                  filter(FALSE) %>%
                                  collect(), subset_env)

tray = compare_for_staging(db_env %>% collect(), subset_env, "environmental_id", report = "env")
upsert_env = bind_rows(tray$insert,
                       tray$update)


subset_capture = gelled_capture %>%
  filter(!is_duplicate) %>%
  select(any_of(colnames(db_capture))) %>%
  drop_na(survey_id)

compare_capture = compare_df_cols(db_capture %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture)

tray = compare_for_staging(db_capture %>% collect(), subset_capture, "capture_id", report = "capture")
upsert_capture = bind_rows(tray$insert,
                           tray$update)

subset_taxa = gelled_capture %>%
  select(taxon_capture) %>%
  distinct() %>%
  left_join(db_taxa %>% collect(), by = c("taxon_capture" = "taxon_id")) %>%
  rename(taxon_id = taxon_capture) %>%
  drop_na(taxon_id)

tray = compare_for_staging(db_taxa %>% collect(), subset_taxa, "taxon_id", report = "taxa")
insert_taxa = tray$insert

compare_sample = compare_df_cols(db_sample %>%
                                  filter(FALSE) %>%
                                  collect(), sample_gelled)

tray = compare_for_staging(db_sample %>% collect(), sample_gelled, "sample_id", report = "sample")
insert_sample = tray$insert

```


# commit changes
```{r}
# update all landscape
dbBegin(dbcon)

tryCatch(
  {
    temp_taxa = stage_to_temp(dbcon, db_taxa, insert_taxa)
    pointer = tbl(dbcon, temp_taxa)
    rows_insert(db_taxa, pointer, by="taxon_id", in_place=TRUE, conflict = "ignore")
    
    temp_visit = stage_to_temp(dbcon, db_visit, insert_visit)
    pointer = tbl(dbcon, temp_visit)
    rows_insert(db_visit, pointer, by="visit_id", in_place=TRUE, conflict = "ignore")
    
    temp_survey = stage_to_temp(dbcon, db_survey, insert_survey)
    pointer = tbl(dbcon, temp_survey)
    rows_insert(db_survey, pointer, by="survey_id", in_place=TRUE, conflict = "ignore")
    
    temp_capture = stage_to_temp(dbcon, db_capture, insert_capture)
    pointer = tbl(dbcon, temp_capture)
    rows_insert(db_capture, pointer, by="capture_id", in_place=TRUE, conflict = "ignore")

    temp_env = stage_to_temp(dbcon, db_env, insert_env)
    pointer = tbl(dbcon, temp_env)
    rows_insert(db_env, pointer, by="environmental_id", in_place=TRUE, conflict = "ignore")
    
    temp_sample = stage_to_temp(dbcon, db_sample, insert_sample)
    pointer = tbl(dbcon, temp_sample)
    rows_insert(db_sample, pointer, by="sample_id", in_place=TRUE, conflict = "ignore")
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```



```{r}
dbDisconnect(dbcon)
```