---
title: "panama_append"
format: html
editor: source
---
# Setup

## Load Packages

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to DB
dbcon <- hopToDB()

## Pull metadata from database
mdc = tbl(dbcon, Id("public", "all_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

## Point to local data directory
ddir = Sys.getenv("data_dir")  # data directory
# Keeping .csv files in a central directory. Naming convention uses download date to distinguish batches.
wddir = here(ddir, "fulcrum", 'panama', '2024-11-18', "panama_field_3_0") # working data directory

```


# 0 - Data Plan

## Goals

- Integrate batches of Penn survey data with other RIBBiTR data (including other Penn data) for combined analysis
- Compare with existing data to avoid duplicating, and facilitate automated updating
- Quality control for red flag data (potential or known issues)
- Upload to Database in transaction
- log transaction

## Data chains (someday we can automate this...)

- capture / survey / visit / site / region / location
- aural / survey / visit / site / region / location
- ves / survey / visit / site / region / location

# 1 - Import data


## Pull dependent tables for each data chain

### use naming convention "db\_" to distinguish the source

```{r}
# pull relevant chain tables from DB
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))

```


## Load most recent raw CSV Exports
- use naming convention "raw_" to distinguish source
- name related tables similarly for natural grouping

```{r}
# list.files(path = here(wddir))

# general visit table
raw_visit_info <- read_csv(here(wddir, "panama_field_3_0.csv"))

# general survey table
raw_survey_info <- read_csv(here(wddir, "panama_field_3_0_survey_table_data.csv"))

# survey observations
raw_aural <- read_csv(here(wddir, "panama_field_3_0_individual_call.csv"))
raw_capture <- read_csv(here(wddir, "panama_field_3_0_individual_capture.csv"))
raw_capture_target <- read_csv(here(wddir, "panama_field_3_0_individual_capture_target.csv"))
raw_ves <- read_csv(here(wddir, "panama_field_3_0_individual_visual.csv"))
raw_cmr <- read_csv(here(wddir, "panama_field_3_0_individual_cmr.csv"))

# edna
raw_edna <- read_csv(here(wddir, "panama_field_3_0_edna_samples.csv"))


# # non RIBBiTR
# raw_tadpole <- read_csv(here(wddir, "panama_field_3_0_tadpoles_sampling.csv"))
# raw_acoustic <- read_csv(here(wddir, "panama_field_3_0_bioacousticdata.csv"))
# raw_hobo <- read_csv(here(wddir, "panama_field_3_0_hobos_data.csv"))

raw_tables = c(
  "raw_visit_info",
  "raw_survey_info",
  "raw_aural",
  "raw_capture",
  "raw_capture_target",
  "raw_ves",
  "raw_cmr",
  "raw_edna"
)


```
# 2 - Clean data

## check for null columns & duplicated rows
- purely informational, all action taken in next step

```{r}

null_columns = function(dataframe) {
  filtered = dataframe %>%
    select(where(~ all(is.na(.)))) %>%
    colnames()
}

for (table in raw_tables) {
  cat(table, "\n\t", "Null columns:\n\t\t")
  cat(paste(null_columns(get(table)), collapse = "\n\t\t"))
  cat("\n\tAny duplicate columns:\n\t\t")
  cat(any(duplicated(get(table))), "\n")
  cat("\n\tOne-to_one columns:\n\t\t")
  cat(paste(get_one_to_one(get(table)), collapse="\n\t\t"))
  cat("\n")
}


```

## Drop irrelevant & fix structural issues
- clean column names
- rename/mutate/drop specific columns
- Split, concatenate, coalesce related columns
- Convert to accurate data types/units/naming conventions
- drop unnecessary rows
- NA formatting

```{r}

# Fulcrum columns to drop. Best practice to drop by name
to_drop = c(
  "created_at",
  "updated_at",
  "created_by",
  "updated_by",
  "system_created_at",
  "system_updated_at",
  "version",
  "status",
  "project",
  "assigned_to",
  "latitude", # could this be useful?
  "longitude", # could this be useful?
  "geometry",
  "fulcrum_record_id",
  "site_other" # ignoring sites outside RIBBiTR... could include though.
)

calc_duration = function(start_time, end_time) {
  duration = if_else(end_time < start_time,
                         as_hms(86400) - start_time + end_time,
                         end_time - start_time)
  duration = duration / 60
  duration = str_remove(duration, " secs")
  duration = as.integer(round(as.numeric(duration), 0))
}

start_timestamp = ymd(raw_visit_info$start_date) + as_hms(raw_visit_info$starttime)

# Begin cleaning
clean_visit_info = raw_visit_info %>%
  clean_names() %>%
  rename(time_of_day = surveytime,
         comments_visit = notes_site,
         number_observers = numobs,
         start_time = starttime,
         end_time = endtime) %>%
  mutate(start_timestamp = ymd_hms(paste(start_date, start_time), tz = "America/Panama"),
         end_timestamp = ymd_hms(paste(end_date, end_time), tz = "America/Panama"),
         duration_minutes = as.numeric(difftime(end_timestamp, start_timestamp, units = "mins")),
         end_date = as.Date(end_date - days(floor(clean_visit_info$duration_minutes / 1440))),
         end_timestamp = ymd_hms(paste(end_date, end_time), tz = "America/Panama"),
         duration_minutes = as.numeric(difftime(end_timestamp, start_timestamp, units = "mins")),
         start_time = as_hms(start_time),
         end_time = as_hms(end_time),
         site = str_to_lower(site),
         site = str_replace_all(site, "-", "_"),
         site = str_replace_all(site, " ", "_"),
         temp_visit_id = fulcrum_id) %>%
  unite(observers_survey, c("observers", "observers_other"), sep=",", remove = TRUE, na.rm = TRUE) %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))



clean_survey_info = raw_survey_info %>%
  clean_names() %>%
  rename(wind_speed_m_s = windspeed_metersseconds,
         air_temp_c = airtemp_c,
         water_temp_c = watertemp_c,
         p_h = ph,
         comments_survey = notes_survey,
         cloud_cover_percent = cloudcover,
         relative_humidity_percent = humidity,
         conductivity_us_cm = conductivity_s,
         temp_survey_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id,
         sample_location_description = varm_transect_meters,
         sample_location_utme = utme,
         sample_location_utmn = utmn,
         sample_location_utm_zone = utmz,
         sample_location_elevation_m = elevation_m,
         precipitation_during_visit = precipitation) %>%
  mutate(sample_location_utme = as.numeric(sample_location_utme),
         sample_location_utmn = as.numeric(sample_location_utmn),
         sample_location_elevation_m = as.numeric(sample_location_elevation_m)) %>%
  mutate(pressure_psi = pressureinhg * 0.491154) %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))


clean_aural = raw_aural %>%
  clean_names() %>%
  rename(count_aural = call_quantity,
         detection_location = call_transectm_m,
         microhab = call_microhab,
         microhab_moredetail = call_microhab_other,
         comments_aural = call_notesutm_offtransect,
         aural_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id) %>%
  mutate(species_aural = coalesce(call_species, call_species_other),
         species_aural = str_to_lower(str_replace_all(species_aural, " ", "_")),
         detection_location = as.character(detection_location),
         count_aural = as.integer(count_aural),
         microhab_moredetail = as.character(microhab_moredetail),
         detection_type = "aural") %>%
  select(-any_of(to_drop),
         -call_species,
         -call_species_other) %>%
  filter(!if_all(everything(), is.na))

clean_capture = raw_capture %>%
  rename(capture_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id) %>%
  clean_names() %>%
  mutate(detection_type = "capture") %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))

clean_capture_target = raw_capture_target %>%
  rename(target_id = fulcrum_id,
         capture_fulcrum_id = fulcrum_parent_id) %>%
  clean_names() %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))

clean_ves = raw_ves%>%
  rename(ves_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id,
         count_ves = vis_quantity,
         detaction_location = vis_transectm_m,
         microhab = vis_microhab,
         microhab_moredetail = vis_microhab_other,
         life_stage = vis_lifestage,
         sex = vis_sex,
         comments_ves = vis_notesutm_offtransect) %>%
  clean_names() %>%
  mutate(species_ves = coalesce(vis_species, vis_species_other),
         species_ves = str_to_lower(str_replace_all(species_ves, " ", "_")),
         detection_type = "ves",
         visual_animal_state = case_when(
           vis_dead == "no" ~ "alive",
           vis_dead == "yes" ~ "dead",
           TRUE ~ NA)) %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))

clean_cmr = raw_cmr %>%
  clean_names() %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))

clean_edna = raw_edna %>%
  rename(edna_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id) %>%
  clean_names() %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))


# value corrections
clean_survey_info$sample_location_utm_zone[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = "17P"
clean_survey_info$sample_location_utme[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = 545764
clean_survey_info$sample_location_utmn[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = 953809

clean_survey_info$sample_location_utm_zone[clean_survey_info$temp_survey_id == "6d327912-04e3-409d-8cd8-82cc3e202a84"] = "17P"
clean_survey_info$sample_location_utme[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = 545075
clean_survey_info$sample_location_utmn[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = 958539

clean_survey_info$sample_location_utme[clean_survey_info$temp_survey_id == "1f244904-98e3-4165-aa92-49e1023122bf"] = 545074
clean_survey_info$sample_location_utme[clean_survey_info$temp_survey_id == "c593b1d5-ca35-4698-9c47-bbe557d858c7"] = 485752
clean_survey_info$sample_location_utme[clean_survey_info$temp_survey_id == "2582cd39-8edc-4af2-a99a-6a6d351ee987"] = 607336

clean_survey_info$sample_location_utmn[clean_survey_info$temp_survey_id == "bb484e0c-a982-4f48-b274-72a9cd3934ef"] = 955380


```

# 3 Checks

## unify visit

```{r}
unified_visit = clean_visit_info %>%
  filter(!is.na(date),
         !is.na(time_of_day),
         !is.na(site)) %>%
  select(temp_visit_id,
         date,
         time_of_day,
         site,
         comments_visit) %>%
  group_by(date, time_of_day, site) %>%
  mutate(comments_visit = str_c(comments_visit, collapse = ", ")) %>%
  slice(1) %>%
  ungroup()

```

## gel visit
```{r}
gelled_visit = unified_visit %>%
  inner_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  group_by_at(tbl_nkey("visit", mdc)) %>%
  mutate(visit_id = ifelse(is.na(visit_id), first(temp_visit_id), visit_id),
         visit_id = map_chr(visit_id, ~ ifelse(is.na(.x), UUIDgenerate(), .x))) %>%
  ungroup()

```

## Generate stats for log
```{r}
dblog = list()
dblog$date_min = min(gelled_visit$date)
dblog$date_max = max(gelled_visit$date)
dblog$site = gelled_visit$site %>% unique()
dblog$site_id = gelled_visit$site_id %>% unique()
dblog$region = db_site %>%
  left_join(db_region, by = "region_id") %>%
  filter(site %in% dblog$site) %>%
  pull(region) %>%
  unique()

```

## subset visit
```{r}
subset_visit = gelled_visit %>%
  select(any_of(colnames(db_visit))) %>%
  distinct() %>%
  drop_na(visit_id)

compare_visit = compare_df_cols(db_visit %>%
                                  filter(FALSE) %>%
                                  collect(), subset_visit)



tray = compare_for_staging(db_visit %>%
                             filter(date >= dblog$date_min,
                                    site_id %in% dblog$site_id) %>%
                             collect(),
                           subset_visit, tbl_pkey('visit', mdc), return_all = TRUE, report = "visit")
final_visit = bind_rows(tray$insert,
                        tray$update)

# upsert visit?
x_visit = (nrow(final_visit) > 0)

```

## upsert visits

```{r}
if (x_visit) {
  temp_visit = stage_to_temp(dbcon, db_visit, final_visit)
  pointer = tbl(dbcon, temp_visit)
  db_visit = rows_upsert(db_visit, pointer, by="visit_id", in_place=TRUE)
}

```

## reload visits
```{r}
db_visit = tbl(dbcon, Id("survey_data", "visit"))
```

# One chain at a time

## Environmental chain

### Unify env data
```{r}
unified_env = clean_visit_info %>%
  left_join(clean_survey_info, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
    mutate(detection_type = "environmental",
         environmental_id = temp_survey_id,
         environmental_id = map_chr(environmental_id, ~ ifelse(is.na(.x), UUIDgenerate(), .x))) %>%
  distinct() %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  filter(rowSums(is.na(select(., air_temp_c, water_temp_c, precipitation_during_visit, sample_location_utme))) < 4) %>%
  group_by(visit_id, air_temp_c, water_temp_c, precipitation_during_visit, sample_location_utme) %>%
  summarise(across(everything(), ~ first(na.omit(.)), .names = "{col}"), .groups = "drop") %>%
  ungroup() %>%
  filter(!is.na(site),
         !is.na(date))

if (nrow(unified_env %>% filter(is.na(site_id))) > 0) {
  stop("Unknown sites returned, consider importing first.")
}


```

### 4 - Gelled env data

```{r}
gelled_env = unified_env %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(start_time = as_hms(min(start_time)),
         end_time = as_hms(max(end_time)),
         duration_minutes = calc_duration(start_time, end_time),
         comments_survey = str_c(comments_survey, collapse = ", "),
         survey_id = ifelse(is.na(survey_id), UUIDgenerate(), survey_id)) %>%
  ungroup() %>%
  select(-temp_survey_id)

```

### 5 - Subset env tables

```{r}

# survey
subset_env_survey = gelled_env %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_env_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_env_survey)

peace = get_dupes(gelled_env, survey_id)

tray = compare_for_staging(db_survey %>% collect(), subset_env_survey, "survey_id", return_all = TRUE, report = "env_survey")
final_env_survey = bind_rows(tray$insert,
                             tray$update)

# aural
subset_env = gelled_env%>%
  select(any_of(colnames(db_env))) %>%
  distinct() %>%
  drop_na(environmental_id)

# compare columns
compare_env = compare_df_cols(db_env %>%
                                  filter(FALSE) %>%
                                  collect(), subset_env)

tray = compare_for_staging(db_env %>% collect(), subset_env, "environmental_id", return_all = TRUE, report = "env")
final_env = bind_rows(tray$insert,
                        tray$update)

# anything to upsert?
x_env = (nrow(final_env_survey) > 0) | (nrow(final_env) > 0)

```

### Stage and commit env tables

```{r}

if (x_aural) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_aural_survey = stage_to_temp(dbcon, db_survey, final_aural_survey)
      temp_aural = stage_to_temp(dbcon, db_aural, final_aural)
      
      
      pointer = tbl(dbcon, temp_aural_survey)
      rows_upsert(db_survey, pointer, by=tbl_nkey("survey", mdc), in_place=TRUE)
      
      pointer = tbl(dbcon, temp_aural)
      rows_upsert(db_aural, pointer, by=tbl_pkey("aural", mdc), in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}
```



## Aural chain
- aural / survey / visit / site / region / location

### 3 - Unify aural data

```{r}
unified_aural = clean_visit_info %>%
  left_join(clean_survey_info, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  right_join(clean_aural, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  filter(!is.na(site),
         !is.na(date))

if (nrow(unified_aural %>% filter(is.na(site_id))) > 0) {
  stop("Unknown sites returned, consider importing first.")
}

```

### 4 - Gelled aural data

```{r}
gelled_aural = unified_aural %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(start_time = as_hms(mean(start_time)),
         end_time = as_hms(mean(end_time)),
         duration_minutes = calc_duration(start_time, end_time),
         comments_survey = str_c(comments_survey, collapse = ", "),
         survey_id = ifelse(is.na(survey_id), UUIDgenerate(), survey_id)) %>%
  ungroup() %>%
  select(-temp_survey_id)

```

### 5 - Subset aural tables

```{r}

# survey
subset_aural_survey = gelled_aural %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_aural_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_aural_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_aural_survey, tbl_pkey('survey', mdc), return_all = TRUE, report = "aural_survey")
final_aural_survey = bind_rows(tray$insert,
                               tray$update)

# aural
subset_aural = gelled_aural %>%
  select(any_of(colnames(db_aural))) %>%
  distinct() %>%
  drop_na(aural_id)

# compare columns
compare_aural = compare_df_cols(db_aural %>%
                                  filter(FALSE) %>%
                                  collect(), subset_aural)

tray = compare_for_staging(db_aural %>% collect(), subset_aural, tbl_pkey('aural', mdc), return_all = TRUE, report = "aural")
final_aural = bind_rows(tray$insert,
                        tray$update)

# anything to upsert?
x_aural = (nrow(final_aural_survey) > 0) | (nrow(final_aural) > 0)

```

### Stage and commit aural tables

```{r}

if (x_aural) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_aural_survey = stage_to_temp(dbcon, db_survey, final_aural_survey)
      temp_aural = stage_to_temp(dbcon, db_aural, final_aural)
      
      
      pointer = tbl(dbcon, temp_aural_survey)
      rows_upsert(db_survey, pointer, by=tbl_nkey("survey", mdc), in_place=TRUE)
      
      pointer = tbl(dbcon, temp_aural)
      rows_upsert(db_aural, pointer, by=tbl_pkey("aural", mdc), in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}
```


## VES chain
- ves / survey / visit / site / region / location

### Reload tables
```{r}
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_aural = tbl(dbcon, Id("survey_data", "aural"))
```



### Unify ves data
```{r}

unified_ves = clean_visit_info %>%
  left_join(clean_survey_info, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  right_join(clean_ves, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  filter(!is.na(site),
         !is.na(date))

if (nrow(unified_aural %>% filter(is.na(site_id))) > 0) {
  stop("Unknown sites returned, consider importing first.")
}

```

### Gel ves data
```{r}
gelled_ves = unified_ves %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(start_time = as_hms(mean(start_time)),
         end_time = as_hms(mean(end_time)),
         duration_minutes = calc_duration(start_time, end_time),
         comments_survey = str_c(comments_survey, collapse = ", "),
         survey_id = ifelse(is.na(survey_id), UUIDgenerate(), survey_id)) %>%
  ungroup() %>%
  select(-fulcrum_id)
```

### 5 - Subset final ves tables

```{r}

# survey
subset_ves_survey = gelled_ves %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_ves_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_ves_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_ves_survey, tbl_pkey('survey', mdc), return_all = TRUE, report = "ves_survey")
final_ves_survey = bind_rows(tray$insert,
                             tray$update)


# aural
subset_ves = gelled_ves %>%
  select(any_of(colnames(db_ves))) %>%
  distinct() %>%
  drop_na(ves_id)

# compare columns
compare_ves = compare_df_cols(db_ves %>%
                                  filter(FALSE) %>%
                                  collect(), subset_ves)

tray = compare_for_staging(db_ves %>% collect(), subset_ves, tbl_pkey('ves', mdc), return_all = TRUE, report = "ves")
final_ves = bind_rows(tray$insert,
                      tray$update)

x_ves = (nrow(final_ves_survey) > 0) | (nrow(final_ves) > 0)

```

### Stage and commit aural tables

```{r}
if (x_ves) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_ves_survey = stage_to_temp(dbcon, db_survey, final_ves_survey)
      temp_ves = stage_to_temp(dbcon, db_ves, final_ves)
      
      
      pointer = tbl(dbcon, temp_ves_survey)
      rows_upsert(db_survey, pointer, by=tbl_nkey("survey", mdc), in_place=TRUE)
      
      pointer = tbl(dbcon, temp_ves)
      rows_upsert(db_ves, pointer, by=tbl_pkey("ves", mdc), in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

```

## Reload tables
```{r}
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
```

## Capture chain
- capture / survey / visit / site / region / location

```{r}

unified_sample =  clean_sample_obs %>% 
  full_join(clean_sample_processing, by= c("fulcrum_parent_id" = "fulcrum_id")) %>%
  unite("comments_sample", c("comments_sample.x", "comments_sample.y"), sep=",", remove = TRUE, na.rm = TRUE) %>%
  select(-fulcrum_id,
         -fulcrum_parent_id)

unified_capture = clean_capture_obs %>%
  full_join(clean_capture_survey, by = c("fulcrum_parent_id" = "fulcrum_id")) %>%
  select(-fulcrum_parent_id) %>%
  mutate(temp_capture_id = fulcrum_id) %>%
  full_join(unified_sample, by=c("site", "date", "bag_id")) %>%
  mutate(species_capture = coalesce(species_capture.y, species_capture.x)) %>%
  select(-time_of_day.x,
         -time_of_day.y,
         -species_capture.x,
         -species_capture.y) %>%
  unite("comments_capture", c("comments_capture", "comments_sample"), sep=",", remove = TRUE, na.rm = TRUE) %>%
  left_join(clean_survey_info, by = c("site", "date")) %>%
  select(-fulcrum_id) %>%
  inner_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = tbl_nkey("site", mdc)) %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  mutate(detection_type = "capture")

# 
# # QA/QC
# 
# # exploration
# sample_unmatched = unified_sample %>%
#   anti_join(unified_capture, by=c("site", "date", "bag_id")) %>%
#   # select(site, date, bag_id, species_capture, sample_id) %>%
#   mutate(capture_id = as.character(NA)) %>%
#   filter(!is.na(bag_id))
# 
# capture_unmatched = unified_capture %>%
#   anti_join(unified_sample, by=c("site", "date", "bag_id")) %>%
#   # select(site, date, bag_id, species_capture, capture_id) %>%
#   mutate(sample_id = as.character(NA)) %>%
#   filter(!is.na(bag_id))
# 
# sample_capture_unmatched = bind_rows(capture_unmatched, sample_unmatched) %>%
#   arrange(site, date, bag_id) %>%
#   group_by(site, date) %>%
#   mutate(temp_id = cur_group_id()) %>%
#   ungroup() %>%
#   select(site, date, bag_id, species_capture, capture_id, sample_id, start_time, end_time, observer_capture, processor, observers_survey, comments_capture, comments_sample,)
# 
# write_csv(sample_capture_unmatched, here("staging", "sample_campture_unmatched.csv"))
# 
# test_site = "tuttle_pond"
# test_date = "2024-07-08"
# 
# peace = unified_sample %>%
#   filter(site == test_site,
#          date == test_date) %>%
#   arrange(bag_id)
# 
# train = unified_capture %>%
#   filter(site == test_site,
#          date == test_date) %>%
#   arrange(bag_id)

```

# Gelled capture

```{r}

# compare db and constructed columns for anything weird.
# peace = compare_df_cols(db_capture %>%
#                           filter(FALSE) %>%
#                           collect(), unified_capture)
# peace = compare_df_cols(db_survey %>%
#                           filter(FALSE) %>%
#                           collect(), unified_capture)
# peace = compare_df_cols(db_visit %>%
#                           filter(FALSE) %>%
#                           collect(), unified_capture)

gelled_capture = unified_capture %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(start_time = as_hms(mean(start_time)),
         end_time = as_hms(mean(end_time)),
         duration_minutes = calc_duration(start_time, end_time),
         comments_survey = str_c(comments_survey, collapse = ", "),
         survey_id = ifelse(is.na(survey_id), UUIDgenerate(), survey_id)) %>%
  ungroup() %>%
  select(-temp_capture_id) %>%
  drop_na(visit_id)

```

### 5 - Subset final capture tables

```{r}
# survey
subset_capture_survey = gelled_capture %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_capture_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_capture_survey, tbl_pkey('survey', mdc), return_all = TRUE, report = "capture_survey")

# differences arrise in time columns which are nonsubstantial. ignoring for now
colcomp = compare_updates(tray)

final_capture_survey = bind_rows(tray$insert,
                                 tray$update)

# capture
subset_capture = gelled_capture %>%
  select(any_of(colnames(db_capture))) %>%
  distinct() %>%
  drop_na(capture_id)

# compare columns
compare_ves = compare_df_cols(db_ves %>%
                                  filter(FALSE) %>%
                                  collect(), subset_ves)


tray = compare_for_staging(db_capture %>% collect(), subset_capture, tbl_pkey('capture', mdc), return_all = TRUE, report = "capture")
final_capture = bind_rows(tray$insert,
                          tray$update)

x_capture = (nrow(final_capture_survey) > 0) | (nrow(final_capture) > 0)

```

### Stage and commit capture tables

```{r}
if (x_capture) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_capture_survey = stage_to_temp(dbcon, db_survey, final_capture_survey)
      temp_capture = stage_to_temp(dbcon, db_capture, final_capture)
      
      
      pointer = tbl(dbcon, temp_capture_survey)
      rows_upsert(db_survey, pointer, by=tbl_nkey("survey", mdc), in_place=TRUE)
      
      pointer = tbl(dbcon, temp_capture)
      rows_upsert(db_capture, pointer, by=tbl_pkey("capture", mdc), in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

```

## Reload tables
```{r}
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
```


## CMR table

```{r}

cmr_cols <- read_csv(here("clean_tables", "penn_cmr.csv"))

final_cmr <- cmr %>% 
  select(!c(species_other, location, species)) %>% 
  unite(cmr, c("cmr_id", "cmr_id_other"), na.rm = T, sep = "") %>% 
  rename(capture_mark_recapture = fulcrum_id,
         cmr_id = cmr)

dbAppendTable(dbcon, "cmr", final_cmr)

```
