---
title: "panama_append"
format: html
editor: source
---
# Setup

## Load Packages

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to DB
dbcon <- hopToDB("wibbitr")

## Pull metadata from database
mdc = tbl(dbcon, Id("public", "all_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

## Point to local data directory
ddir = Sys.getenv("data_dir")  # data directory
# Keeping .csv files in a central directory. Naming convention uses download date to distinguish batches.
wddir = here(ddir, "fulcrum", 'panama', '2024-11-18', "panama_field_3_0") # working data directory

```


# 0 - Data Plan

## Goals

- Integrate batches of Penn survey data with other RIBBiTR data (including other Penn data) for combined analysis
- Compare with existing data to avoid duplicating, and facilitate automated updating
- Quality control for red flag data (potential or known issues)
- Upload to Database in transaction
- log transaction

## Data chains (someday we can automate this...)

- capture / survey / visit / site / region / location
- aural / survey / visit / site / region / location
- ves / survey / visit / site / region / location

# 1 - Import data


## Pull dependent tables for each data chain

### use naming convention "db\_" to distinguish the source

```{r}
# pull relevant chain tables from DB
db_sample = tbl(dbcon, Id("survey_data", "sample"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))

```


## Load most recent raw CSV Exports
- use naming convention "raw_" to distinguish source
- name related tables similarly for natural grouping

```{r}
# list.files(path = here(wddir))

# general visit table
raw_visit_info <- read_csv(here(wddir, "panama_field_3_0.csv"))

# general survey table
raw_survey_info <- read_csv(here(wddir, "panama_field_3_0_survey_table_data.csv"))

# survey observations
raw_aural <- read_csv(here(wddir, "panama_field_3_0_individual_call.csv"))
raw_capture <- read_csv(here(wddir, "panama_field_3_0_individual_capture.csv"))
raw_capture_target <- read_csv(here(wddir, "panama_field_3_0_individual_capture_target.csv"))
raw_ves <- read_csv(here(wddir, "panama_field_3_0_individual_visual.csv"))
raw_cmr <- read_csv(here(wddir, "panama_field_3_0_individual_cmr.csv"))

# edna
raw_edna <- read_csv(here(wddir, "panama_field_3_0_edna_samples.csv"))


# # non RIBBiTR
# raw_tadpole <- read_csv(here(wddir, "panama_field_3_0_tadpoles_sampling.csv"))
# raw_acoustic <- read_csv(here(wddir, "panama_field_3_0_bioacousticdata.csv"))
# raw_hobo <- read_csv(here(wddir, "panama_field_3_0_hobos_data.csv"))

raw_tables = c(
  "raw_visit_info",
  "raw_survey_info",
  "raw_aural",
  "raw_capture",
  "raw_capture_target",
  "raw_ves",
  "raw_cmr",
  "raw_edna"
)

local_tz = "America/Panama"

```
# 2 - Clean data

## check for null columns & duplicated rows
- purely informational, all action taken in next step


## Drop irrelevant & fix structural issues
- clean column names
- rename/mutate/drop specific columns
- Split, concatenate, coalesce related columns
- Convert to accurate data types/units/naming conventions
- drop unnecessary rows
- NA formatting

```{r}

# Fulcrum columns to drop. Best practice to drop by name
to_drop = c(
  "created_at",
  "updated_at",
  "created_by",
  "updated_by",
  "system_created_at",
  "system_updated_at",
  "version",
  "status",
  "project",
  "assigned_to",
  "geometry",
  "fulcrum_record_id",
  "site_other" # ignoring sites outside RIBBiTR... could include though.
)

# Begin cleaning
clean_visit_info = raw_visit_info %>%
  clean_names() %>%
  rename(time_of_day = surveytime,
         comments_visit = notes_site,
         number_observers = numobs,
         start_time = starttime,
         end_time = endtime) %>%
  unite(observers_survey, c("observers", "observers_other"), sep=",", remove = TRUE, na.rm = TRUE) %>%
  mutate(date = coalesce(start_date, date),
         start_date = coalesce(start_date, date),
         end_date = coalesce(end_date, start_date),
         start_time = as_hms(start_time),
         end_time = as_hms(end_time),
         number_observers = map_int(observers_survey, ~ length(unique(na.omit(unlist(str_split(gsub(" ", "", .x), ",")))))),
         site = coalesce(site, site_other),
         site = str_to_lower(site),
         site = str_replace_all(site, "-", "_"),
         site = str_replace_all(site, " ", "_"),
         region = str_to_lower(region),
         region = str_replace_all(region, "-", "_"),
         region = str_replace_all(region, " ", "_"),
         temp_visit_id = fulcrum_id) %>%
  select(-any_of(to_drop),
         -latitude,
         -longitude) %>%
  filter(!if_all(everything(), is.na))

clean_survey_info = raw_survey_info %>%
  clean_names() %>%
  rename(wind_speed_m_s = windspeed_metersseconds,
         air_temp_c = airtemp_c,
         water_temp_c = watertemp_c,
         p_h = ph,
         comments_survey = notes_survey,
         cloud_cover_percent = cloudcover,
         relative_humidity_percent = humidity,
         conductivity_us_cm = conductivity_s,
         temp_survey_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id,
         sample_location_description = varm_transect_meters,
         environmental_utme = utme,
         environmental_utmn = utmn,
         environmental_utm_zone = utmz,
         environmental_elevation_m = elevation_m,
         precipitation_during_visit = precipitation,
         soil_moisture_m3_m3 = soil_humidity_m3m3) %>%
  mutate(environmental_utme = as.numeric(environmental_utme),
         environmental_utmn = as.numeric(environmental_utmn),
         environmental_utm_zone = 17,
         environmental_elevation_m = as.numeric(environmental_elevation_m)) %>%
  mutate(air_pressure_mbar = pressureinhg * 33.8639) %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))

clean_aural = raw_aural %>%
  clean_names() %>%
  rename(count_aural = call_quantity,
         detection_location = call_transectm_m,
         microhab = call_microhab,
         microhab_moredetail = call_microhab_other,
         comments_aural = call_notesutm_offtransect,
         aural_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id) %>%
  mutate(taxon_aural = coalesce(call_species, call_species_other),
         taxon_aural = str_to_lower(str_replace_all(taxon_aural, " ", "_")),
         detection_location = as.character(detection_location),
         count_aural = as.integer(count_aural),
         microhab_moredetail = as.character(microhab_moredetail),
         detection_type = "aural") %>%
  ribbitr_clean_taxa(taxon_aural, comments_aural) %>%
  select(-any_of(to_drop),
         -call_species,
         -call_species_other) %>%
  filter(!if_all(everything(), is.na))

clean_capture_target <- raw_capture_target %>%
  rename_with(~ gsub("^capt_", "", .), starts_with("capt_")) %>%
  select(-any_of(to_drop))

clean_cmr = raw_cmr %>%
  rename_with(~ gsub("_cmr", "", .)) %>%
  rename_with(~ gsub("^capt_", "", .), starts_with("capt_")) %>%
  mutate(taxon_cmr = coalesce(species, species_other),
         taxon_cmr = str_to_lower(str_replace_all(taxon_cmr, " ", "_"))) %>%
  ribbitr_clean_taxa(taxon_cmr) %>%
  select(-any_of(to_drop))
  

# bind capture and target rows
clean_capture = raw_capture %>%
  rename_with(~ gsub("^cap_", "", .), starts_with("cap_")) %>%
  bind_rows(clean_capture_target, clean_cmr) %>%
  unite(comments_capture, c("notes_captureutm_offtransect", "notesutm_offtransect"), na.rm = T, sep = "") %>%
  rename(capture_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id,
         body_temp_c = bodytemp_c,
         body_and_bag_mass_g = frogbag_mass_g,
         body_mass_g = frogmass_g,
         bag_mass_g = mass_bag_g,
         life_stage = lifestage,
         microhabitat_type = microhab,
         microhab_moredetail = microhab_other,
         substrate_temp_c = substemp_c,
         capture_trx_loc = transectm_m,
         photo_id = photoid,
         time_of_capture = time,
         local_cmr_id = pit_tag_id_number_if_it_was_placed,
         capture_latitude = latitude,
         capture_longitude = longitude) %>%
  clean_names() %>%
  mutate(detection_type = "capture",
         bd_swab_id = ifelse(bd_swab == 1, swab_id, NA),
         mucosome_id = ifelse(mucosome_water == 1, swab_id, NA),
         amp_id = ifelse(ampshcl == 1, swab_id, NA),
         antibody_id = if_else(amps == 1, swab_id, NA),
         microbiome_swab_id = ifelse(bacteria_swab == 1, swab_id, NA),
         bacterial_swab_id = ifelse(glycerol_swab == 1, swab_id, NA),
         genetic_id = ifelse(buccal_swab == 1, swab_id, NA),
         taxon_capture = coalesce(species, species_other),
         taxon_capture = str_to_lower(str_replace_all(taxon_capture, " ", "_")),
         capture_trx_loc = as.character(capture_trx_loc),
         capture_animal_state = case_when(
           dead == "no" ~ "alive",
           dead == "yes" ~ "dead",
           TRUE ~ NA),
         sex = ifelse(sex %in% c("unknown", "unkonwn"), NA, sex)) %>%
  ribbitr_clean_taxa(taxon_capture, comments_capture) %>%
  select(-any_of(to_drop),
         -c(bd_swab,
            mucosome_water,
            amps,
            ampshcl,
            bacteria_swab,
            glycerol_swab,
            buccal_swab,
            dead,
            species,
            species_other,
            swab_id)) %>%
  filter(!if_all(everything(), is.na))

clean_ves = raw_ves%>%
  rename(ves_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id,
         count_ves = vis_quantity,
         detaction_location = vis_transectm_m,
         microhab = vis_microhab,
         microhab_moredetail = vis_microhab_other,
         life_stage = vis_lifestage,
         sex = vis_sex,
         comments_ves = vis_notesutm_offtransect) %>%
  clean_names() %>%
  mutate(taxon_ves = coalesce(vis_species, vis_species_other),
         taxon_ves = str_to_lower(str_replace_all(taxon_ves, " ", "_")),
         detection_type = "visual",
         is_numeric = !is.na(as.numeric(count_ves)) & !str_detect(count_ves, "[a-zA-Z]"),
         comments_ves = ifelse(!is_numeric, paste(comments_ves, count_ves, sep = ", "), comments_ves),
         count_ves = ifelse(is_numeric, as.numeric(count_ves), NA),
         visual_animal_state = case_when(
           vis_dead == "no" ~ "alive",
           vis_dead == "yes" ~ "dead",
           TRUE ~ NA)) %>%
  ribbitr_clean_taxa(taxon_ves, comments_ves) %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))

clean_edna = raw_edna %>%
  rename(edna_id = fulcrum_id,
         visit_fulcrum_id = fulcrum_parent_id,
         edna_latitude = latitude,
         edna_longitude = longitude,
         collection_time = edna_collection_time,
         edna_sample_name = id_edna_sample,
         filter_start_time = start_time_sample_edna_filtering,
         filter_end_time = finish_time_sample_edna_filtering,
         filter_volume_ml = sample_volume_filtered_ml) %>%
  clean_names() %>%
  unite(comments_edna, c("edna_sample_info", "edna_sample_info_other", "notes_of_edna_sample"), sep=". ", remove = TRUE, na.rm = TRUE) %>%
  mutate(detection_type = "edna",
         control = grepl("control", comments_edna),
         filter_size = as.numeric(gsub(" um", "", filter_type)),
         filter_volume_ml = as.integer(round(filter_volume_ml)),
         filter_size = ifelse(is.na(filter_size),
                              ifelse(grepl("1.2", comments_edna),
                                     1.2,
                                     NA),
                              filter_size),
         collection_type = case_when(
           grepl("active", comments_edna) ~ "active",
           grepl("passive", comments_edna) ~ "passive",
           .default = NA)) %>%
  select(-any_of(to_drop)) %>%
  filter(!if_all(everything(), is.na))


# value corrections
clean_survey_info$environmental_utm_zone[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = 17
clean_survey_info$environmental_utme[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = 545764
clean_survey_info$environmental_utmn[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = 953809

clean_survey_info$environmental_utm_zone[clean_survey_info$temp_survey_id == "6d327912-04e3-409d-8cd8-82cc3e202a84"] = 17
clean_survey_info$environmental_utme[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = 545075
clean_survey_info$environmental_utmn[clean_survey_info$temp_survey_id == "271fe5d3-ae5b-4c2e-bd1f-4d1f356dcc37"] = 958539

clean_survey_info$environmental_utme[clean_survey_info$temp_survey_id == "1f244904-98e3-4165-aa92-49e1023122bf"] = 545074
clean_survey_info$environmental_utme[clean_survey_info$temp_survey_id == "c593b1d5-ca35-4698-9c47-bbe557d858c7"] = 485752
clean_survey_info$environmental_utme[clean_survey_info$temp_survey_id == "2582cd39-8edc-4af2-a99a-6a6d351ee987"] = 607336

clean_survey_info$environmental_utmn[clean_survey_info$temp_survey_id == "bb484e0c-a982-4f48-b274-72a9cd3934ef"] = 955380


```

# 3 Checks
```{r}
clean_visit_info %>%
  filter(date != start_date) %>%
  select(fulcrum_id)

```


## gel site

```{r}

gelled_site = clean_visit_info %>%
  left_join(clean_survey_info, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  select(region,
         site,
         environmental_utm_zone,
         environmental_utme,
         environmental_utmn,
         environmental_elevation_m) %>% 
  group_by(site) %>% 
  slice_head(n = 1) %>%
  ungroup %>%
  left_join(db_site %>% collect(), by = c("site")) %>%
  mutate(site_utme = coalesce(site_utme, environmental_utme),
         site_utmn = coalesce(site_utmn, environmental_utmn),
         site_utm_zone = ifelse(is.na(site_utme), NA, coalesce(site_utm_zone, environmental_utm_zone)),
         site_elevation_m = coalesce(site_elevation_m, environmental_elevation_m)) %>%
  select(-region_id) %>%
  left_join(db_region %>% collect(), by = c("region")) %>% 
  mutate(site_id = ifelse(is.na(site_id), UUIDfromName("a3d795dc-1014-4e71-9b00-bc8f6b5ceeef", site), site_id))

```

## subset site
```{r}
subset_site = gelled_site %>%
  select(any_of(colnames(db_site))) %>%
  distinct() %>%
  drop_na(site_id)

compare_site = compare_df_cols(db_site %>%
                                  filter(FALSE) %>%
                                  collect(), subset_site)

tray = compare_for_staging(db_site %>% collect(), subset_site, "site_id", return_all = TRUE, report = "site")
upsert_site = bind_rows(tray$insert,
                       tray$update)

# upsert visit?
x_site = (nrow(upsert_site) > 0)

```

## upsert site

```{r}
if (x_site) {
  temp_site = stage_to_temp(dbcon, db_site, upsert_site)
  pointer = tbl(dbcon, temp_site)
  db_site = rows_upsert(db_site, pointer, by="site_id", in_place=TRUE)
}

db_site = tbl(dbcon, Id("survey_data", "site"))

```

## unify visit

```{r}
unified_visit = clean_visit_info %>%
  filter(!is.na(date),
         !is.na(time_of_day),
         !is.na(site)) %>%
  select(temp_visit_id,
         date,
         time_of_day,
         site,
         comments_visit) %>%
  group_by(site, date, time_of_day) %>%
  mutate(comments_visit = str_c(comments_visit, collapse = ", ")) %>%
  # slice_head(n = 1) %>%
  ungroup()

```

## gel visit
```{r}
gelled_visit = unified_visit %>%
  inner_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  mutate(uuid_name = paste0(site, date, time_of_day),
         visit_id = ifelse(is.na(visit_id), UUIDfromName("d811625d-f792-4848-8e5c-c351b3dc6268", uuid_name), visit_id),
         project = "ribbitr",
         visit_lab = "jv_lab")


peace = get_dupes(gelled_visit, date, time_of_day, site_id)
```

## Generate stats for log
```{r}
dblog = list()
dblog$date_min = min(gelled_visit$date)
dblog$date_max = max(gelled_visit$date)
dblog$site = gelled_visit$site %>% unique()
dblog$site_id = gelled_visit$site_id %>% unique()
dblog$region = db_site %>%
  left_join(db_region, by = "region_id") %>%
  filter(site %in% dblog$site) %>%
  pull(region) %>%
  unique()

```

## subset visit
```{r}
subset_visit = gelled_visit %>%
  select(any_of(colnames(db_visit))) %>%
  distinct() %>%
  drop_na(visit_id)

compare_visit = compare_df_cols(db_visit %>%
                                  filter(FALSE) %>%
                                  collect(), subset_visit)

tray = compare_for_staging(db_visit %>%
                             filter(date >= dblog$date_min,
                                    site_id %in% dblog$site_id) %>%
                             collect(),
                           subset_visit, tbl_pkey('visit', mdc), return_all = TRUE, report = "visit")

upsert_visit = bind_rows(tray$insert,
                        tray$update)

# # get visit_id
# vids = subset_visit %>%
#   select(visit_id) %>%
#   distinct() %>%
#   pull(visit_id)
# 
# dput(vids)

# upsert visit?
x_visit = (nrow(upsert_visit) > 0)

```

## upsert visits

```{r}
if (x_visit) {
  temp_visit = stage_to_temp(dbcon, db_visit, upsert_visit)
  pointer = tbl(dbcon, temp_visit)
  db_visit = rows_upsert(db_visit, pointer, by="visit_id", in_place=TRUE)
}

db_visit = tbl(dbcon, Id("survey_data", "visit"))

```

# One chain at a time

## Environmental chain

### Unify env data
```{r}
unified_env = clean_visit_info %>%
  left_join(clean_survey_info, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  distinct() %>%
  mutate(detection_type = "environmental",
         air_time = start_time,
         water_time = start_time) %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  filter(rowSums(is.na(select(., air_temp_c, water_temp_c, precipitation_during_visit, environmental_utme))) < 4) %>%
  group_by(visit_id, air_temp_c, water_temp_c, precipitation_during_visit, environmental_utme) %>%
  summarise(across(everything(), ~ first(na.omit(.)), .names = "{col}"), .groups = "drop") %>%
  ungroup() %>%
  filter(!is.na(site),
         !is.na(date))

```

### 4 - Gelled env data

```{r}
gelled_env = unified_env %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(start_time = find_time_range(c(start_time, end_time))$first_time,
         end_time = find_time_range(c(start_time, end_time))$last_time) %>%
  ungroup() %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc),
         uuid_name = paste0(visit_id, transect, start_time, detection_type),
         survey_id = ifelse(is.na(survey_id), UUIDfromName("f7b367fb-bbb6-40a8-85db-07d2760e7b95", uuid_name), survey_id),
         comments_survey = str_c(comments_survey, collapse = ", "),
         observers_survey = str_flatten_comma(unique(na.omit(unlist(str_split(observers_survey, ",\\s*")))), na.rm = TRUE),
         number_observers = count_observers(paste(observers_survey, collapse = ","))) %>%
  ungroup() %>%
  mutate(uuid_name = paste0(air_temp_c, water_temp_c, precipitation_during_visit, environmental_utme, temp_survey_id),
         environmental_id = UUIDfromName("37929955-baca-4968-9e7c-bc99bd05293c", uuid_name)) %>%
  select(-temp_survey_id)



```

### 5 - Subset env tables

```{r}

# survey
subset_env_survey = gelled_env %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_env_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_env_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_env_survey, tbl_nkey("survey", mdc), return_all = TRUE, report = "env_survey")
peace = compare_updates(tray)
upsert_env_survey = bind_rows(tray$insert,
                             tray$update)

# aural
subset_env = gelled_env%>%
  select(any_of(colnames(db_env))) %>%
  distinct() %>%
  drop_na(environmental_id)

# compare columns
compare_env = compare_df_cols(db_env %>%
                                  filter(FALSE) %>%
                                  collect(), subset_env)

tray = compare_for_staging(db_env %>% collect(), subset_env, "environmental_id", return_all = TRUE, report = "env")
upsert_env = bind_rows(tray$insert,
                        tray$update)

# anything to upsert?
x_env = (nrow(upsert_env_survey) > 0) | (nrow(upsert_env) > 0)

```

### Stage and commit env tables

```{r}

if (x_env) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_env_survey = stage_to_temp(dbcon, db_survey, upsert_env_survey)
      pointer = tbl(dbcon, temp_env_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_env = stage_to_temp(dbcon, db_env, upsert_env)
      pointer = tbl(dbcon, temp_env)
      rows_upsert(db_env, pointer, by="environmental_id", in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
```

## eDNA chain

# unify edna
```{r}
unified_edna = clean_visit_info %>%
  left_join(clean_survey_info, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  right_join(clean_edna, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  filter(!is.na(site),
         !is.na(date))

if (nrow(unified_edna %>% filter(is.na(site_id))) > 0) {
  stop("Unknown sites returned, consider importing first.")
}

```

# gel edna
```{r}
gelled_edna = unified_edna %>%
  mutate(filter_date = date) %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(comments_survey = str_c(comments_survey, collapse = ", "),
         start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         number_observers = count_observers(paste(observers_survey, collapse = ",")),
         uuid_name = paste0(visit_id, start_time, transect, detection_type),
         survey_id = ifelse(is.na(survey_id),
                            UUIDfromName("5113bb6e-8cff-4a2d-9910-904403736cfb", uuid_name),
                            survey_id)) %>%
  ungroup() %>%
  select(-fulcrum_id)
```

# subset edna
```{r}
# survey
subset_edna_survey = gelled_edna %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  filter(!is.na(survey_id))

# compare columns
compare_edna_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_edna_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_edna_survey, "survey_id", return_all = TRUE, report = "edna_survey")
upsert_edna_survey = bind_rows(tray$insert,
                               tray$update)

# edna
subset_edna = gelled_edna %>%
  select(any_of(colnames(db_edna))) %>%
  distinct() %>%
  filter(!is.na(edna_id))

# compare columns
compare_edna = compare_df_cols(db_edna %>%
                                  filter(FALSE) %>%
                                  collect(), subset_edna)

tray = compare_for_staging(db_edna %>% collect(), subset_edna, "edna_id", return_all = TRUE, report = "edna")
upsert_edna = bind_rows(tray$insert,
                        tray$update)

# anything to upsert?
x_edna = (nrow(upsert_edna_survey) > 0) | (nrow(upsert_edna) > 0)

```

# stage and commit edna
```{r}

if (x_edna) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_edna_survey = stage_to_temp(dbcon, db_survey, upsert_edna_survey)
      pointer = tbl(dbcon, temp_edna_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_edna = stage_to_temp(dbcon, db_edna, upsert_edna)
      pointer = tbl(dbcon, temp_edna)
      rows_upsert(db_edna, pointer, by="edna_id", in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      stop("Transaction failed: ", e$message)
    })
}

# refresh
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
```

## Aural chain
- aural / survey / visit / site / region / location

### 3 - Unify aural data

```{r}
unified_aural = clean_visit_info %>%
  left_join(clean_survey_info, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  right_join(clean_aural, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  filter(!is.na(site),
         !is.na(date))

if (nrow(unified_aural %>% filter(is.na(site_id))) > 0) {
  stop("Unknown sites returned, consider importing first.")
}

```

### 4 - Gelled aural data

```{r}
gelled_aural = unified_aural %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc),
         number_observers = count_observers(paste(observers_survey, collapse = ",")),
         comments_survey = str_c(comments_survey, collapse = ", "),
         uuid_name = paste0(visit_id, temp_survey_id, detection_type),
         survey_id = ifelse(is.na(survey_id), UUIDfromName("f7b367fb-bbb6-40a8-85db-07d2760e7b95", uuid_name), survey_id),
         group_id = cur_group_id()) %>%
  ungroup()

```

### 5 - Subset aural tables

```{r}

# survey
subset_aural_survey = gelled_aural %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_aural_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_aural_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_aural_survey, tbl_nkey('survey', mdc), return_all = TRUE, report = "aural_survey")
upsert_aural_survey = bind_rows(tray$insert,
                                tray$update)

# taxa
subset_aural_taxa = gelled_aural %>%
  select(taxon_aural) %>%
  drop_na(taxon_aural) %>%
  distinct() %>%
  rename(taxon_id = taxon_aural) %>%
  left_join(db_taxa %>% collect(), by = "taxon_id")

tray = compare_for_staging(db_taxa %>% collect(), subset_aural_taxa, "taxon_id", return_all = TRUE, report = "aural_taxa")
insert_aural_taxa = tray$insert

# aural
subset_aural = gelled_aural %>%
  select(any_of(colnames(db_aural))) %>%
  distinct() %>%
  drop_na(aural_id)

# compare columns
compare_aural = compare_df_cols(db_aural %>%
                                  filter(FALSE) %>%
                                  collect(), subset_aural)

tray = compare_for_staging(db_aural %>% collect(), subset_aural, tbl_pkey('aural', mdc), return_all = TRUE, report = "aural")
upsert_aural = bind_rows(tray$insert,
                         tray$update)

# anything to upsert?
x_aural = (nrow(upsert_aural_survey) > 0) | (nrow(insert_aural_taxa) > 0) | (nrow(upsert_aural) > 0)

```

### Stage and commit aural tables

```{r}

if (x_aural) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_aural_survey = stage_to_temp(dbcon, db_survey, upsert_aural_survey)
      pointer = tbl(dbcon, temp_aural_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_aural_taxa = stage_to_temp(dbcon, db_taxa, insert_aural_taxa)
      pointer = tbl(dbcon, temp_aural_taxa)
      rows_insert(db_taxa, pointer, by="taxon_id", in_place=TRUE, conflict = "ignore")
      
      temp_aural = stage_to_temp(dbcon, db_aural, upsert_aural)
      pointer = tbl(dbcon, temp_aural)
      rows_upsert(db_aural, pointer, by="aural_id", in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_aural = tbl(dbcon, Id("survey_data", "aural"))
```

## VES chain
- ves / survey / visit / site / region / country

### Unify ves data
```{r}

unified_ves = clean_visit_info %>%
  left_join(clean_survey_info, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  right_join(clean_ves, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  filter(!is.na(site),
         !is.na(date))

if (nrow(unified_ves %>% filter(is.na(site_id))) > 0) {
  stop("Unknown sites returned, consider importing first.")
}

```

### Gel ves data
```{r}
gelled_ves = unified_ves %>%
  group_by(transect,
           detection_type,
           visit_id) %>%
  mutate(start_time = find_time_range(c(start_time, end_time))$first_time,
         end_time = find_time_range(c(start_time, end_time))$last_time,
         start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc),
         number_observers = count_observers(paste(observers_survey, collapse = ",")),
         comments_survey = str_c(comments_survey, collapse = ", "),
         uuid_name = paste0(visit_id, temp_survey_id, detection_type),
         survey_id = ifelse(is.na(survey_id),
                            UUIDfromName("f7b367fb-bbb6-40a8-85db-07d2760e7b95", uuid_name),
                            survey_id)) %>%
  ungroup() %>%
  select(-fulcrum_id)

```

### 5 - Subset final ves tables

```{r}

# survey
subset_ves_survey = gelled_ves %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_ves_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_ves_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_ves_survey, tbl_nkey('survey', mdc), return_all = TRUE, report = "ves_survey")
upsert_ves_survey = bind_rows(tray$insert,
                             tray$update)

# taxa
subset_ves_taxa = gelled_ves %>%
  select(taxon_ves) %>%
  drop_na(taxon_ves) %>%
  distinct() %>%
  rename(taxon_id = taxon_ves) %>%
  left_join(db_taxa %>% collect(), by = "taxon_id")

tray = compare_for_staging(db_taxa %>% collect(), subset_ves_taxa, "taxon_id", return_all = TRUE, report = "ves_taxa")
insert_ves_taxa = tray$insert

# aural
subset_ves = gelled_ves %>%
  select(any_of(colnames(db_ves))) %>%
  distinct() %>%
  drop_na(ves_id)

# compare columns
compare_ves = compare_df_cols(db_ves %>%
                                  filter(FALSE) %>%
                                  collect(), subset_ves)

tray = compare_for_staging(db_ves %>% collect(), subset_ves, tbl_pkey('ves', mdc), return_all = TRUE, report = "ves")
upsert_ves = bind_rows(tray$insert,
                      tray$update)

x_ves = (nrow(upsert_ves_survey) > 0) | (nrow(insert_ves_taxa) > 0) | (nrow(upsert_ves) > 0)

```

### Stage and commit ves tables

```{r}
if (x_ves) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_ves_survey = stage_to_temp(dbcon, db_survey, upsert_ves_survey)
      pointer = tbl(dbcon, temp_ves_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_ves_taxa = stage_to_temp(dbcon, db_taxa, insert_ves_taxa)
      pointer = tbl(dbcon, temp_ves_taxa)
      rows_insert(db_taxa, pointer, by="taxon_id", in_place=TRUE, conflict = "ignore")
      
      temp_ves = stage_to_temp(dbcon, db_ves, upsert_ves)
      pointer = tbl(dbcon, temp_ves)
      rows_upsert(db_ves, pointer, by="ves_id", in_place=TRUE)
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
```

## Capture chain
- capture / survey / visit / site / region / location

```{r}

unified_capture = clean_visit_info %>%
  left_join(clean_survey_info, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  right_join(clean_capture, by = c("temp_visit_id" = "visit_fulcrum_id")) %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(tbl_keys("visit", mdc)) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  left_join(db_survey %>%
              select(tbl_keys("survey", mdc)) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = tbl_nkey("survey", mdc)) %>%
  filter(!is.na(site),
         !is.na(date)) %>%
  arrange(date, site, time_of_capture)

if (nrow(unified_capture %>% filter(is.na(site_id))) > 0) {
  stop("Unknown sites returned, consider importing first.")
}

```


### CMR table
```{r}

unified_cmr = unified_capture %>%
  filter(!is.na(local_cmr_id)) %>%
  select(local_cmr_id, taxon_cmr, site_id, date, capture_id) %>%
  left_join(db_cmr %>% collect(), by = c("local_cmr_id", "taxon_cmr", "site_id" = "site_id_tagged")) %>%
  arrange(date_tagged, date) %>%
  group_by(local_cmr_id, taxon_cmr, site_id) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  mutate(cmr_id = ifelse(is.na(cmr_id), capture_id, cmr_id),
         date_tagged = as.Date(ifelse(is.na(date_tagged), date, date_tagged)),
         id_type = ifelse(is.na(id_type), "pit_tag", id_type)) %>%
  rename(site_id_tagged = site_id)
  
subset_cmr = unified_cmr %>%
  arrange(date_tagged) %>%
  select(any_of(colnames(db_cmr)))

compare_cmr = compare_df_cols(db_cmr %>%
                                  filter(FALSE) %>%
                                  collect(), subset_cmr)

tray = compare_for_staging(db_cmr %>% collect(), subset_cmr, "cmr_id", return_all = TRUE, report = "cmr")

upsert_cmr = bind_rows(tray$insert,
                       tray$update)

```

# Gelled capture

```{r}
gelled_capture = unified_capture %>%
  left_join(unified_cmr %>%
              select(local_cmr_id, cmr_id),
            by = "local_cmr_id") %>%
  group_by(transect, detection_type, visit_id) %>%
  mutate(start_time = find_time_range(c(start_time, end_time, time_of_capture))$first_time,
         end_time = find_time_range(c(start_time, end_time, time_of_capture))$last_time,
         start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc),
         observers_survey = all_names <- observers_survey %>%
           paste(collapse = ",") %>%
           str_split(",\\s*") %>%
           unlist() %>%
           str_trim() %>%
           na.omit() %>%
           unique() %>%
           paste(collapse = ", "),
         number_observers = count_observers(paste(observers_survey, collapse = ",")),
         comments_survey = str_c(comments_survey, collapse = ", "),
         uuid_name = paste0(visit_id, transect, detection_type, start_time),
         survey_id = ifelse(is.na(survey_id),
                            UUIDfromName("f7b367fb-bbb6-40a8-85db-07d2760e7b95", uuid_name),
                            survey_id)) %>%
  ungroup() %>%
  arrange(date, site, time_of_capture) %>%
  select(-temp_survey_id) %>%
  drop_na(visit_id)

```

### Samples capture

```{r}
unified_sample = gelled_capture %>%
  rename(bd = bd_swab_id,
         genetic = genetic_id,
         microbiome = microbiome_swab_id,
         amp = amp_id,
         mucosome = mucosome_id,
         bacterial = bacterial_swab_id,
         antibody = antibody_id) %>%
  pivot_longer(cols = c("bd",
                        "genetic",
                        "microbiome",
                        "amp",
                        "mucosome",
                        "bacterial",
                        "antibody"),
               names_to = "sample_type",
               values_to = "sample_name") %>%
  select(sample_name,
         sample_type,
         capture_id) %>%
  filter(!is.na(sample_name)) %>%
  group_by(sample_name, sample_type) %>%
  mutate(row_num = row_number(),
         dupe = ifelse(n() > 1, TRUE, FALSE),
         sample_name_conflict = ifelse(dupe,
                                         sample_name,
                                         NA_character_)) %>%
  ungroup() %>%
  mutate(sample_name = ifelse(dupe,
                              paste0(sample_name, "_", letters[row_num]),
                              sample_name)) %>%
  select(-dupe,
         -row_num)

gelled_sample = unified_sample %>%
  left_join(db_sample %>%
              select(-capture_id) %>%
              collect(), by = c("sample_name", "sample_type")) %>%
  mutate(uuid_name = paste0(sample_name, sample_type),
         sample_id = ifelse(is.na(sample_id), UUIDfromName("1208e62f-d3a1-462c-984f-0bf1f43f5837", uuid_name), sample_id))

```


### 5 - Subset final capture tables

```{r}
# survey
subset_capture_survey = gelled_capture %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  filter(!is.na(survey_id))

# compare columns
compare_capture_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture_survey)

peace = get_dupes(subset_capture_survey, detection_type, transect, visit_id, start_time)
tbl_nkey('survey', mdc)

tray = compare_for_staging(db_survey %>% collect(), subset_capture_survey, tbl_pkey('survey', mdc), return_all = TRUE, report = "capture_survey")
upsert_capture_survey = bind_rows(tray$insert,
                                  tray$update)

# taxa
subset_capture_taxa = gelled_capture %>%
  select(taxon_capture) %>%
  drop_na(taxon_capture) %>%
  distinct() %>%
  rename(taxon_id = taxon_capture) %>%
  left_join(db_taxa %>% collect(), by = "taxon_id")

tray = compare_for_staging(db_taxa %>% collect(), subset_capture_taxa, "taxon_id", return_all = TRUE, report = "capture_taxa")
insert_capture_taxa = tray$insert

# capture
subset_capture = gelled_capture %>%
  select(any_of(colnames(db_capture))) %>%
  distinct() %>%
  filter(!is.na(capture_id))

# compare columns
compare_capture = compare_df_cols(db_capture %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture)


tray = compare_for_staging(db_capture %>% collect(), subset_capture, tbl_pkey('capture', mdc), return_all = TRUE, report = "capture")
upsert_capture = bind_rows(tray$insert,
                           tray$update)

subset_sample = gelled_sample %>%
  select(any_of(colnames(db_sample))) %>%
  distinct() %>%
  filter(!is.na(sample_id))

compare_sample = compare_df_cols(db_sample %>%
                                  filter(FALSE) %>%
                                  collect(), subset_sample)


tray = compare_for_staging(db_sample %>% collect(), subset_sample, "sample_id", return_all = TRUE, report = "sample")
peace = compare_updates(tray)
upsert_sample = bind_rows(tray$insert,
                          tray$update)


if (nrow(tray$update) > 0) {
  warning("Sample updates may indicate duplicate capture_ids. Investigation recommended")
}

x_capture = (nrow(upsert_capture_survey) > 0) | (nrow(insert_capture_taxa) > 0) | (nrow(upsert_capture) > 0 | nrow(upsert_cmr) > 0 | nrow(upsert_sample) > 0)


```

### Stage and commit capture tables

```{r}
if (x_capture) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_cmr = stage_to_temp(dbcon, db_cmr, upsert_cmr)
      pointer = tbl(dbcon, temp_cmr)
      rows_upsert(db_cmr, pointer, by="cmr_id", in_place=TRUE)
      
      temp_capture_survey = stage_to_temp(dbcon, db_survey, upsert_capture_survey)
      pointer = tbl(dbcon, temp_capture_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_capture_taxa = stage_to_temp(dbcon, db_taxa, insert_capture_taxa)
      pointer = tbl(dbcon, temp_capture_taxa)
      rows_insert(db_taxa, pointer, by="taxon_id", in_place=TRUE, conflict = "ignore")
      
      temp_capture = stage_to_temp(dbcon, db_capture, upsert_capture)
      pointer = tbl(dbcon, temp_capture)
      rows_upsert(db_capture, pointer, by="capture_id", in_place=TRUE)
      
      temp_sample = stage_to_temp(dbcon, db_sample, upsert_sample)
      pointer = tbl(dbcon, temp_sample)
      rows_upsert(db_sample, pointer, by="sample_id", in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

# reload
db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
```

```{r}
dbDisconnect(dbcon)
```