---
title: "sn_append_dpoo"
format: html
---

# Setup

```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to RIBBiTR DB
dbcon <- hopToDB("wibbitr")

## Connect to SN amphibians DB
sncon <- hopToDB("amphibians")

## Pull metadata from database
mdc = tbl(dbcon, Id("public", "all_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

## Point to local data directory
ddir = Sys.getenv("data_dir")  # data directory
# Keeping .csv files in a central directory. Naming convention uses download date to distinguish batches.
wddir = here(ddir, "sierra") # working data directory

```

# table pointers
```{r}
# pull relevant chain tables from RIBBiTR DB
db_sample = tbl(dbcon, Id("survey_data", "sample"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))

# pull relevant chain tables from amphibians DB
sn_capture = tbl(sncon, "capture_survey")
sn_ves = tbl(sncon, "visual_survey")
sn_survey = tbl(sncon, "survey")
sn_visit = tbl(sncon, "visit")
sn_site = tbl(sncon, "site")

sn_surveyor = tbl(sncon, "surveyor")
sn_ss = tbl(sncon, "survey_surveyor")

local_tz = "America/Los_Angeles"

```


# identify rana muscosa sites
```{r}
ca_sites = db_site %>%
  left_join(db_region, by = "region_id") %>%
  filter(region == "california") %>%
  collect()

rm = ca_sites %>%
  filter(grepl("^kaweah", geographic_area) |
           grepl("^kern", geographic_area) |
           grepl("^kings_sf", geographic_area)) %>%
  pull(site_id)

rs = ca_sites %>%
  filter(!(site_id %in% rm))

rr_sites = ca_sites %>%
  mutate(rm = site_id %in% rm,
         rs = site_id %in% rs) %>%
  select(site_id,
         rm,
         rs)

distinguish_muscosa_sierrae = function(data, taxon_column) {
  data_out = data %>%
    left_join(rr_sites, by = "site_id") %>%
    mutate({{taxon_column}} := ifelse({{taxon_column}} == "rana_muscosa",
                                   ifelse(rm,
                                          "rana_muscosa",
                                          "rana_sierrae"),
                                   {{taxon_column}})) %>%
    select(-rm,
           -rs)
}

```

# clean data

```{r}
clean_site = sn_site %>%
  rename(site = id,
         site_name_alt = name,
         area_sqr_m = area,
         depth_m = depth, site_elevation_m = elevation,
         geographic_area = drainage,
         site_utme = utme,
         site_utmn = utmn) %>%
  mutate(geographic_area_type = "drainage",
         region = "california",
         site_utm_zone = case_when(
           wilderness == "desolation" ~ 10,
           .default = 11),
         site_name_alt = ifelse(site_name_alt == "", NA_character_, site_name_alt),
         site = as.character(site)) %>%
  collect()

clean_survey_surveyor = sn_ss %>%
  left_join(sn_surveyor, by = c("surveyor_id" = "id")) %>%
  rename(sn_survey_id = survey_id) %>%
  group_by(sn_survey_id) %>%
  collect() %>%
  mutate(name = ifelse(name == "UNSPECIFIED", "other", name)) %>%
  summarise(observers_survey = paste(name, collapse = ", "),
            number_observers = n())

clean_visit = sn_visit %>%
  rename(sn_visit_id = id,
         site = site_id,
         date = visit_date,
         comments_visit = comment) %>%
  mutate(site = as.character(site),
         visit_lab = "snarl",
         project_id = "mlrg",
         time_of_day = "day",
         visit_status = as.character(visit_status),
         comments_visit = ifelse(comments_visit == "", NA_character_, comments_visit)) %>%
  collect()

clean_survey = sn_survey %>%
  rename(sn_survey_id = id,
         sn_visit_id = visit_id,
         detection_type = survey_type,
         air_temp_c = air_temp,
         water_temp_c = water_temp,
         comments_survey = comment) %>%
  mutate(detection_type = as.character(detection_type),
         survey_quality = as.character(survey_quality),
         wind = as.character(wind),
         sky = as.character(sky)) %>%
  collect() %>%
  left_join(clean_survey_surveyor, by = "sn_survey_id") %>%
  mutate(detection_subtype = case_match(detection_type,
                                     "swab" ~ "swab",
                                     "cmr" ~ "cmr",
                                     .default = NA_character_),
         detection_type = case_match(detection_type,
                                     "visual" ~ "visual",
                                     "swab" ~ "capture",
                                     "cmr" ~ "capture"),
         comments_survey = ifelse(comments_survey == "", NA_character_, comments_survey),
         transect = NA_character_)

clean_capture = sn_capture %>%
  left_join(sn_surveyor, by = c("surveyor_id" = "id")) %>%
  rename(capture_id = id,
         sn_survey_id = survey_id,
         life_stage = capture_life_stage,
         microhabitat_type = location,
         capture_utme = utme,
         capture_utmn = utmn,
         svl_mm = length,
         body_mass_g = weight,
         bd_swab_id = swab_id,
         comments_capture = comment,
         observer_capture = name) %>%
  mutate(observer_capture = ifelse(observer_capture == "UNSPECIFIED", NA_character_, observer_capture),
         life_stage = as.character(life_stage),
         capture_animal_state = as.character(capture_animal_state),
         microhabitat_type = as.character(microhabitat_type),
         taxon_capture = case_match(species,
                                    "buca" ~ "anaxyrus_canorus",
                                    "hyre" ~ "pseudacris_regilla",
                                    "ramu" ~ "rana_muscosa",
                                    "thel" ~ "thamnophis_elegans",
                                    "raca" ~ "rana_catesbeiana",
                                    "bubo" ~ "anaxyrus_boreas",
                                    "thco" ~ "thamnophis_couchii",
                                    "amma" ~ "ambystoma_macrodactylum",
                                    "thsi" ~ "thamnophis_sirtalis",
                                    "tato" ~ "taricha_torosa",
                                    "clma" ~ "actinemys_marmorata"),
         sex = case_match(sex,
                          "f" ~ "female",
                          "m" ~ "male",
                          .default = NA_character_),
         local_cmr_id = as.character(pit_tag_ref),
         marked = ifelse(is.na(local_cmr_id), FALSE, TRUE),
         capture_type = case_when(
           !is.na(local_cmr_id) & tag_new ~ "new",
           !is.na(local_cmr_id) & !tag_new ~ "recapture",
           .default = NA_character_)) %>%
  collect()

clean_ves = sn_ves %>%
  rename(ves_id = id,
         sn_survey_id = survey_id,
         life_stage = visual_life_stage,
         count_ves = count,
         comments_ves = comment,
         microhabitat_type = location) %>%
  mutate(taxon_ves = case_match(species,
                                "buca" ~ "anaxyrus_canorus",
                                "hyre" ~ "pseudacris_regilla",
                                "ramu" ~ "rana_muscosa",
                                "thel" ~ "thamnophis_elegans",
                                "raca" ~ "rana_catesbeiana",
                                "bubo" ~ "anaxyrus_boreas",
                                "thco" ~ "thamnophis_couchii",
                                "amma" ~ "ambystoma_macrodactylum",
                                "thsi" ~ "thamnophis_sirtalis",
                                "tato" ~ "taricha_torosa",
                                "clma" ~ "actinemys_marmorata"),
         life_stage = as.character(life_stage),
         microhabitat_type = as.character(microhabitat_type),
         visual_animal_state = as.character(visual_animal_state)) %>%
  collect()

```

# sites
```{r}
gelled_site = clean_visit %>%
  select(site) %>%
  distinct() %>%
  left_join(clean_site, by = "site") %>%
  left_join(db_site %>%
              select(site_id,
                     site) %>%
              collect(), by = "site") %>%
  mutate(site_id = ifelse(is.na(site_id), UUIDfromName("d5df2751-0b18-4d2b-a14e-174682685c86", site), site_id)) %>%
  left_join(db_region %>%
              collect(),
            by = "region")

```

## subset site
```{r}
subset_site = gelled_site %>%
  select(any_of(colnames(db_site))) %>%
  distinct() %>%
  drop_na(site_id)

compare_site = compare_df_cols(db_site %>%
                                  filter(FALSE) %>%
                                  collect(), subset_site)

tray = compare_for_staging(db_site %>% collect(), subset_site, "site_id", return_all = TRUE, report = "site")
upsert_site = bind_rows(tray$insert,
                       tray$update)

peace = compare_updates(tray)

# upsert visit?
x_site = (nrow(upsert_site) > 0)

```
## upsert site

```{r}
if (x_site) {
  temp_site = stage_to_temp(dbcon, db_site, upsert_site)
  pointer = tbl(dbcon, temp_site)
  db_site = rows_upsert(db_site, pointer, by="site_id", in_place=TRUE)
}

db_site = tbl(dbcon, Id("survey_data", "site"))
```

# visits
```{r}
gelled_visit = clean_visit %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(date,
                     time_of_day,
                     site_id,
                     visit_id) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  mutate(uuid_name = paste0(site, date, time_of_day),
         visit_id = ifelse(is.na(visit_id), UUIDfromName("29fabb0b-bc7d-4430-901a-befebe31d2de", uuid_name), visit_id))

```

## Generate stats for log
```{r}
dblog = list()
dblog$date_min = min(gelled_visit$date)
dblog$date_max = max(gelled_visit$date)
dblog$site = gelled_visit$site %>% unique()
dblog$site_id = gelled_visit$site_id %>% unique()
dblog$region = db_site %>%
  left_join(db_region, by = "region_id") %>%
  filter(site %in% dblog$site) %>%
  pull(region) %>%
  unique()
```

## subset visit
```{r}
subset_visit = gelled_visit %>%
  select(any_of(colnames(db_visit))) %>%
  distinct() %>%
  drop_na(visit_id)

compare_visit = compare_df_cols(db_visit %>%
                                  filter(FALSE) %>%
                                  collect(), subset_visit)

tray = compare_for_staging(db_visit %>%
                             filter(date >= dblog$date_min,
                                    site_id %in% dblog$site_id) %>%
                             collect(),
                           subset_visit, tbl_pkey('visit', mdc), return_all = TRUE, report = "visit")

upsert_visit = bind_rows(tray$insert,
                        tray$update)

# # get visit_id
# vids = subset_visit %>%
#   select(visit_id) %>%
#   distinct() %>%
#   pull(visit_id)
# 
# sn_vids = dput(vids)

# upsert visit?
x_visit = (nrow(upsert_visit) > 0)

```

## upsert visits
```{r}
if (x_visit) {
  temp_visit = stage_to_temp(dbcon, db_visit, upsert_visit)
  pointer = tbl(dbcon, temp_visit)
  db_visit = rows_upsert(db_visit, pointer, by="visit_id", in_place=TRUE)
}

db_visit = tbl(dbcon, Id("survey_data", "visit"))

```

# Environmental chain
```{r}
unified_env = clean_survey %>%
  filter(!(is.na(wind) &
           is.na(sky) &
           is.na(air_temp_c) &
           is.na(water_temp_c) &
           is.na(fish))) %>%
  left_join(clean_visit, by = "sn_visit_id") %>%
  left_join(db_site %>%
              select(site,
                     site_id) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(site_id,
                     date,
                     time_of_day,
                     visit_id) %>%
              collect(),
            by = c("site_id", "date", "time_of_day")) %>%
  mutate(detection_type = "environmental") %>%
  distinct() %>%
  select(-description,
         -survey_quality) %>%
  left_join(db_survey %>%
              select(survey_id, visit_id, detection_type) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = c("visit_id", "detection_type"))
```

```{r}
gelled_env = unified_env %>%
  group_by(visit_id, detection_type) %>%
  mutate(start_time = find_time_range(c(air_time, water_time))$first_time,
         end_time = find_time_range(c(air_time, water_time))$last_time,
         start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc),
         observers_survey = paste(observers_survey, collapse = ", "),
         number_observers = count_observers(paste(observers_survey, collapse = ",")),
         comments_survey = na.omit(comments_survey)[1],
         uuid_name = paste0(visit_id, detection_type),
         survey_id = ifelse(is.na(survey_id),
                            UUIDfromName("831e1d81-169a-4574-911a-a6cf3792cc0c", uuid_name),
                            survey_id)) %>%
  ungroup() %>%
  mutate(uuid_name = paste0(survey_id, air_time, air_temp_c, water_time, water_temp_c),
         environmental_id = UUIDfromName("f6a06e83-5e10-4103-9af7-1c97cac30394", uuid_name)) %>%
  arrange(environmental_id,
          fish) %>%
  group_by(environmental_id) %>%
  slice_head(n = 1) %>%
  ungroup()
```

## Subset env

```{r}
# survey
subset_env_survey = gelled_env %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_env_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_env_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_env_survey, tbl_nkey("survey", mdc), return_all = TRUE, report = "env_survey")

upsert_env_survey = bind_rows(tray$insert,
                             tray$update)

# aural
subset_env = gelled_env%>%
  select(any_of(colnames(db_env))) %>%
  distinct() %>%
  drop_na(environmental_id)

# compare columns
compare_env = compare_df_cols(db_env %>%
                                  filter(FALSE) %>%
                                  collect(), subset_env)

tray = compare_for_staging(db_env %>% collect(), subset_env, "environmental_id", return_all = TRUE, report = "env")
upsert_env = bind_rows(tray$insert,
                        tray$update)

# anything to upsert?
x_env = (nrow(upsert_env_survey) > 0) | (nrow(upsert_env) > 0)

```

## Stage and commit env tables
```{r}

if (x_env) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_env_survey = stage_to_temp(dbcon, db_survey, upsert_env_survey)
      pointer = tbl(dbcon, temp_env_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_env = stage_to_temp(dbcon, db_env, upsert_env)
      pointer = tbl(dbcon, temp_env)
      rows_upsert(db_env, pointer, by="environmental_id", in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
```

# VES chain
## Unify ves
```{r}
unified_ves = clean_ves %>%
  full_join(clean_survey, by = "sn_survey_id") %>%
  filter(detection_type == "visual") %>%
  left_join(clean_visit, by = "sn_visit_id") %>%
  left_join(db_site %>%
              select(site,
                     site_id) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(site_id,
                     date,
                     time_of_day,
                     visit_id) %>%
              collect(),
            by = c("site_id", "date", "time_of_day")) %>%
  left_join(db_survey %>%
              select(survey_id, visit_id, detection_type, transect, start_time) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = c("visit_id", "detection_type", "transect", "start_time")) %>%
  filter(!is.na(site),
         !is.na(date)) %>%
  distinguish_muscosa_sierrae(taxon_ves)
```

### Gel ves 
```{r}
gelled_ves = unified_ves %>%
  group_by(transect,
           detection_type,
           start_time,
           visit_id) %>%
  mutate(observer_ves = observers_survey,
         start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc),
         number_observers = count_observers(paste(observers_survey, collapse = ",")),
         comments_survey = na.omit(comments_survey)[1],
         uuid_name = paste0(visit_id, detection_type, transect, start_time),
         survey_id = ifelse(is.na(survey_id),
                            UUIDfromName("831e1d81-169a-4574-911a-a6cf3792cc0c", uuid_name),
                            survey_id)) %>%
  ungroup()

```

## Subset ves
```{r}

# survey
subset_ves_survey = gelled_ves %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  drop_na(survey_id)

# compare columns
compare_ves_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_ves_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_ves_survey, tbl_nkey('survey', mdc), return_all = TRUE, report = "ves_survey")
upsert_ves_survey = bind_rows(tray$insert,
                             tray$update)

# taxa
subset_ves_taxa = gelled_ves %>%
  select(taxon_ves) %>%
  drop_na(taxon_ves) %>%
  distinct() %>%
  rename(taxon_id = taxon_ves) %>%
  left_join(db_taxa %>% collect(), by = "taxon_id")

tray = compare_for_staging(db_taxa %>% collect(), subset_ves_taxa, "taxon_id", return_all = TRUE, report = "ves_taxa")
insert_ves_taxa = tray$insert

# aural
subset_ves = gelled_ves %>%
  select(any_of(colnames(db_ves))) %>%
  distinct() %>%
  drop_na(ves_id)

# compare columns
compare_ves = compare_df_cols(db_ves %>%
                                  filter(FALSE) %>%
                                  collect(), subset_ves)

tray = compare_for_staging(db_ves %>% collect(), subset_ves, tbl_pkey('ves', mdc), return_all = TRUE, report = "ves")
upsert_ves = bind_rows(tray$insert,
                      tray$update)

x_ves = (nrow(upsert_ves_survey) > 0) | (nrow(insert_ves_taxa) > 0) | (nrow(upsert_ves) > 0)

```

### Stage and commit ves

```{r}
if (x_ves) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_ves_survey = stage_to_temp(dbcon, db_survey, upsert_ves_survey)
      pointer = tbl(dbcon, temp_ves_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_ves_taxa = stage_to_temp(dbcon, db_taxa, insert_ves_taxa)
      pointer = tbl(dbcon, temp_ves_taxa)
      rows_insert(db_taxa, pointer, by="taxon_id", in_place=TRUE, conflict = "ignore")
      
      temp_ves = stage_to_temp(dbcon, db_ves, upsert_ves)
      pointer = tbl(dbcon, temp_ves)
      rows_upsert(db_ves, pointer, by="ves_id", in_place=TRUE)
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
```

# Capture chain
## Unify capture
```{r}
unified_capture = clean_capture %>%
  full_join(clean_survey, by = "sn_survey_id") %>%
  filter(detection_type == "capture") %>%
  left_join(clean_visit, by = "sn_visit_id") %>%
  left_join(db_site %>%
              select(site,
                     site_id) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(site_id,
                     date,
                     time_of_day,
                     visit_id) %>%
              collect(),
            by = c("site_id", "date", "time_of_day")) %>%
  left_join(db_survey %>%
              select(survey_id, visit_id, detection_type, detection_subtype, transect, start_time, observers_survey) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = c("visit_id", "detection_type", "detection_subtype", "transect", "start_time", "observers_survey")) %>%
  filter(!is.na(site),
         !is.na(date)) %>%
  distinguish_muscosa_sierrae(taxon_capture)
```

### CMR table
```{r}
unified_cmr = unified_capture %>%
  filter(!is.na(local_cmr_id)) %>%
  rename(taxon_cmr = taxon_capture) %>%
  select(local_cmr_id, taxon_cmr, site_id, date, start_time, capture_id, capture_type) %>%
  left_join(db_cmr %>%
              select(cmr_id,
                     local_cmr_id,
                     date_tagged,
                     site_id_tagged,
                     id_type) %>%
              collect(), by = "local_cmr_id") %>%
  arrange(local_cmr_id, date_tagged, date, start_time, capture_type) %>%
  group_by(local_cmr_id) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  mutate(cmr_id = ifelse(is.na(cmr_id), capture_id, cmr_id),
         date_tagged = as.Date(ifelse(is.na(date_tagged), date, date_tagged)),
         id_type = ifelse(is.na(id_type), "pit_tag", id_type),
         site_id_tagged = ifelse(is.na(site_id_tagged), site_id, site_id_tagged))
  
subset_cmr = unified_cmr %>%
  arrange(date_tagged) %>%
  select(any_of(colnames(db_cmr)))

compare_cmr = compare_df_cols(db_cmr %>%
                                  filter(FALSE) %>%
                                  collect(), subset_cmr)

tray = compare_for_staging(db_cmr %>% collect(), subset_cmr, "cmr_id", return_all = TRUE, report = "cmr")

upsert_cmr = bind_rows(tray$insert,
                       tray$update)

```

### Gel capture 
```{r}
gelled_capture = unified_capture %>%
  left_join(unified_cmr %>%
              select(local_cmr_id, cmr_id),
            by = "local_cmr_id") %>%
  arrange(date, site, start_time, survey_quality) %>%
  group_by(visit_id,
           detection_type,
           detection_subtype,
           transect,
           start_time,
           observers_survey) %>%
  mutate(end_time = as_hms(max(end_time)),
         start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc),
         number_observers = count_observers(paste(observers_survey, collapse = ",")),
         comments_survey = na.omit(comments_survey)[1],
         survey_quality = first(survey_quality),
         description = na.omit(description)[1],
         uuid_name = paste0(visit_id, detection_type, detection_subtype, transect, start_time, observers_survey),
         survey_id = ifelse(is.na(survey_id),
                            UUIDfromName("831e1d81-169a-4574-911a-a6cf3792cc0c", uuid_name),
                            survey_id)) %>%
  ungroup() %>%
  timestamp_of_capture_utc(tz = local_tz) %>%
  arrange(date, site)
```

### Samples capture
```{r}
unified_sample = gelled_capture %>%
  rename(bd = bd_swab_id) %>%
  pivot_longer(cols = c("bd"),
               names_to = "sample_type",
               values_to = "sample_name") %>%
  # pivot_longer(cols = c("bd",
  #                       "genetic",
  #                       "microbiome",
  #                       "amp",
  #                       "mucosome",
  #                       "bacterial",
  #                       "antibody"),
  #              names_to = "sample_type",
  #              values_to = "sample_name") %>%
  select(sample_name,
         sample_type,
         capture_id) %>%
  filter(!is.na(sample_name)) %>%
  group_by(sample_name, sample_type) %>%
  mutate(row_num = row_number(),
         dupe = ifelse(n() > 1, TRUE, FALSE)) %>%
  ungroup()

gelled_sample = unified_sample %>%
  left_join(db_sample %>%
              rename(capture_id_old = capture_id) %>%
              collect(), by = c("sample_name", "sample_type")) %>%
  mutate(uuid_name = paste0(sample_name, sample_type),
         sample_id = ifelse(is.na(sample_id), UUIDfromName("1208e62f-d3a1-462c-984f-0bf1f43f5837", uuid_name), sample_id))

# constrained_sample = gelled_sample %>%
#   resolve_sample_conflicts(db_sample)

```

### 5 - Subset capture tables

```{r}
# survey
subset_capture_survey = gelled_capture %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  filter(!is.na(survey_id))

# compare columns
compare_capture_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture_survey)

peace = get_dupes(subset_capture_survey, "survey_id")

tray = compare_for_staging(db_survey %>% collect(), subset_capture_survey, "survey_id", return_all = TRUE, report = "capture_survey")

sn_sids = bind_rows(tray$duplicate,
                    tray$update) %>%
  pull(survey_id)

upsert_capture_survey = bind_rows(tray$insert,
                                  tray$update)

# taxa
subset_capture_taxa = gelled_capture %>%
  select(taxon_capture) %>%
  drop_na(taxon_capture) %>%
  distinct() %>%
  rename(taxon_id = taxon_capture) %>%
  left_join(db_taxa %>% collect(), by = "taxon_id")

tray = compare_for_staging(db_taxa %>% collect(), subset_capture_taxa, "taxon_id", return_all = TRUE, report = "capture_taxa")
insert_capture_taxa = tray$insert

# capture
subset_capture = gelled_capture %>%
  select(any_of(colnames(db_capture))) %>%
  distinct() %>%
  filter(!is.na(capture_id))

# compare columns
compare_capture = compare_df_cols(db_capture %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture)


tray = compare_for_staging(db_capture %>% collect(), subset_capture, tbl_pkey('capture', mdc), return_all = TRUE, report = "capture")
upsert_capture = bind_rows(tray$insert,
                           tray$update)

subset_sample = gelled_sample %>%
  select(any_of(colnames(db_sample))) %>%
  distinct() %>%
  filter(!is.na(sample_id))

compare_sample = compare_df_cols(db_sample %>%
                                  filter(FALSE) %>%
                                  collect(), subset_sample)


tray = compare_for_staging(db_sample %>% collect(), subset_sample, "sample_id", return_all = TRUE, report = "sample")
upsert_sample = bind_rows(tray$insert,
                          tray$update)

x_capture = (nrow(upsert_capture_survey) > 0) | (nrow(insert_capture_taxa) > 0) | (nrow(upsert_capture) > 0 | nrow(upsert_cmr) > 0 | nrow(upsert_sample) > 0)
```

### Stage and commit capture tables

```{r}
if (x_capture) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      temp_cmr = stage_to_temp(dbcon, db_cmr, upsert_cmr)
      pointer = tbl(dbcon, temp_cmr)
      rows_upsert(db_cmr, pointer, by="cmr_id", in_place=TRUE)
      
      temp_capture_survey = stage_to_temp(dbcon, db_survey, upsert_capture_survey)
      pointer = tbl(dbcon, temp_capture_survey)
      rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      temp_capture_taxa = stage_to_temp(dbcon, db_taxa, insert_capture_taxa)
      pointer = tbl(dbcon, temp_capture_taxa)
      rows_insert(db_taxa, pointer, by="taxon_id", in_place=TRUE, conflict = "ignore")
      
      temp_capture = stage_to_temp(dbcon, db_capture, upsert_capture)
      pointer = tbl(dbcon, temp_capture)
      rows_upsert(db_capture, pointer, by="capture_id", in_place=TRUE)
      
      temp_sample = stage_to_temp(dbcon, db_sample, upsert_sample)
      pointer = tbl(dbcon, temp_sample)
      rows_upsert(db_sample, pointer, by="sample_id", in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

# reload
db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
```


```{r}
dbDisconnect(dbcon)
dbDisconnect(sncon)
```