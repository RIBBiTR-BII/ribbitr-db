---
title: "sn_append_dpoo"
format: html
---

# Setup

## connections
```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr, igraph)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to RIBBiTR DB
dbcon = hopToDB("wibbitr")

## Connect to SN amphibians DB
sncon = hopToDB("amphibians")

## Pull metadata from database
mdc = tbl(dbcon, Id("public", "all_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

## Point to local data directory
ddir = Sys.getenv("data_dir")  # data directory
# Keeping .csv files in a central directory. Naming convention uses download date to distinguish batches.
wddir = here(ddir, "sierra", "2025-10-06") # working data directory

```

## table pointers
```{r}
# pull relevant chain tables from RIBBiTR DB
db_sample = tbl(dbcon, Id("survey_data", "sample"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))

# pull relevant chain tables from amphibians DB
sn_capture = tbl(sncon, "capture_survey")
sn_ves = tbl(sncon, "visual_survey")
sn_survey = tbl(sncon, "survey")
sn_visit = tbl(sncon, "visit")
sn_site = tbl(sncon, "site")

sn_surveyor = tbl(sncon, "surveyor")
sn_survey_surveyor = tbl(sncon, "survey_surveyor")

local_tz = "America/Los_Angeles"

```

## CSV files
```{r}
#| include: false

raw_sample_2022 = read_csv(here(wddir, "2022_SierraNevada_sampleData_Lindauer_220929.csv"))
raw_sample_2023 = read_csv(here(wddir, "2023_SierraNevada_sampleData_Lindauer_231116_pits.csv"))
raw_sample_2024 = read_csv(here(wddir, "2024_SierraNevada_sampleData_Lindauer_241229.csv"))

raw_edna_2022 = read_csv(here(wddir, "edna_sierra_2022_fullData_230228_lindauer.csv"))
raw_edna_2023 = read_csv(here(wddir, "edna_sierra_2023_fullData_251010_lindauer.csv"))

```

## identify rana muscosa sites
```{r}
ca_sites = db_site %>%
  left_join(db_region, by = "region_id") %>%
  filter(region == "california") %>%
  collect()

rm = ca_sites %>%
  filter(grepl("^kaweah", geographic_area) |
           grepl("^kern", geographic_area) |
           grepl("^kings_sf", geographic_area)) %>%
  pull(site_id)

rs = ca_sites %>%
  filter(!(site_id %in% rm))

rr_sites = ca_sites %>%
  mutate(rm = site_id %in% rm,
         rs = site_id %in% rs) %>%
  select(site_id,
         rm,
         rs)

distinguish_muscosa_sierrae = function(data, taxon_column) {
  data_out = data %>%
    left_join(rr_sites, by = "site_id") %>%
    mutate({{taxon_column}} := ifelse({{taxon_column}} == "rana_muscosa",
                                   ifelse(rm,
                                          "rana_muscosa",
                                          "rana_sierrae"),
                                   {{taxon_column}})) %>%
    select(-rm,
           -rs)
}

```

# Clean data

```{r}
# clean_site = sn_site %>%
#   rename(site = id,
#          site_name_alt = name,
#          area_sqr_m = area,
#          depth_m = depth, site_elevation_m = elevation,
#          geographic_area = drainage,
#          site_utme = utme,
#          site_utmn = utmn) %>%
#   mutate(geographic_area_type = "drainage",
#          region = "california",
#          site_utm_zone = case_when(
#            wilderness == "desolation" ~ 10,
#            .default = 11),
#          site_name_alt = ifelse(site_name_alt == "", NA_character_, site_name_alt),
#          site = as.character(site)) %>%
#   collect()
# 
clean_survey_surveyor = sn_survey_surveyor %>%
  left_join(sn_surveyor, by = c("surveyor_id" = "id")) %>%
  rename(sn_survey_id = survey_id) %>%
  group_by(sn_survey_id) %>%
  collect() %>%
  mutate(name = ifelse(name == "UNSPECIFIED", "other", name)) %>%
  summarise(observers_survey = paste(name, collapse = ", "),
            number_observers = n())
# 
# clean_visit = sn_visit %>%
#   rename(sn_visit_id = id,
#          site = site_id,
#          date = visit_date,
#          comments_visit = comment) %>%
#   mutate(site = as.character(site),
#          visit_lab = "snarl",
#          project_id = "mlrg",
#          time_of_day = "day",
#          visit_status = as.character(visit_status),
#          comments_visit = ifelse(comments_visit == "", NA_character_, comments_visit)) %>%
#   collect()
# 

clean_survey = sn_survey %>%
  rename(sn_survey_id = id,
         sn_visit_id = visit_id,
         detection_type = survey_type,
         air_temp_c = air_temp,
         water_temp_c = water_temp,
         comments_survey = comment) %>%
  mutate(detection_type = as.character(detection_type),
         survey_quality = as.character(survey_quality),
         wind = as.character(wind),
         sky = as.character(sky)) %>%
  collect() %>%
  left_join(clean_survey_surveyor, by = "sn_survey_id") %>%
  mutate(detection_subtype = case_match(detection_type,
                                     "swab" ~ "swab",
                                     "cmr" ~ "cmr",
                                     .default = NA_character_),
         detection_type = case_match(detection_type,
                                     "visual" ~ "visual",
                                     "swab" ~ "capture",
                                     "cmr" ~ "capture"),
         comments_survey = ifelse(comments_survey == "", NA_character_, comments_survey),
         transect = NA_character_)

# temperaures
f_to_c = function(x) {
  (x - 32) * 5/9	
}

clean_capture = bind_rows(raw_sample_2022 %>%
                            mutate(amp_id = mucosome_id),
                         raw_sample_2023 %>%
                           mutate(tag_new = ifelse(tag_new == 0, FALSE, tag_new),
                                  tag_new = as.logical(tag_new)),
                         raw_sample_2024) %>%
  rename(site = site_id,
         date = visit_date,
         sn_survey_id = survey_id,
         sn_visit_id = visit_id,
         life_stage = capture_life_stage,
         microhabitat_type = location,
         microhabitat_detailed = substrate_type,
         capture_utme = utme,
         capture_utmn = utmn,
         svl_mm = length,
         body_mass_g = weight,
         body_and_bag_mass_g = total_weight,
         bag_mass_g = bag_weight,
         body_temp_c = body_temperature,
         time_of_capture = frog_temperature_time,
         observer_sample = swabber_id,
         bd = bd_swab_id,
         genetic = toe_tip_id,
         mucosome = mucosome_id,
         amp = amp_id,
         antibody = ig_id,
         bacterial = microbiome_id_culturing,
         microbiome = microbiome_id_genetic,
         comments_survey = general_survey_comment) %>%
  unite(comments_capture, c("capture_comment", "ribbitr_sample_comments", "ribbitr_other"), sep="; ", remove = TRUE, na.rm = TRUE) %>%
  mutate(site = as.character(site),
         date = mdy(date),
         substrate_temp_c = coalesce(substrate_temperature, water_temperature),
         comments_capture = tolower(comments_capture),
         comments_survey = tolower(comments_survey),
         body_temp_c = ifelse(body_temp_c > 35, f_to_c(body_temp_c), body_temp_c),
         substrate_temp_c = ifelse(substrate_temp_c > 35, f_to_c(substrate_temp_c), substrate_temp_c),
         taxon_capture = case_match(species,
                                    "buca" ~ "anaxyrus_canorus",
                                    "hyre" ~ "pseudacris_regilla",
                                    "ramu" ~ "rana_muscosa",
                                    "thel" ~ "thamnophis_elegans",
                                    "raca" ~ "rana_catesbeiana",
                                    "bubo" ~ "anaxyrus_boreas",
                                    "thco" ~ "thamnophis_couchii",
                                    "amma" ~ "ambystoma_macrodactylum",
                                    "thsi" ~ "thamnophis_sirtalis",
                                    "tato" ~ "taricha_torosa",
                                    "clma" ~ "actinemys_marmorata"),
         sex = case_match(sex,
                          "f" ~ "female",
                          "m" ~ "male",
                          .default = NA_character_),
         local_cmr_id = as.character(pit_tag_ref),
         marked = ifelse(is.na(local_cmr_id), FALSE, TRUE),
         capture_type = case_when(
           !is.na(local_cmr_id) & tag_new ~ "new",
           !is.na(local_cmr_id) & !tag_new ~ "recapture",
           .default = NA_character_),
         time_of_day = "day",
         negative_control = case_when(
           grepl("ajs5056|ajs5190|sn_16s0391|sn_16s0390|sn_16s0389|sn_16s0477", comments_capture, ignore.case = TRUE) ~ FALSE,  # ignore cases where the corresponding negative control was listed in the comment
           grepl("negative|control", comments_capture, ignore.case = TRUE) ~ TRUE,  # if comment contains negative or control, mark as true
           .default = FALSE)) %>%  # otherwise false
  add_row(site = "10225", date = as.Date("2024-08-21"), microbiome = "sn_16s0389", comments_capture = "negative_control", negative_control = TRUE) %>%
  add_row(site = "10225", date = as.Date("2024-08-22"), microbiome = "sn_16s0389", comments_capture = "negative_control", negative_control = TRUE) %>%
  add_row(site = "10225", date = as.Date("2024-08-23"), microbiome = "sn_16s0389", comments_capture = "negative_control", negative_control = TRUE) %>%
  add_row(site = "10223", date = as.Date("2024-08-21"), microbiome = "sn_16s0390", comments_capture = "negative_control", negative_control = TRUE) %>%
  add_row(site = "10223", date = as.Date("2024-08-22"), microbiome = "sn_16s0390", comments_capture = "negative_control", negative_control = TRUE) %>%
  add_row(site = "10206", date = as.Date("2024-08-21"), microbiome = "sn_16s0391", comments_capture = "negative_control", negative_control = TRUE) %>%
  add_row(site = "10206", date = as.Date("2024-08-22"), microbiome = "sn_16s0391", comments_capture = "negative_control", negative_control = TRUE) %>%
  add_row(site = "10055", date = as.Date("2024-09-05"), microbiome = "sn_16s0477", comments_capture = "negative_control", negative_control = TRUE)

# RKS36420 -> RKS35420
clean_capture$bd[clean_capture$capture_id == "d43c9ff7-909e-4b83-adae-5df1c6ea4862"] = "RKS35420"

# pseudacris_regila -> rana_sierrae
clean_capture$taxon_capture[clean_capture$capture_id == "da4ba28e-2e15-42ee-b1d7-cea13239e420"] = "rana_sierrae"

# carry-over
clean_capture$taxon_capture[clean_capture$capture_id == "fa513e2c-ff90-4588-8a8a-1603395d5cbd"] = "rana_sierrae"
clean_capture$marked[clean_capture$capture_id == "fa513e2c-ff90-4588-8a8a-1603395d5cbd"] = TRUE
clean_capture$capture_type[clean_capture$capture_id == "fa513e2c-ff90-4588-8a8a-1603395d5cbd"] = "recapture"
clean_capture$local_cmr_id[clean_capture$capture_id == "fa513e2c-ff90-4588-8a8a-1603395d5cbd"] = "982091064358197"

# clean_capture$observer_sample[clean_capture$capture_id == "fa513e2c-ff90-4588-8a8a-1603395d5cbd"] = "Smith"
clean_capture$local_cmr_id[clean_capture$capture_id == "b84ce965-93c9-48fd-8f0b-bee7517947eb"] = "900043000200853"

clean_capture$bd[clean_capture$capture_id == "39526851-83e9-46b7-b971-e902ee67d53e"] = "RKS34982"
clean_capture$bd[clean_capture$capture_id == "a86f5dae-4eb3-4abf-a360-3b99501c2384"] = "RKS35542"
clean_capture$bd[clean_capture$capture_id == "f0d98710-038e-407b-894b-648ade3f297a"] = "RKS36429"

clean_edna = bind_rows(raw_edna_2022,
                       raw_edna_2023 %>%
                         mutate(visit_date = mdy(visit_date))) %>%
  clean_names() %>%
  rename(sn_visit_id = visit_id,
         sn_survey_id = survey_id,
         date = visit_date,
         filter_method = active_passive,
         collection_time = collect_time,
         collection_volume_ml = edna_volume,
         edna_utme = utm_easting_edna,
         edna_utmn = utm_northing_edna,
         # edna_utm_zone = 11,
         comments_edna = edna_sample_comment,
         filter_size_um = filter_size,
         filter_start_time = start_time_edna,
         filter_end_time = end_time_edna,
         edna_sample_name = edna_filter_id,
         site = site_id,
         observers_survey = surveyor_id,
         comments_survey = survey_comment) %>%
  mutate(site = as.character(site),
         time_of_day = "day",
         detection_type = "edna",
         detection_subtype = NA,
         transect = NA,
         negative_control = grepl("negative|control", comments_edna, ignore.case = TRUE),
         frozen = !is.na(frozen_hrs),
         filter_date = date,
         filter_volumne_ml = collection_volume_ml,
         sample_processing = case_match(sample_processing,
                                        "onsite" ~ "Sample filtered on site.",
                                        "cooled" ~ "Sample cooled and filtered off site.",
                                        .default = NA),
         location_edna = if_else(is.na(location_edna), NA, paste0("Collected at ", location_edna, ".")),
         comments_edna = if_else(str_ends(comments_edna, "\\."), comments_edna, paste0(comments_edna, "."))) %>%
  unite("comments_edna", c(comments_edna, location_edna, sample_processing), na.rm = TRUE, remove = FALSE, sep = " ")


clean_edna$end_time[clean_edna$sn_survey_id == "5fef543c-90e1-4bc6-a801-23cd697228ae"] = "12:50:00"

```

# sites
```{r}
gelled_site = clean_capture %>%
  select(site) %>%
  distinct() %>%
  left_join(db_site %>%
              select(site_id,
                     site) %>%
              collect(), by = "site")

if (any(is.na(gelled_site$site_id))) {
  stop("Unknown sites found, they should be added.")
}

```

# visits
```{r}
gelled_visit = bind_rows(clean_capture %>%
                           select(site,
                                  date,
                                  time_of_day),
                         clean_edna %>%
                           select(site,
                                  date,
                                  time_of_day)) %>%  
  distinct() %>%
  left_join(db_site %>%
              select(tbl_keys("site", mdc)) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(date,
                     time_of_day,
                     site_id,
                     visit_id) %>%
              collect(),
            by = tbl_nkey("visit", mdc)) %>%
  mutate(uuid_name = paste0(site, date, time_of_day),
         visit_id = ifelse(is.na(visit_id), UUIDfromName("29fabb0b-bc7d-4430-901a-befebe31d2de", uuid_name), visit_id))

```

## Generate stats for log
```{r}
dblog = list()
dblog$date_min = min(gelled_visit$date)
dblog$date_max = max(gelled_visit$date)
dblog$site = gelled_visit$site %>% unique()
dblog$site_id = gelled_visit$site_id %>% unique()
dblog$region = db_site %>%
  left_join(db_region, by = "region_id") %>%
  filter(site %in% dblog$site) %>%
  pull(region) %>%
  unique()
```

## subset visit
```{r}
subset_visit = gelled_visit %>%
  select(any_of(colnames(db_visit))) %>%
  distinct() %>%
  drop_na(visit_id)

compare_visit = compare_df_cols(db_visit %>%
                                  filter(FALSE) %>%
                                  collect(), subset_visit)

tray = compare_for_staging(db_visit %>%
                             filter(date >= dblog$date_min,
                                    site_id %in% dblog$site_id) %>%
                             collect(),
                           subset_visit, tbl_pkey('visit', mdc), return_all = TRUE, report = "visit")

upsert_visit = bind_rows(tray$insert,
                        tray$update)

# # get visit_id
# vids = subset_visit %>%
#   select(visit_id) %>%
#   distinct() %>%
#   pull(visit_id)
# 
# sn_vids = dput(vids)

# upsert visit?
x_visit = (nrow(upsert_visit) > 0)

```

## upsert visits
```{r}
if (x_visit) {
  temp_visit = stage_to_temp(dbcon, db_visit, upsert_visit)
  pointer = tbl(dbcon, temp_visit)
  db_visit = rows_upsert(db_visit, pointer, by="visit_id", in_place=TRUE)
}

db_visit = tbl(dbcon, Id("survey_data", "visit"))

```

# eDNA
## unify edna
```{r}

unified_edna = clean_edna %>%
  left_join(db_site %>%
              select(site,
                     site_id,
                     site_utm_zone) %>%
              collect(),
            by = "site") %>%
  rename(edna_utm_zone = site_utm_zone) %>%
  left_join(db_visit %>%
              select(site_id,
                     date,
                     time_of_day,
                     visit_id) %>%
              collect(),
            by = c("site_id", "date", "time_of_day")) %>%
  left_join(db_survey %>%
              select(survey_id, visit_id, detection_type, detection_subtype, start_time) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = c("visit_id", "detection_type", "detection_subtype", "start_time")) %>%
  left_join(db_edna %>%
              select(edna_id, edna_sample_name) %>%
              collect(), by = "edna_sample_name") %>%
  filter(!is.na(site),
         !is.na(date))

peace = get_dupes(clean_edna, edna_sample_name)

```

## gel edna
```{r}
gelled_edna = unified_edna %>%
  group_by_at(tbl_nkey("survey", mdc)) %>%
  mutate(comments_survey = str_c(comments_survey, collapse = ", "),
         start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         number_observers = count_observers(paste(observers_survey, collapse = ",")),
         uuid_name = paste0(visit_id, start_time, detection_type),
         survey_id = ifelse(is.na(survey_id),
                            UUIDfromName("5113bb6e-8cff-4a2d-9910-904403736cfb", uuid_name),
                            survey_id)) %>%
  ungroup() %>%
  mutate(uuid_name = paste0(survey_id, edna_sample_name, edna_utmn, collection_time, filter_method, filter_start_time),
         edna_id = UUIDfromName("e4d345d4-6433-40d2-9997-1b4ee8b1a627", uuid_name)) %>%
  group_by(visit_id) %>%
  mutate(has_negative_control = sum(negative_control) > 0,
         negative_control_group_id = if_else(has_negative_control,
                                             UUIDfromName("42e537a1-5992-45d3-9eed-0f4920625be0", paste0("edna", visit_id)),
                                             NA)) %>%
  ungroup()

```

## subset edna
```{r}
# survey
subset_edna_survey = gelled_edna %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  filter(!is.na(survey_id))

# compare columns
compare_edna_survey = compare_df_cols(db_survey %>%
                                        filter(FALSE) %>%
                                        collect(), subset_edna_survey)
tray = compare_for_staging(db_survey %>% collect(), subset_edna_survey, "survey_id", return_all = TRUE, report = "edna_survey")
upsert_edna_survey = bind_rows(tray$insert,
                               tray$update)

# edna
subset_edna = gelled_edna %>%
  select(any_of(colnames(db_edna))) %>%
  distinct() %>%
  filter(!is.na(edna_id))

# compare columns
compare_edna = compare_df_cols(db_edna %>%
                                 filter(FALSE) %>%
                                 collect(), subset_edna)
tray = compare_for_staging(db_edna %>% collect(), subset_edna, "edna_id", return_all = TRUE, report = "edna")
upsert_edna = bind_rows(tray$insert,
                        tray$update)
x_edna = (nrow(upsert_edna_survey) > 0) | (nrow(upsert_edna) > 0)
```

## stage and commit edna
```{r}

if (x_edna) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      
      db_survey = db_rows_upsert(dbcon, db_survey, upsert_edna_survey, "survey_id")
      
      db_edna = db_rows_upsert(dbcon, db_edna, upsert_edna, "edna_id")
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      stop("Transaction failed: ", e$message)
    })
}

# refresh
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
```

# Capture chain
## Unify capture
```{r}
unified_capture = clean_capture %>%
  left_join(clean_survey, by = "sn_survey_id") %>%
  left_join(db_site %>%
              select(site,
                     site_id) %>%
              collect(),
            by = "site") %>%
  left_join(db_visit %>%
              select(site_id,
                     date,
                     time_of_day,
                     visit_id) %>%
              collect(),
            by = c("site_id", "date", "time_of_day")) %>%
  left_join(db_survey %>%
              select(survey_id, visit_id, detection_type, detection_subtype, start_time) %>%
              filter(!is.na(visit_id)) %>%
              collect(),
            by = c("visit_id", "detection_type", "detection_subtype", "start_time")) %>%
  filter(!is.na(site),
         !is.na(date)) %>%
  distinguish_muscosa_sierrae(taxon_capture)
```

## CMR table
```{r}

unified_cmr = unified_capture %>%
  filter(!is.na(local_cmr_id)) %>%
  rename(taxon_cmr = taxon_capture) %>%
  select(local_cmr_id, taxon_cmr, site_id, date, start_time, capture_id, capture_type) %>%
  left_join(db_cmr %>%
              select(cmr_id,
                     local_cmr_id,
                     date_tagged,
                     site_id_tagged,
                     id_type) %>%
              collect(), by = "local_cmr_id") %>%
  arrange(local_cmr_id, date_tagged, date, start_time, capture_type) %>%
  group_by(local_cmr_id) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  mutate(cmr_id = ifelse(is.na(cmr_id), capture_id, cmr_id),
         date_tagged = as.Date(ifelse(is.na(date_tagged), date, date_tagged)),
         id_type = ifelse(is.na(id_type), "pit_tag", id_type),
         site_id_tagged = ifelse(is.na(site_id_tagged), site_id, site_id_tagged))
  
subset_cmr = unified_cmr %>%
  arrange(date_tagged) %>%
  select(any_of(colnames(db_cmr)))

compare_cmr = compare_df_cols(db_cmr %>%
                                  filter(FALSE) %>%
                                  collect(), subset_cmr)
peace = get_dupes(subset_cmr, cmr_id)
tray = compare_for_staging(db_cmr %>% collect(), subset_cmr, "cmr_id", return_all = TRUE, report = "cmr")

upsert_cmr = bind_rows(tray$insert,
                       tray$update)
```

## Gel capture 
```{r}

coalesce_duplicates <- function(data, suffix = c(".x", ".y")) {
  # Get all column names
  all_cols <- colnames(data)
  
  # Identify columns with the first suffix
  pattern <- paste0("\\", suffix[1], "$")
  x_cols <- all_cols[grepl(pattern, all_cols)]
  
  # Create a result data frame
  result <- data
  
  # Process each duplicated column
  for (x_col in x_cols) {
    # Get the base name and corresponding y column
    base_col <- sub(paste0("\\", suffix[1], "$"), "", x_col)
    y_col <- paste0(base_col, suffix[2])
    
    # Only coalesce if the y column exists
    if (y_col %in% all_cols) {
      result[[base_col]] <- coalesce(data[[x_col]], data[[y_col]])
    } else {
      result[[base_col]] <- data[[x_col]]
    }
  }
  
  # Remove the original suffixed columns
  result <- result %>%
    select(-ends_with(suffix[1]), -ends_with(suffix[2]))
  
  return(result)
}

gelled_capture = unified_capture %>%
  left_join(unified_cmr %>%
              select(local_cmr_id, cmr_id, date_tagged),
            by = "local_cmr_id") %>%
  arrange(date, site, start_time, survey_quality) %>%
  mutate(comments_survey = coalesce(comments_survey.x, comments_survey.y),
         marked = !is.na(local_cmr_id),
         capture_type = case_when(
           marked & date == date_tagged ~ "new",
           marked & date != date_tagged ~ "recapture",
           !marked ~ NA_character_)) %>%
  left_join(db_capture %>%
              collect(), by = "capture_id") %>%
  mutate(capture_utme = coalesce(capture_utme.y, capture_utme.x),
         detection_type = "capture") %>%
  select(-capture_utme.x,
         -capture_utme.y,
         -capture_utmn.x,
         -capture_utmn.y) %>%
  coalesce_duplicates() %>%
  group_by(visit_id,
           detection_type,
           detection_subtype,
           transect,
           start_time,
           observers_survey) %>%
  mutate(end_time = as_hms(max(end_time)),
         start_timestamp_utc = start_timestamp_utc(date, start_time, local_tz),
         end_timestamp_utc = end_timestamp_utc(date, start_time, end_time, local_tz),
         duration_minutes = duration_minutes(start_timestamp_utc, end_timestamp_utc), # assume duration = end_time - start_time
         number_observers = count_observers(paste(observers_survey, collapse = ",")),
         comments_survey = na.omit(comments_survey)[1],
         survey_quality = first(survey_quality),
         description = na.omit(description)[1],
         uuid_name = paste0(visit_id, detection_type, detection_subtype, transect, start_time, observers_survey),
         survey_id = ifelse(is.na(survey_id),
                            UUIDfromName("831e1d81-169a-4574-911a-a6cf3792cc0c", uuid_name),
                            survey_id)) %>%
  ungroup() %>%
  timestamp_of_capture_utc(tz = local_tz) %>%
  arrange(date, site)
```

## Samples capture
```{r}
unified_sample = gelled_capture %>%
  pivot_longer(cols = c("bd",
                        "genetic",
                        "microbiome",
                        "amp",
                        "mucosome",
                        "bacterial",
                        "antibody"),
               names_to = "sample_type",
               values_to = "sample_name") %>%
  select(sample_name,
         sample_type,
         capture_id,
         negative_control,
         date,
         site,
         comments_capture) %>%
  filter(!is.na(sample_name)) %>%
  group_by(sample_name, sample_type) %>%
  mutate(row_num = row_number(),
         dupe = ifelse(n() > 1, TRUE, FALSE)) %>%
  ungroup()

# negative control groups don't always align with site and date (some span multiple sites)
nc_groups = unified_sample %>%
  filter(negative_control) %>%
  select(sample_name, sample_type, site, date) %>%
  group_by(sample_name, sample_type) %>%
  mutate(name_multi = n() > 1,
         group_id_1 = if_else(first(name_multi),
                              UUIDfromName("cc753aec-4d93-4fdc-b4a4-5c4d51954f58", paste0(first(sample_type), first(sample_name))),
                              NA)) %>%
  ungroup() %>%
  group_by(site, date, sample_type) %>%
  mutate(group_id_2 = UUIDfromName("cc753aec-4d93-4fdc-b4a4-5c4d51954f58", paste0(sample_type, site, date))) %>%
  ungroup() %>%
  mutate(group_id = coalesce(group_id_1, group_id_2)) %>%
  arrange(sample_name, sample_type) %>%
  select(sample_name, sample_type, group_id) %>%
  distinct()

gelled_sample = unified_sample %>%
  left_join(nc_groups, by = c("sample_name", "sample_type")) %>%
  left_join(db_sample %>%
              select(sample_id, sample_name, sample_type, capture_id) %>%
              rename(capture_id_old = capture_id) %>%
              collect(), by = c("sample_name", "sample_type")) %>%
  mutate(uuid_name = paste0(sample_name, sample_type),
         sample_id = ifelse(is.na(sample_id), UUIDfromName("1208e62f-d3a1-462c-984f-0bf1f43f5837", uuid_name), sample_id)) %>%
  group_by(date, site, sample_type) %>%
  mutate(has_negative_control = sum(negative_control) > 0,
         negative_control_group_id = if_else(has_negative_control,
                                             first(group_id, na_rm = TRUE),
                                             NA)) %>%
  ungroup() %>%
  mutate(capture_id = ifelse(negative_control, NA, capture_id)) %>%
  select(-date,
         -site,
         -comments_capture,
         -row_num) %>%
  distinct()


dupes_sample = get_dupes(gelled_sample, sample_name, sample_type)

```

### drop negative controls from capture
```{r}
gelled_capture_clean = gelled_capture %>%
  filter(!negative_control)
```

## Subset capture tables

```{r}
# survey
subset_capture_survey = gelled_capture %>%
  select(any_of(colnames(db_survey))) %>%
  distinct() %>%
  filter(!is.na(survey_id),
         !is.na(visit_id))

# compare columns
compare_capture_survey = compare_df_cols(db_survey %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture_survey)
tray = compare_for_staging(db_survey %>% collect(), subset_capture_survey, "survey_id", return_all = TRUE, report = "capture_survey")
upsert_capture_survey = bind_rows(tray$insert,
                                  tray$update)

# taxa
subset_capture_taxa = gelled_capture %>%
  select(taxon_capture) %>%
  drop_na(taxon_capture) %>%
  distinct() %>%
  rename(taxon_id = taxon_capture) %>%
  left_join(db_taxa %>% collect(), by = "taxon_id")

tray = compare_for_staging(db_taxa %>% collect(), subset_capture_taxa, "taxon_id", return_all = TRUE, report = "capture_taxa")
insert_capture_taxa = tray$insert

# capture
subset_capture = gelled_capture_clean %>%
  select(any_of(colnames(db_capture))) %>%
  distinct() %>%
  filter(!is.na(capture_id))

# compare columns
compare_capture = compare_df_cols(db_capture %>%
                                  filter(FALSE) %>%
                                  collect(), subset_capture)


tray = compare_for_staging(db_capture %>% collect(), subset_capture, tbl_pkey('capture', mdc), return_all = TRUE, report = "capture")
upsert_capture = bind_rows(tray$insert,
                           tray$update)

subset_sample = gelled_sample %>%
  select(any_of(colnames(db_sample))) %>%
  distinct() %>%
  filter(!is.na(sample_id))

compare_sample = compare_df_cols(db_sample %>%
                                  filter(FALSE) %>%
                                  collect(), subset_sample)


tray = compare_for_staging(db_sample %>% collect(), subset_sample, "sample_id", return_all = TRUE, report = "sample")
upsert_sample = bind_rows(tray$insert,
                          tray$update)

x_capture = (nrow(upsert_capture_survey) > 0) | (nrow(insert_capture_taxa) > 0) | (nrow(upsert_capture) > 0 | nrow(upsert_cmr) > 0 | nrow(upsert_sample) > 0)
```

## Stage and commit capture tables

```{r}
if (x_capture) {
  # begin transaction temp
  dbBegin(dbcon)
  
  tryCatch(
    {
      db_cmr = db_rows_upsert(dbcon, db_cmr, upsert_cmr, "cmr_id")
      # temp_cmr = stage_to_temp(dbcon, db_cmr, upsert_cmr)
      # pointer = tbl(dbcon, temp_cmr)
      # rows_upsert(db_cmr, pointer, by="cmr_id", in_place=TRUE)
      
      db_survey = db_rows_upsert(dbcon, db_survey, upsert_capture_survey, "survey_id")
      # temp_capture_survey = stage_to_temp(dbcon, db_survey, upsert_capture_survey)
      # pointer = tbl(dbcon, temp_capture_survey)
      # rows_upsert(db_survey, pointer, by="survey_id", in_place=TRUE)
      
      db_taxa = db_rows_insert(dbcon, db_taxa, insert_capture_taxa, "taxon_id")
      # temp_capture_taxa = stage_to_temp(dbcon, db_taxa, insert_capture_taxa)
      # pointer = tbl(dbcon, temp_capture_taxa)
      # rows_insert(db_taxa, pointer, by="taxon_id", in_place=TRUE, conflict = "ignore")
      
      db_capture = db_rows_upsert(dbcon, db_capture, upsert_capture, "capture_id")
      # temp_capture = stage_to_temp(dbcon, db_capture, upsert_capture)
      # pointer = tbl(dbcon, temp_capture)
      # rows_upsert(db_capture, pointer, by="capture_id", in_place=TRUE)
      
      db_sample = db_rows_upsert(dbcon, db_sample, upsert_sample, "sample_id")
      # temp_sample = stage_to_temp(dbcon, db_sample, upsert_sample)
      # pointer = tbl(dbcon, temp_sample)
      # rows_upsert(db_sample, pointer, by="sample_id", in_place=TRUE)
      
      # Commit the transaction if successful
      dbCommit(dbcon)
      print("Transaction successful!")
      
    }, error = function(e) {
      # Rollback in case of error
      dbRollback(dbcon)
      message("Transaction failed: ", e$message)
    })
}

# reload
db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
```


```{r}
dbDisconnect(dbcon)
dbDisconnect(sncon)
```