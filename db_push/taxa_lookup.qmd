---
title: "taxa_lookup"
format: html
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, uuid, RIBBiTR-BII/ribbitrrr, EML, ropensci/bold, ropensci/taxize, EDIorg/taxonomyCleanr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

# connect to database
dbcon = hopToDB("wibbitr")
```

# Pull metadata and tables
```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from DB
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))
```

# define taxonomy lookup functions
```{r}
# peace = gnr_datasources()

map_rank = function(rank) {
  rmap = c("kingdom" = 1,
           "subkingdom" = 2,
           "infrakingdom" = 3,
           "phylum" = 4,
           "subphylum" = 5,
           "infraphylum" = 6,
           "superclass" = 7,
           "class" = 8,
           "order" = 9,
           "family" = 10,
           "subfamily" = 11,
           "genus" = 12,
           "species" = 13)
  
  return(as.integer(rmap[rank]))
}

safely_gna_verifier = safely(gna_verifier)

taxa_lookup = function(taxa_raw) {
  # intentionally written non-vectorized, to build in time buffers between query for each database as requested
  
  taxa = tolower(gsub("_", " ", taxa_raw))
  
  cat("\033[1;37m", taxa, ": ", sep = "")
  cat("\033[38;5;240m", "AmphibiaWeb", sep = "")
  taxa_aw = scrape_amphibiaweb(taxa, quietly = TRUE)
  cat(", ITIS", sep = "")
  taxa_itis = safely_gna_verifier(taxa, data_sources = 3, capitalize = TRUE)

  
  if (is.null(taxa_itis$error)){
    if (taxa_itis$result$matchType == "PartialExact") {
      taxa_itis$error$message = "PartialExact"
      itis_pos = FALSE
    } else if (!is.na(taxa_itis$result$currentRecordId)){
      itis_pos = TRUE
    } else {
      itis_pos = FALSE
    }
  } else {
    itis_pos = FALSE
  }
  
  if (itis_pos) {
    cat(", ITIS hierarchy", sep = "")
    rankname_itis = tolower(itis_taxrank(taxa_itis$result$currentRecordId))
    ranknum_itis = map_rank(rankname_itis)
    
    hierarchy_itis = itis_hierarchy(taxa_itis$result$currentRecordId, "full") %>%
      mutate(ranknum = map_int(rankname, ~ map_rank(.x))) %>%
      filter(ranknum >= 8,
             ranknum <= ranknum_itis) %>%
      select(rankname,
             taxonname) %>%
      pivot_wider(names_from = rankname,
                  values_from = taxonname) %>%
      mutate(rankname = rankname_itis)
  } else {
    hierarchy_itis <- data.frame(
      class = NA_character_,
      order = NA_character_,
      family = NA_character_,
      genus = NA_character_,
      species = NA_character_,
      rankname = NA_character_
    )
  }
  
  
  cat(", NCBI", sep = "")
  taxa_ncbi = safely_gna_verifier(taxa, data_sources = 4, capitalize = TRUE)
  if (is.null(taxa_ncbi$error)){
    if (taxa_ncbi$result$matchType == "PartialExact") {
      taxa_ncbi$error$message = "PartialExact"
    }
  }
  
  cat(", GBIF", sep = "")
  taxa_gbif = safely_gna_verifier(taxa, data_sources = 11, capitalize = TRUE)
  if (is.null(taxa_gbif$error)){
    if (taxa_gbif$result$matchType == "PartialExact") {
      taxa_gbif$error$message = "PartialExact"
    }
  }
  
  cat(", IUCN\n", sep = "")
  taxa_iucn = safely_gna_verifier(taxa, data_sources = 163, capitalize = TRUE)
  if (is.null(taxa_iucn$error)){
    if (taxa_iucn$result$matchType == "PartialExact") {
      taxa_iucn$error$message = "PartialExact"
    }
  }
  
  taxa_out = taxa_aw %>%
    rename_with(~ paste0("aw_", .)) %>%
    mutate(taxa_search = taxa)
  
  if (is.null(taxa_itis$error)) {
    taxa_out = taxa_out %>%
      bind_cols(taxa_itis$result %>%
                  rename_with(~ paste0("itis_", .)))
    
    
    taxa_out = taxa_out %>%
      bind_cols(hierarchy_itis %>%
                  rename_with(~ paste0("itis_", .)))
  }
  
  if (is.null(taxa_ncbi$error)) {
    taxa_out = taxa_out %>%
      bind_cols(taxa_ncbi$result %>%
                  rename_with(~ paste0("ncbi_", .)))
  }
  
  if (is.null(taxa_gbif$error)) {
    taxa_out = taxa_out %>%
      bind_cols(taxa_gbif$result %>%
                  rename_with(~ paste0("gbif_", .)))
  }
  
  if (is.null(taxa_iucn$error)) {
    taxa_out = taxa_out %>%
      bind_cols(taxa_iucn$result %>%
                  rename_with(~ paste0("iucn_", .)))
  }
  
  taxa_out$taxa_raw = taxa_raw
  
  return(taxa_out)
}

taxa_lookup_map = function(taxa_list) {
  if (is_empty(taxa_list)) {
    taxa_lm = taxa_lookup("foo")[0, ]
  } else {
    taxa_lm = map_df(taxa_list, ~ taxa_lookup(.x))
  }
  
  taxa_lm_clean = taxa_lm %>%
    mutate("amphibiaweb_species" = ifelse(is.na(aw_species), NA, paste(aw_genus, aw_species)),
           "amphibiaweb_class" = ifelse(is.na(aw_species), NA, "Amphibia"),
           "aw_url" = gsub("_ws\\?", "_query?", aw_url)) %>%
    rename(any_of(c("taxon_id" = "taxa_raw",
                    "taxon" = "taxa_search",
                    "amphibiaweb_id" = "aw_amphib_id",
                    "amphibiaweb_order" = "aw_order",
                    "amphibiaweb_family" = "aw_family",
                    "amphibiaweb_subfamily" = "aw_subfamily",
                    "amphibiaweb_genus" = "aw_genus",
                    "amphibiaweb_common" = "aw_common_name",
                    "amphibiaweb_url" = "aw_url",
                    "itis_tsn_matched" = "itis_recordId",
                    "itis_canonical_matched" = "itis_matchedCanonicalSimple",
                    "itis_status_matched" = "itis_taxonomicStatus",
                    "itis_match_type" = "itis_matchType",
                    "itis_tsn_current" = "itis_currentRecordId",
                    "itis_canonical_current" = "itis_currentCanonicalSimple",
                    "itis_rank_current" = "itis_rankname",
                    "ncbi_id_matched" = "ncbi_recordId",
                    "ncbi_canonical_matched" = "ncbi_matchedCanonicalSimple",
                    "ncbi_status_matched" = "ncbi_taxonomicStatus",
                    "ncbi_id_current" = "ncbi_currentRecordId",
                    "ncbi_canonical_current" = "ncbi_currentCanonicalSimple",
                    "gbif_id_matched" = "gbif_recordId",
                    "gbif_canonical_matched" = "gbif_matchedCanonicalSimple",
                    "gbif_status_matched" = "gbif_taxonomicStatus",
                    "gbif_id_current" = "gbif_currentRecordId",
                    "gbif_canonical_current" = "gbif_currentCanonicalSimple",
                    "iucn_tsn_matched" = "iucn_recordId",
                    "iucn_canonical_matched" = "iucn_matchedCanonicalSimple",
                    "iucn_status_matched" = "iucn_taxonomicStatus",
                    "iucn_tsn_current" = "iucn_currentRecordId",
                    "iucn_canonical_current" = "iucn_currentCanonicalSimple"))) %>%
    select(any_of(c("taxon_id",
                    "taxon",
                    "amphibiaweb_id",
                    "amphibiaweb_class",
                    "amphibiaweb_order",
                    "amphibiaweb_family",
                    "amphibiaweb_subfamily",
                    "amphibiaweb_genus",
                    "amphibiaweb_species",
                    "amphibiaweb_common",
                    "amphibiaweb_url",
                    "itis_tsn_matched",
                    "itis_canonical_matched",
                    "itis_status_matched",
                    "itis_match_type",
                    "itis_tsn_current",
                    "itis_canonical_current",
                    "itis_rank_current",
                    "itis_class",
                    "itis_order",
                    "itis_family",
                    "itis_genus",
                    "itis_species",
                    "ncbi_id_matched",
                    "ncbi_canonical_matched",
                    "ncbi_status_matched",
                    "ncbi_id_current",
                    "ncbi_canonical_current",
                    "gbif_id_matched",
                    "gbif_canonical_matched",
                    "gbif_status_matched",
                    "gbif_id_current",
                    "gbif_canonical_current",
                    "iucn_tsn_matched",
                    "iucn_canonical_matched",
                    "iucn_status_matched",
                    "iucn_tsn_current",
                    "iucn_canonical_current",
                    "cites_id",
                    "cites_appendix")))
  
  # return(list(taxa_lm,
  #             taxa_lm_clean))
  return(taxa_lm_clean)
  
}

```

# collect all taxa
```{r}

taxa_aural = db_aural %>%
  select(taxon_aural) %>%
  distinct() %>%
  pull(taxon_aural)

taxa_capture = db_capture %>%
  select(taxon_capture) %>%
  distinct() %>%
  pull(taxon_capture)

taxa_ves = db_ves %>%
  select(taxon_ves) %>%
  distinct() %>%
  pull(taxon_ves)

taxa_cmr = db_cmr %>%
  select(taxon_cmr) %>%
  distinct() %>%
  pull(taxon_cmr)

taxa_unique = sort(na.omit(unique(c(taxa_aural,
                                    taxa_capture,
                                    taxa_ves,
                                    taxa_cmr))))

```

# Diagnostic: run taxonomy lookup all current taxa
```{r}
taxa_results_current = ribbitr_taxa_lookup(taxa_unique)

taxa_results_current_build = taxa_results_current %>%
  rename("itis_tsn" = "itis_tsn_current",
         "itis_taxon" = "itis_canonical_current",
         "itis_rank" = "itis_rank_current",
         "ncbi_id" = "ncbi_id_matched",
         "ncbi_taxon" = "ncbi_canonical_matched",
         "gbif_id" = "gbif_id_current",
         "gbif_taxon" = "gbif_canonical_current",
         "iucn_tsn" = "iucn_tsn_current",
         "iucn_taxon" = "iucn_canonical_current",
         "amphibiaweb_common_name" = "amphibiaweb_common") %>%
  select(all_of(c("taxon_id",
                  "taxon",
                  "amphibiaweb_id",
                  "amphibiaweb_class",
                  "amphibiaweb_order",
                  "amphibiaweb_family",
                  "amphibiaweb_genus",
                  "amphibiaweb_species",
                  "amphibiaweb_common_name",
                  "amphibiaweb_url",
                  "itis_tsn",
                  "itis_rank",
                  "itis_class",
                  "itis_order",
                  "itis_family",
                  "itis_genus",
                  "itis_species",
                  "ncbi_id",
                  "ncbi_taxon",
                  "gbif_id",
                  "gbif_taxon",
                  "iucn_tsn",
                  "iucn_taxon")))

# dbWriteTable(dbcon, Id("survey_data", "taxonomy"), taxa_results_current_build, overwrite = TRUE)
```

# revise taxa
```{r}

revised_aural = db_aural %>%
  select(aural_id,
         taxon_aural,
         comments_aural) %>%
  collect() %>%
  ribbitr_clean_taxa(taxon_aural, comments_aural)

revised_capture = db_capture %>%
  select(capture_id,
         taxon_capture,
         comments_capture) %>%
  collect() %>%
  ribbitr_clean_taxa(taxon_capture, comments_capture)

revised_ves = db_ves %>%
  select(ves_id,
         taxon_ves,
         comments_ves) %>%
  collect() %>%
  ribbitr_clean_taxa(taxon_ves, comments_ves)

revised_cmr = db_cmr %>%
  select(cmr_id,
         taxon_cmr) %>%
  collect() %>%
  ribbitr_clean_taxa(taxon_cmr)


# need to update taxa table at the same time!
taxa_revised_unique = sort(na.omit(unique(c(as.character(revised_aural$taxon_aural),
                                            as.character(revised_capture$taxon_capture),
                                            as.character(revised_ves$taxon_ves),
                                            as.character(revised_cmr$taxon_cmr)))))

```

# Lookup: run taxonomy lookup all revised taxa
```{r}
lookup_all = FALSE

if (lookup_all) {
  # lookup all
  taxa_revised_results = ribbitr_taxa_lookup(taxa_revised_unique, cites = TRUE, cites_token = Sys.getenv("cites_token"), format = "simplified")
} else {
  # lookup new or missing itis_tsn
  taxa_existing = db_taxa %>%
    filter(!is.na(itis_tsn)) %>%
    pull(taxon_id)
  
  taxa_revised_unique_new = setdiff(taxa_revised_unique, taxa_existing)
  
  if (length(taxa_revised_unique_new) == 0) {
    taxa_revised_clean = NULL
  } else {
    taxa_revised_results = ribbitr_taxa_lookup(taxa_revised_unique_new, cites = TRUE, cites_token = Sys.getenv("cites_token"), format = "simplified")
  }
  
  parent_cols = c("itis_class",
                  "itis_order",
                  "itis_family",
                  "itis_genus")
  
  parent_taxa = sort(tolower(unique(na.omit(unlist(taxa_revised_results[parent_cols]))))) %>%
    setdiff(taxa_revised_unique)
  
  
  parent_revised_results = ribbitr_taxa_lookup(parent_taxa, format = "simplified")
  
  # bind all results
  if (nrow(parent_revised_results) > 0) {
    taxa_results_all = bind_rows(taxa_revised_results, parent_revised_results)
  } else {
    taxa_results_all = taxa_revised_results
  }
  
  
  taxa_revised_clean = taxa_results_all %>%
    rename(any_of(c("itis_tsn" = "itis_tsn_current",
                    "itis_taxon" = "itis_canonical_current",
                    "itis_rank" = "itis_rank_current",
                    "ncbi_id" = "ncbi_id_matched",
                    "ncbi_taxon" = "ncbi_canonical_matched",
                    "gbif_id" = "gbif_id_current",
                    "gbif_taxon" = "gbif_canonical_current",
                    "iucn_tsn" = "iucn_tsn_current",
                    "iucn_taxon" = "iucn_canonical_current",
                    "amphibiaweb_common_name" = "amphibiaweb_common"))) %>%
    select(any_of(c("taxon_id",
                    "taxon",
                    "amphibiaweb_id",
                    "amphibiaweb_class",
                    "amphibiaweb_order",
                    "amphibiaweb_family",
                    "amphibiaweb_genus",
                    "amphibiaweb_species",
                    "amphibiaweb_common_name",
                    "amphibiaweb_url",
                    "itis_tsn",
                    "itis_rank",
                    "itis_class",
                    "itis_order",
                    "itis_family",
                    "itis_genus",
                    "itis_species",
                    "ncbi_id",
                    "ncbi_taxon",
                    "gbif_id",
                    "gbif_taxon",
                    "iucn_tsn",
                    "iucn_taxon")))
}

# taxa_revised_clean = data.frame(taxon_id = character(0))
```

# subset data
```{r}
drop_orphans = FALSE

# join with taxa for additional columns
taxa_revised_final = taxa_revised_clean %>%
  left_join(db_taxa %>%
              select(taxon_id,
                     all_of(setdiff(colnames(db_taxa), colnames(taxa_revised_clean)))) %>%
              collect(), by = "taxon_id")

compare_taxa = compare_df_cols(db_taxa %>%
                                 filter(FALSE) %>%
                                 collect(), taxa_revised_final)

tray = compare_for_staging(db_taxa %>% collect(), taxa_revised_final, "taxon_id", return_all = TRUE, report = "taxa")

taxa_upsert = bind_rows(tray$insert,
                        tray$update)
taxa_drop = tray$orphan

tray = compare_for_staging(db_aural %>% collect(), revised_aural, "aural_id", return_all = TRUE, report = "aural")
revised_aural_update = tray$update

tray = compare_for_staging(db_capture %>% collect(), revised_capture, "capture_id", return_all = TRUE, report = "capture")
revised_capture_update = tray$update

tray = compare_for_staging(db_ves %>% collect(), revised_ves, "ves_id", return_all = TRUE, report = "ves")
revised_ves_update = tray$update

tray = compare_for_staging(db_cmr %>% collect(), revised_cmr, "cmr_id", return_all = TRUE, report = "cmr")
revised_cmr_update = tray$update

```

# commit to db
```{r}
dbBegin(dbcon)

tryCatch(
  {
    
    if (nrow(taxa_upsert) > 0) {
      # first upsert taxonomy
      temp_taxa = stage_to_temp(dbcon, db_taxa, taxa_upsert)
      pointer = tbl(dbcon, temp_taxa)
      rows_upsert(db_taxa, pointer, by="taxon_id", in_place=TRUE)
    }
    
    if (nrow(revised_aural_update) > 0) {
      # update all taxon data
      temp_aural = stage_to_temp(dbcon, db_aural, revised_aural_update)
      pointer = tbl(dbcon, temp_aural)
      rows_update(db_aural, pointer, by="aural_id", in_place=TRUE, unmatched="ignore")
    }
    
    if (nrow(revised_capture_update) > 0) {
      temp_capture = stage_to_temp(dbcon, db_capture, revised_capture_update)
      pointer = tbl(dbcon, temp_capture)
      rows_update(db_capture, pointer, by="capture_id", in_place=TRUE, unmatched="ignore")
    }
    
    if (nrow(revised_ves_update) > 0) {
      temp_ves = stage_to_temp(dbcon, db_ves, revised_ves_update)
      pointer = tbl(dbcon, temp_ves)
      rows_update(db_ves, pointer, by="ves_id", in_place=TRUE, unmatched="ignore")
    }
    
    if (nrow(revised_cmr_update) > 0) {
      temp_cmr = stage_to_temp(dbcon, db_cmr, revised_cmr_update)
      pointer = tbl(dbcon, temp_cmr)
      rows_update(db_cmr, pointer, by="cmr_id", in_place=TRUE, unmatched="ignore")
    }
    
    if (nrow(taxa_drop) > 0 & drop_orphans) {
      # drop unnecesary taxa
      db_taxa = db_taxa %>%
        rows_delete(taxa_drop, by="taxon_id", unmatched = "ignore", in_place=TRUE)
    }
    # 
    # temp_taxa = stage_to_temp(dbcon, db_taxa, taxa_drop)
    # pointer = tbl(dbcon, temp_taxa)
    # rows_delete(db_taxa, pointer, by="taxon_id", in_place=TRUE, unmatched="ignore")
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```