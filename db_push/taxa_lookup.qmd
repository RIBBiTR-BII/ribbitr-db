---
title: "taxa_lookup"
format: html
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, uuid, RIBBiTR-BII/ribbitrrr, EML, ropensci/bold, ropensci/taxize, EDIorg/taxonomyCleanr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

# connect to database
dbcon = hopToDB("wibbitr")
```

# Pull metadata and tables
```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from DB
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_taxa = tbl(dbcon, Id("survey_data", "taxonomy"))
```

# collect all taxa
```{r}

taxa_aural = db_aural %>%
  select(taxon_aural) %>%
  distinct() %>%
  pull(taxon_aural)

taxa_capture = db_capture %>%
  select(taxon_capture) %>%
  distinct() %>%
  pull(taxon_capture)

taxa_ves = db_ves %>%
  select(taxon_ves) %>%
  distinct() %>%
  pull(taxon_ves)

taxa_cmr = db_cmr %>%
  select(taxon_cmr) %>%
  distinct() %>%
  pull(taxon_cmr)

taxa_unique = sort(na.omit(unique(c(taxa_aural,
                                    taxa_capture,
                                    taxa_ves,
                                    taxa_cmr))))

```

# revise taxa
```{r}

revised_aural = db_aural %>%
  select(aural_id,
         taxon_aural,
         comments_aural) %>%
  collect() %>%
  ribbitr_clean_taxa(taxon_aural, comments_aural)

revised_capture = db_capture %>%
  select(capture_id,
         taxon_capture,
         comments_capture) %>%
  collect() %>%
  ribbitr_clean_taxa(taxon_capture, comments_capture)

revised_ves = db_ves %>%
  select(ves_id,
         taxon_ves,
         comments_ves) %>%
  collect() %>%
  ribbitr_clean_taxa(taxon_ves, comments_ves)

revised_cmr = db_cmr %>%
  select(cmr_id,
         taxon_cmr) %>%
  collect() %>%
  ribbitr_clean_taxa(taxon_cmr)


# need to update taxa table at the same time!
taxa_revised_unique = sort(na.omit(unique(c(as.character(revised_aural$taxon_aural),
                                            as.character(revised_capture$taxon_capture),
                                            as.character(revised_ves$taxon_ves),
                                            as.character(revised_cmr$taxon_cmr)))))

```

# Lookup: run taxonomy lookup all revised taxa
```{r}
lookup_all = FALSE

if (lookup_all) {
  # lookup all
  taxa_revised_results = ribbitr_taxa_lookup(taxa_revised_unique, cites = TRUE, cites_token = Sys.getenv("cites_token"), format = "simplified")
} else {
  # lookup new or missing itis_tsn
  taxa_existing = db_taxa %>%
    filter(!is.na(itis_tsn)) %>%
    pull(taxon_id)
  
  taxa_revised_unique_new = setdiff(taxa_revised_unique, taxa_existing)
  
  if (length(taxa_revised_unique_new) == 0) {
    taxa_revised_clean = NULL
  } else {
    taxa_revised_results = ribbitr_taxa_lookup(taxa_revised_unique_new, cites = TRUE, cites_token = Sys.getenv("cites_token"), format = "simplified")
  }
  
  parent_cols = c("itis_class",
                  "itis_order",
                  "itis_family",
                  "itis_genus")
  
  parent_taxa = sort(tolower(unique(na.omit(unlist(taxa_revised_results[parent_cols]))))) %>%
    setdiff(taxa_revised_unique)
  
  
  parent_revised_results = ribbitr_taxa_lookup(parent_taxa, format = "simplified")
  
  # bind all results
  if (nrow(parent_revised_results) > 0) {
    taxa_results_all = bind_rows(taxa_revised_results, parent_revised_results)
  } else {
    taxa_results_all = taxa_revised_results
  }
  
  
  taxa_revised_clean = taxa_results_all %>%
    rename(any_of(c("itis_tsn" = "itis_tsn_current",
                    "itis_taxon" = "itis_canonical_current",
                    "itis_rank" = "itis_rank_current",
                    "ncbi_id" = "ncbi_id_matched",
                    "ncbi_taxon" = "ncbi_canonical_matched",
                    "gbif_id" = "gbif_id_current",
                    "gbif_taxon" = "gbif_canonical_current",
                    "iucn_tsn" = "iucn_tsn_current",
                    "iucn_taxon" = "iucn_canonical_current",
                    "amphibiaweb_common_name" = "amphibiaweb_common"))) %>%
    select(any_of(c("taxon_id",
                    "taxon",
                    "amphibiaweb_id",
                    "amphibiaweb_class",
                    "amphibiaweb_order",
                    "amphibiaweb_family",
                    "amphibiaweb_genus",
                    "amphibiaweb_species",
                    "amphibiaweb_common_name",
                    "amphibiaweb_url",
                    "itis_tsn",
                    "itis_rank",
                    "itis_class",
                    "itis_order",
                    "itis_family",
                    "itis_genus",
                    "itis_species",
                    "ncbi_id",
                    "ncbi_taxon",
                    "gbif_id",
                    "gbif_taxon",
                    "iucn_tsn",
                    "iucn_taxon")))
}

# taxa_revised_clean = data.frame(taxon_id = character(0))
```

# subset data
```{r}
drop_orphans = FALSE

# join with taxa for additional columns
taxa_revised_final = taxa_revised_clean %>%
  left_join(db_taxa %>%
              select(taxon_id,
                     all_of(setdiff(colnames(db_taxa), colnames(taxa_revised_clean)))) %>%
              collect(), by = "taxon_id")

compare_taxa = compare_df_cols(db_taxa %>%
                                 filter(FALSE) %>%
                                 collect(), taxa_revised_final)

tray = compare_for_staging(db_taxa %>% collect(), taxa_revised_final, "taxon_id", return_all = TRUE, report = "taxa")

taxa_upsert = bind_rows(tray$insert,
                        tray$update)
taxa_drop = tray$orphan

tray = compare_for_staging(db_aural %>% collect(), revised_aural, "aural_id", return_all = TRUE, report = "aural")
revised_aural_update = tray$update

tray = compare_for_staging(db_capture %>% collect(), revised_capture, "capture_id", return_all = TRUE, report = "capture")
revised_capture_update = tray$update

tray = compare_for_staging(db_ves %>% collect(), revised_ves, "ves_id", return_all = TRUE, report = "ves")
revised_ves_update = tray$update

tray = compare_for_staging(db_cmr %>% collect(), revised_cmr, "cmr_id", return_all = TRUE, report = "cmr")
revised_cmr_update = tray$update

```

# commit to db
```{r}
dbBegin(dbcon)

tryCatch(
  {
    
    if (nrow(taxa_upsert) > 0) {
      # first upsert taxonomy
      temp_taxa = stage_to_temp(dbcon, db_taxa, taxa_upsert)
      pointer = tbl(dbcon, temp_taxa)
      rows_upsert(db_taxa, pointer, by="taxon_id", in_place=TRUE)
    }
    
    if (nrow(revised_aural_update) > 0) {
      # update all taxon data
      temp_aural = stage_to_temp(dbcon, db_aural, revised_aural_update)
      pointer = tbl(dbcon, temp_aural)
      rows_update(db_aural, pointer, by="aural_id", in_place=TRUE, unmatched="ignore")
    }
    
    if (nrow(revised_capture_update) > 0) {
      temp_capture = stage_to_temp(dbcon, db_capture, revised_capture_update)
      pointer = tbl(dbcon, temp_capture)
      rows_update(db_capture, pointer, by="capture_id", in_place=TRUE, unmatched="ignore")
    }
    
    if (nrow(revised_ves_update) > 0) {
      temp_ves = stage_to_temp(dbcon, db_ves, revised_ves_update)
      pointer = tbl(dbcon, temp_ves)
      rows_update(db_ves, pointer, by="ves_id", in_place=TRUE, unmatched="ignore")
    }
    
    if (nrow(revised_cmr_update) > 0) {
      temp_cmr = stage_to_temp(dbcon, db_cmr, revised_cmr_update)
      pointer = tbl(dbcon, temp_cmr)
      rows_update(db_cmr, pointer, by="cmr_id", in_place=TRUE, unmatched="ignore")
    }
    
    if (nrow(taxa_drop) > 0 & drop_orphans) {
      # drop unnecesary taxa
      db_taxa = db_taxa %>%
        rows_delete(taxa_drop, by="taxon_id", unmatched = "ignore", in_place=TRUE)
    }
    # 
    # temp_taxa = stage_to_temp(dbcon, db_taxa, taxa_drop)
    # pointer = tbl(dbcon, temp_taxa)
    # rows_delete(db_taxa, pointer, by="taxon_id", in_place=TRUE, unmatched="ignore")
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

# iucn status lookup
```{r}
# collect tsn
iucn_taxon = db_taxa %>%
  select(iucn_taxon) %>%
  filter(!is.na(iucn_taxon)) %>%
  collect() %>%
  arrange(iucn_taxon) %>%
  mutate(iucn_status = NA_character_)

for (ii in iucn_taxon$iucn_taxon) {
  report = iucn_summary(ii, key = Sys.getenv("iucn_token"))
  if (length(report[[1]]) > 1) {
    iucn_taxon$iucn_status[iucn_taxon$iucn_taxon == ii] = report[[1]]$red_list_category$description$en
    Sys.sleep(1)
  }
}

update_taxa = db_taxa %>%
  collect() %>%
  select(-iucn_status) %>%
  left_join(iucn_taxon, by = "iucn_taxon")

```

```{r}
temp_taxa = stage_to_temp(dbcon, db_taxa, update_taxa)
pointer = tbl(dbcon, temp_taxa)
rows_update(db_taxa, pointer, by="taxon_id", in_place=TRUE, unmatched="ignore")

```
