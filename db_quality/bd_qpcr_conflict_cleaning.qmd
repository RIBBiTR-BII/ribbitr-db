---
title: "bd_qpcr_conflict_cleaning"
format: html
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr, ggplot2)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

# connect to database
dbcon = hopToDB("wibbitr")

sncon = hopToDB("qpcr")

```

Pull metadata and tables

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from DB
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

sn_plates = tbl(sncon, Id("plates"))
sn_ucsb = tbl(sncon, Id("results_ucsb_import"))
sn_results = tbl(sncon, Id("results"))

```

# align results

```{r}
sn_data = sn_results %>%
  left_join(sn_plates, by = c("plate_id" = "id")) %>%
  collect()

sn_dupes = get_dupes(sn_data, sample_id)

rb_data = db_bd %>%
  collect() %>%
  filter(replicates %in% c("singlet", "singley"))

rb_dupes = get_dupes(rb_data, sample_name_bd)

common_data = sn_data %>%
  inner_join(rb_data, by = c("sample_id" = "sample_name_bd")) %>%
  rename(sample_name = sample_id)

```

# identify discrepancies
```{r}

discrepancy = function(data, col1, col2) {
  data %>%
  filter({{col1}} != {{col2}}) %>%
  select({{col1}},
         {{col2}})
}

qc_1 = common_data %>%
  discrepancy(plate_id,
              qpcr_plate_name)
# plates clean

qc_2 = common_data %>%
  discrepancy(well_id,
              qpcr_well)
# wells are wrong

qc_3 = common_data %>%
  discrepancy(std_type,
              standard_target_type) %>%
  group_by(std_type, standard_target_type) %>%
  count()

# some are wrong (zoospore - ITS1)

qc_4 = common_data %>%
  discrepancy(std_type,
              standard) %>%
  group_by(std_type, standard) %>%
  count()

qa_1 = sn_data %>%
  mutate(year = year(date_start)) %>%
  select(year, std_type) %>%
  distinct() %>%
  arrange(year)

qa_2 = rb_data %>%
  mutate(year = year(qpcr_date)) %>%
  select(year, standard) %>%
  distinct() %>%
  arrange(year)

qa_3 = db_bd %>%
  mutate(year = year(qpcr_date)) %>%
  select(qpcr_lab,
         year,
         standard_target_type,
         standard,
         total_qpcr_volume_uL,
         qpcr_dilution_factor,
         extract_volume_uL,
         template_dna_volume_uL) %>%
  collect() %>%
  group_by(qpcr_lab,
           standard_target_type,
           standard,
           total_qpcr_volume_uL,
           qpcr_dilution_factor,
           extract_volume_uL,
           template_dna_volume_uL) %>%
  summarise(years = paste(sort(unique(year)), collapse = ","),
         count = n()) %>%
  arrange(qpcr_lab)

qa_4 = db_bd %>%
  filter(is.na(total_qpcr_volume_uL)) %>%
  collect()

inv_2 = rb_data %>%
  filter(is.na(qpcr_date)) %>%
  group_by(qpcr_plate_name) %>%
  count()

inv_3 = rb_data %>%
  filter(qpcr_lab == "rz_lab",
         qpcr_dilution_factor == 10) %>%
  group_by(qpcr_plate_name) %>%
  count()

inv_4 = db_bd %>%
  left_join(db_sample, by = "sample_id") %>%
  left_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(is.na(qpcr_lab)) %>%
  select(site, date, region, country) %>%
  collect()

inv_5 = db_bd %>%
  group_by(qpcr_lab, extraction_kit, standard, extract_volume_uL) %>%
  count() %>%
  collect()

```

# consistency cleaning
```{r}
clean_bd = db_bd %>%
  mutate(standard_target_type = ifelse(standard == "plasmid-pisces", "ITS1", standard_target_type),
         standard_target_type = ifelse(standard == "genomic", "zoospore", standard_target_type),
         standard = ifelse(standard == "plasmid" & qpcr_lab == "snarl", "plasmid-briggs", standard),
         qpcr_date = case_match(qpcr_plate_name,
                                "RIBBiTR_qPCR_Penn2023_18August2023_Plate3" ~ as.Date("2023-08-18"),
                                "vs17-04-01plate 2 field" ~ as.Date("2017-10-31"),
                                "VS19-07plate7field(2)" ~ as.Date("2019-08-07"),
                                .default = qpcr_date))

db_bd = db_bd %>%
  rows_update(clean_bd, by = "result_id", unmatched = "ignore", in_place = TRUE)

```

# visualize discrepancies
```{r}
start_quant_disc = common_data %>%
  filter(sn_start_quant != rb_average_target_quant)

ggplot(data=common_data, aes(x=log(sn_start_quant), y=log(rb_average_target_quant), color=sn_date_start)) +
      geom_point()

# 3 discrepancies

ct_disc = common_data %>%
  filter(sn_quant_cycle != rb_average_ct)

ggplot(data=common_data, aes(x=sn_quant_cycle, y=rb_average_ct, color=sn_date_start)) +
      geom_point()

# 2 discrepancies
```

# sample coherency check
```{r}

# every sample result should show up in the sample table
sample_bd = db_bd %>%
  anti_join(db_sample, by = "sample_id") %>%
  collect()

results_unmatched = db_bd %>%
  left_join(db_sample, by = "sample_id") %>%
  filter(is.na(capture_id),
         sample_type == "bd") %>%
  collect() %>%
  arrange(sample_name_bd)

samples_unmatched = db_bd %>%
  right_join(db_sample, by = "sample_id") %>%
  filter(is.na(result_id),
         sample_type == "bd") %>%
  left_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(all_of(colnames(db_sample)),
         date,
         site,
         region,
         country) %>%
  collect() %>%
  arrange(sample_name)
```

# some fixes
```{r}
fix_bd = db_bd %>%
  filter(grepl("^1912\\d{2}_", sample_name_bd)) %>%
  collect() %>%
  mutate(sample_name_next = sample_name_bd,
         last_phrase = gsub("^1912\\d{2}_", "", sample_name_bd),
         sample_name_next = ifelse(grepl("^K", last_phrase),
                                   gsub("_K0", "_k", sample_name_next),
                                   gsub("_0", "_", sample_name_next))) %>%
  left_join(db_sample %>%
              filter(sample_type == "bd") %>%
              collect(), by = c("sample_name_next" = "sample_name")) %>%
  mutate(sample_id = coalesce(sample_id.y, sample_id.x),
         sample_name_bd = sample_name_next) %>%
  select(all_of(colnames(db_bd)))

# temp_bd = stage_to_temp(dbcon, db_bd, fix_bd)
# pointer = tbl(dbcon, temp_bd)
# db_bd = rows_update(db_bd, pointer, by = "result_id", in_place=TRUE, unmatched = "ignore")

```

# fix maligned names
```{r}
bd_update = db_bd %>%
  inner_join(db_sample %>%
               filter(sample_type == "bd"), by = "sample_id") %>%
  filter(sample_name != sample_name_bd) %>%
  mutate(sample_name_bd = sample_name) %>%
  select(all_of(colnames(db_bd))) %>%
  collect()

# db_bd = db_bd %>%
#   rows_update(bd_update, by = "result_id", unmatched = "ignore", in_place = TRUE)
```

# bd sample_id duplicates
```{r}
dupes = get_dupes(db_bd %>% filter(replicate %in% c("singlet", "singley")) %>%collect(), sample_id)
dupes_to_drop = dupes %>%
  filter(grepl("^pce_\\d{3}$", sample_name_bd)) %>%
  select(-dupe_count)

temp_bd = stage_to_temp(dbcon, db_bd, dupes_to_drop)
pointer = tbl(dbcon, temp_bd)
db_bd = rows_delete(db_bd, pointer, by = "result_id", in_place=TRUE, unmatched = "ignore")

```

# drop samples with no basis in results or capture
```{r}
# clean sample table, anything that should not be there
sample_drop = db_sample %>%
  anti_join(db_capture, by = "capture_id") %>%
  anti_join(db_bd %>% mutate(sample_type = "bd"), by = c("sample_name" = "sample_name_bd", "sample_type")) %>%
  anti_join(db_mucosome %>% mutate(sample_type = "mucosome"), by = c("sample_name" = "sample_name_mucosome", "sample_type")) %>%
  collect()

sample_drop = db_sample %>%
  anti_join(db_capture, by = "capture_id") %>%
  anti_join(db_bd %>% mutate(sample_type = "bd"), by = c("sample_id")) %>%
  anti_join(db_mucosome %>% mutate(sample_type = "mucosome"), by = c("sample_id"))

samps = db_sample %>%
  filter(sample_id == "29053744-6717-4f8a-8c91-629d87b6409f") %>%
  collect()

samps2 = db_bd %>%
  filter(sample_id == "29053744-6717-4f8a-8c91-629d87b6409f") %>%
  collect()

db_sample = db_sample %>%
  rows_delete(sample_drop, by = "sample_id", in_place = TRUE, unmatched = "ignore")
```

# fix incorrect sample names
```{r}
# check names
names_bd = db_bd %>%
  inner_join(db_sample, by = "sample_id") %>%
  filter(sample_name != sample_name_bd) %>%
  select(sample_id,
         sample_name,
         sample_name_bd) %>%
  collect()

# fix names

update_sample = db_bd %>%
  inner_join(db_sample, by = "sample_id") %>%
  filter(sample_name != sample_name_bd) %>%
  mutate(sample_name = sample_name_bd) %>%
  select(all_of(colnames(db_sample)))

rows_update(db_sample, update_sample, by = "sample_id", in_place=TRUE, unmatched = "ignore")

```

# add lab where missing
```{r}
update_bd = db_bd %>%
  filter(is.na(qpcr_lab)) %>%
  mutate(qpcr_lab = "rz_lab")

db_bd = db_bd %>%
  rows_update(update_bd, by = "result_id", in_place=TRUE, unmatched = "ignore")

```

# missing dates
```{r}
no_date = db_bd %>%
  filter(is.na(qpcr_date)) %>%
  group_by(qpcr_plate_name) %>%
  count() %>%
  collect()

# pull from plate name?
```

# extract volume
```{r}
ev_bd = db_bd %>%
  mutate(extract_volume_uL = ifelse(extraction_kit == "qiagen_dneasy", 200, extract_volume_uL))

db_bd = db_bd %>%
  rows_update(ev_bd, by = "result_id", in_place=TRUE, unmatched = "ignore")

```

# replicate
```{r}
rep_bd = db_bd %>%
  group_by(replicate) %>%
  count() %>%
  collect()

```

# set na target quant to 0 if negative
```{r}
bd_zeros = db_bd %>%
  filter(is.na(target_quant) & detected == FALSE) %>%
  mutate(target_quant = 0)

db_bd = db_bd %>%
  rows_update(bd_zeros, by = "result_id", in_place=TRUE, unmatched = "ignore")

```

# singular_sample_results
```{r}
ssr = db_bd %>%
  group_by(sample_name_bd) %>%
  mutate(samp_count = n(),
         singular_sample_results = (samp_count == 1)) %>%
  ungroup() %>%
  select(-samp_count)

db_bd = db_bd %>%
  rows_update(ssr, by = "result_id", in_place=TRUE, unmatched = "ignore")

```

# correct qpcr_volumes
```{r}
volumes_update = db_bd %>%
  filter(total_qpcr_volume_uL == 200) %>%
  mutate(total_qpcr_volume_uL = 25)

db_bd = db_bd %>%
  rows_update(volumes_update, by = "result_id", in_place=TRUE, unmatched = "ignore")

```

# duplicates in kira miller pep
```{r}
bd_sample = db_bd %>%
  left_join(db_sample, by = "sample_id") %>%
  inner_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(visit_lab == "km_pep") %>%
  select(sample_id,
         sample_name,
         qpcr_plate_name,
         target_quant,
         qpcr_dilution_factor,
         target_quant_per_swab,
         capture_id) %>%
  collect()

peace = get_dupes(bd_sample, sample_id)

hope = db_bd %>%
  group_by(qpcr_lab,
           qpcr_dilution_factor,
           template_dna_volume_uL,
           extract_volume_uL,
           standard_target_type) %>%
  count() %>%
  collect()

bd_update_df = db_bd %>%
  filter(qpcr_lab == "snarl",
         standard_target_type == "ITS1",
         qpcr_dilution_factor == 1) %>%
  mutate(qpcr_dilution_factor = 10)

db_bd = db_bd %>%
  rows_update(bd_update_df, by = "result_id", in_place=TRUE, unmatched = "ignore")

bd_drop_dupes = db_bd %>%
  filter(qpcr_plate_name %in% c("KM_262", "KM_2"),
         sample_id %in% peace$sample_id)

db_bd = db_bd %>%
  rows_delete(bd_drop_dupes, by = "sample_id", in_place = TRUE, unmatched = "ignore")

```

```{r}

update_detected = db_bd %>%
  mutate(detected = case_match(target_quant,
                               0 ~ FALSE,
                               NA ~ NA,
                               .default = TRUE))

db_bd = db_bd %>%
  rows_update(update_detected, by = "result_id", in_place=TRUE, unmatched = "ignore")

subset = db_bd %>%
  filter(is.na(target_quant) & !is.na(detected)) %>%
  select(sample_name_bd,
         cycle_quant,
         target_quant,
         detected,
         qpcr_plate_name) %>%
  collect()

subset = db_bd %>%
  filter(target_quant == 0 & (detected | is.na(detected))) %>%
  select(sample_name_bd,
         cycle_quant,
         target_quant,
         detected,
         qpcr_plate_name) %>%
  collect()

subset = db_bd %>%
  filter(target_quant == 0 & cycle_quant > 0) %>%
  select(sample_name_bd,
         cycle_quant,
         target_quant,
         detected,
         qpcr_plate_name) %>%
  collect()

subset = db_bd %>%
  filter(target_quant > 0 & (!detected | is.na(detected))) %>%
  select(sample_name_bd,
         cycle_quant,
         target_quant,
         detected,
         qpcr_plate_name) %>%
  collect()

```