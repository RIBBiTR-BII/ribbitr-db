---
title: "orphan_ripple_drop"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)

# connect to database
dbcon = hopToDB("wibbitr")

mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from 
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_mucosome = tbl(dbcon, Id("survey_data", "mucosome_gia"))
db_amp_total = tbl(dbcon, Id("survey_data", "amp_total"))
db_amp_peak = tbl(dbcon, Id("survey_data", "amp_maldi_peak"))
db_amp_intensity = tbl(dbcon, Id("survey_data", "amp_maldi_intensity"))
db_amp_gia = tbl(dbcon, Id("survey_data", "amp_gia"))

db_sample = tbl(dbcon, Id("survey_data", "sample"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

```

# Visit orphans
```{r}
drop_ids = tray$orphan$visit_id
  
drop_visit = db_visit %>%
  filter(visit_id %in% drop_ids)

count = as.character(drop_visit %>% count() %>% pull())
cat("visit:", count, "\n")

drop_survey = db_survey %>%
  right_join(drop_visit, by = "visit_id") %>%
  select(all_of(colnames(db_survey))) %>%
  filter(!is.na(survey_id))

hope = drop_visit %>%
  collect()
peace = drop_survey %>%
  collect()

count = as.character(drop_survey %>% count() %>% pull())
cat("survey:", count, "\n")

drop_env = db_env %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_env))) %>%
  filter(!is.na(environmental_id))

count = as.character(drop_env %>% count() %>% pull())
cat("env:", count, "\n")

drop_edna = db_edna %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_edna))) %>%
  filter(!is.na(edna_id))

count = as.character(drop_edna %>% count() %>% pull())
cat("edna:", count, "\n")

drop_aural = db_aural %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_aural))) %>%
  filter(!is.na(aural_id))

count = as.character(drop_aural %>% count() %>% pull())
cat("aural:", count, "\n")

drop_ves = db_ves %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_ves))) %>%
  filter(!is.na(ves_id))

count = as.character(drop_ves %>% count() %>% pull())
cat("ves:", count, "\n")

drop_capture = db_capture %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_capture))) %>%
  filter(!is.na(capture_id))

count = as.character(drop_capture %>% count() %>% pull())
cat("capture:", count, "\n")

# all associated capture samples
drop_sample_all = db_sample %>%
  right_join(drop_capture, by = "capture_id") %>%
  select(all_of(colnames(db_sample))) %>%
  filter(!is.na(sample_id))

# associated capture samples with bd results
bd_samples = db_bd %>%
  select(sample_id) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# associated capture samples with mucosome results
mucosome_samples = db_mucosome %>%
  select(sample_id) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# associated capture samples with amp results
amp_samples = union_all(
  db_amp_total %>%
    select(sample_id),
  db_amp_peak %>%
    select(sample_id),
  db_amp_intensity %>%
    select(sample_id),
  db_amp_gia %>%
    select(sample_id)
) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# updated samples
update_sample_bd = drop_sample_all %>%
  inner_join(bd_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample_musosome = drop_sample_all %>%
  inner_join(mucosome_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample_amp = drop_sample_all %>%
  inner_join(amp_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample = bind_rows(update_sample_bd,
                          update_sample_musosome,
                          update_sample_amp) %>%
  mutate(capture_id = NA)


count = as.character(update_sample %>% count() %>% pull())
cat("sample_update:", count, "\n")

drop_sample = drop_sample_all %>%
  anti_join(bd_samples, by = "sample_id") %>%
  anti_join(mucosome_samples, by = "sample_id") %>%
  anti_join(amp_samples, by = "sample_id")

count = as.character(drop_sample %>% count() %>% pull())
cat("sample_drop:", count, "\n")

peace = drop_sample %>%
  collect()

```

# cascade drop
```{r}

dbBegin(dbcon)

tryCatch(
  {
    db_sample = db_sample %>%
      rows_delete(drop_sample %>% select(sample_id), by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    temp_sample = stage_to_temp(dbcon, db_sample, update_sample)
    pointer = tbl(dbcon, temp_sample)
    db_sample = db_sample %>%
      rows_update(pointer, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    db_aural = db_aural %>%
      rows_delete(drop_aural %>% select(aural_id), by="aural_id", unmatched = "ignore", in_place=TRUE)
    db_capture = db_capture %>%
      rows_delete(drop_capture %>% select(capture_id), by="capture_id", unmatched = "ignore", in_place=TRUE)
    db_ves = db_ves %>%
      rows_delete(drop_ves %>% select(ves_id), by="ves_id", unmatched = "ignore", in_place=TRUE)
    db_env = db_env %>%
      rows_delete(drop_env %>% select(environmental_id), by="environmental_id", unmatched = "ignore", in_place=TRUE)
    db_edna = db_edna %>%
      rows_delete(drop_edna %>% select(edna_id), by="edna_id", unmatched = "ignore", in_place=TRUE)
    
    db_survey = db_survey %>%
      rows_delete(drop_survey %>% select(survey_id), by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    db_visit = db_visit %>%
      rows_delete(drop_visit %>% select(visit_id), by="visit_id", unmatched = "ignore", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```
# survey orphans
```{r}
drop_ids = pa_sids

drop_survey = db_survey %>%
  filter(survey_id %in% drop_ids)

count = as.character(drop_survey %>% count() %>% pull())
cat("drop_survey:", count, "\n")

drop_env = db_env %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_env))) %>%
  filter(!is.na(environmental_id))

count = as.character(drop_env %>% count() %>% pull())
cat("env:", count, "\n")

drop_edna = db_edna %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_edna))) %>%
  filter(!is.na(edna_id))

count = as.character(drop_edna %>% count() %>% pull())
cat("edna:", count, "\n")

drop_aural = db_aural %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_aural))) %>%
  filter(!is.na(aural_id))

count = as.character(drop_aural %>% count() %>% pull())
cat("aural:", count, "\n")

drop_ves = db_ves %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_ves))) %>%
  filter(!is.na(ves_id))

count = as.character(drop_ves %>% count() %>% pull())
cat("ves:", count, "\n")

drop_capture = db_capture %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_capture))) %>%
  filter(!is.na(capture_id))

count = as.character(drop_capture %>% count() %>% pull())
cat("capture:", count, "\n")

# all associated capture samples
drop_sample_all = db_sample %>%
  right_join(drop_capture, by = "capture_id") %>%
  select(all_of(colnames(db_sample))) %>%
  filter(!is.na(sample_id))

# associated capture samples with bd results
bd_samples = db_bd %>%
  select(sample_id) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# associated capture samples with mucosome results
mucosome_samples = db_mucosome %>%
  select(sample_id) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# associated capture samples with amp results
amp_samples = union_all(
  db_amp_total %>%
    select(sample_id),
  db_amp_peak %>%
    select(sample_id),
  db_amp_intensity %>%
    select(sample_id),
  db_amp_gia %>%
    select(sample_id)
) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# updated samples
update_sample_bd = drop_sample_all %>%
  inner_join(bd_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample_musosome = drop_sample_all %>%
  inner_join(mucosome_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample_amp = drop_sample_all %>%
  inner_join(amp_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample = bind_rows(update_sample_bd,
                          update_sample_musosome,
                          update_sample_amp) %>%
  mutate(capture_id = NA)

count = as.character(update_sample %>% count() %>% pull())
cat("sample_update:", count, "\n")

drop_sample = drop_sample_all %>%
  anti_join(bd_samples, by = "sample_id") %>%
  anti_join(mucosome_samples, by = "sample_id") %>%
  anti_join(amp_samples, by = "sample_id")

count = as.character(drop_sample %>% count() %>% pull())
cat("sample_drop:", count, "\n")
```

# cascade drop
```{r}


dbBegin(dbcon)

tryCatch(
  {
    db_sample = db_sample %>%
      rows_delete(drop_sample %>% select(sample_id), by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    temp_sample = stage_to_temp(dbcon, db_sample, update_sample)
    pointer = tbl(dbcon, temp_sample)
    db_sample = db_sample %>%
      rows_update(pointer, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    db_aural = db_aural %>%
      rows_delete(drop_aural %>% select(aural_id), by="aural_id", unmatched = "ignore", in_place=TRUE)
    db_capture = db_capture %>%
      rows_delete(drop_capture %>% select(capture_id), by="capture_id", unmatched = "ignore", in_place=TRUE)
    db_ves = db_ves %>%
      rows_delete(drop_ves %>% select(ves_id), by="ves_id", unmatched = "ignore", in_place=TRUE)
    db_env = db_env %>%
      rows_delete(drop_env %>% select(environmental_id), by="environmental_id", unmatched = "ignore", in_place=TRUE)
    db_edna = db_edna %>%
      rows_delete(drop_edna %>% select(edna_id), by="edna_id", unmatched = "ignore", in_place=TRUE)
    
    db_survey = db_survey %>%
      rows_delete(drop_survey %>% select(survey_id), by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

# capture ids
```{r}
drop_ids = cids

drop_capture = db_capture %>%
  filter(capture_id %in% drop_ids)

count = as.character(drop_capture %>% count() %>% pull())
cat("capture:", count, "\n")

# all associated capture samples
drop_sample_all = db_sample %>%
  right_join(drop_capture, by = "capture_id") %>%
  select(all_of(colnames(db_sample))) %>%
  filter(!is.na(sample_id))

# associated capture samples with bd results
bd_samples = db_bd %>%
  select(sample_id) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# associated capture samples with mucosome results
mucosome_samples = db_mucosome %>%
  select(sample_id) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# associated capture samples with amp results
amp_samples = dplyr::union(
  db_amp_total %>%
    select(sample_id),
  db_amp_peak %>%
    select(sample_id),
  db_amp_intensity %>%
    select(sample_id),
  db_amp_gia %>%
    select(sample_id)
) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# updated samples
update_sample_bd = drop_sample_all %>%
  inner_join(bd_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample_musosome = drop_sample_all %>%
  inner_join(mucosome_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample_amp = drop_sample_all %>%
  inner_join(amp_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample = bind_rows(update_sample_bd,
                          update_sample_musosome,
                          update_sample_amp) %>%
  mutate(capture_id = NA)


count = as.character(update_sample %>% count() %>% pull())
cat("sample_update:", count, "\n")

drop_sample = drop_sample_all %>%
  anti_join(bd_samples, by = "sample_id") %>%
  anti_join(mucosome_samples, by = "sample_id") %>%
  anti_join(amp_samples, by = "sample_id")

count = as.character(drop_sample %>% count() %>% pull())
cat("sample_drop:", count, "\n")
```

# cascade drop
```{r}


dbBegin(dbcon)

tryCatch(
  {
    db_sample = db_sample %>%
      rows_delete(drop_sample %>% select(sample_id), by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    temp_sample = stage_to_temp(dbcon, db_sample, update_sample)
    pointer = tbl(dbcon, temp_sample)
    db_sample = db_sample %>%
      rows_update(pointer, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    db_capture = db_capture %>%
      rows_delete(drop_capture %>% select(capture_id), by="capture_id", unmatched = "ignore", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

# sample ids

```{r}
drop_ids = sids

# all associated capture samples
drop_sample_all = db_sample %>%
  filter(sample_id %in% drop_ids)

# associated capture samples with bd results
bd_samples = db_bd %>%
  select(sample_id) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# associated capture samples with mucosome results
mucosome_samples = db_mucosome %>%
  select(sample_id) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# associated capture samples with amp results
amp_samples = dplyr::union(
  db_amp_total %>%
    select(sample_id),
  db_amp_peak %>%
    select(sample_id),
  db_amp_intensity %>%
    select(sample_id),
  db_amp_gia %>%
    select(sample_id)
) %>%
  distinct() %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  filter(!is.na(sample_id))

# updated samples
update_sample_bd = drop_sample_all %>%
  inner_join(bd_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample_musosome = drop_sample_all %>%
  inner_join(mucosome_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample_amp = drop_sample_all %>%
  inner_join(amp_samples %>% select(sample_id), by = "sample_id") %>%
  collect()

update_sample = bind_rows(update_sample_bd,
                          update_sample_musosome,
                          update_sample_amp) %>%
  mutate(capture_id = NA)


count = as.character(update_sample %>% count() %>% pull())
cat("sample_update:", count, "\n")

drop_sample = drop_sample_all %>%
  anti_join(bd_samples, by = "sample_id") %>%
  anti_join(mucosome_samples, by = "sample_id") %>%
  anti_join(amp_samples, by = "sample_id")

count = as.character(drop_sample %>% count() %>% pull())
cat("sample_drop:", count, "\n")

```

# cascade drop (actually no cascading here...)
```{r}


dbBegin(dbcon)

tryCatch(
  {
    db_sample = db_sample %>%
      rows_delete(drop_sample %>% select(sample_id), by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    temp_sample = stage_to_temp(dbcon, db_sample, update_sample)
    pointer = tbl(dbcon, temp_sample)
    db_sample = db_sample %>%
      rows_update(pointer, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```


# cascade drop samples to bd table
```{r}
drop_ids = sids

# all associated capture samples
drop_sample = db_sample %>%
  filter(sample_id %in% drop_ids,
         sample_type == "bd",
         is.na(capture_id))

# associated capture samples with bd results
drop_bd = db_bd %>%
  inner_join(drop_sample, by = "sample_id") %>%
  select(all_of(colnames(db_bd))) %>%
  filter(!is.na(sample_id))
```

# cascade drop
```{r}


dbBegin(dbcon)

tryCatch(
  {
    db_bd = db_bd %>%
      rows_delete(drop_bd %>% select(sample_id), by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    db_sample = db_sample %>%
      rows_delete(drop_sample %>% select(sample_id), by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```