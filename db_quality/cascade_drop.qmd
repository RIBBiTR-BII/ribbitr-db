---
title: "orphan_ripple_drop"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)

# connect to database
dbcon = hopToDB("wibbitr")

```

Pull metadata and tables

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from 
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))


```

# Visit orphans
```{r}
drop_ids = c(
 "cd0e03b5-5e1c-4911-8db9-0c454ca1318e",
 "6b01ad4f-0451-4b39-a76b-5aee1c58222f",
 "963f6123-6b4d-46e5-b055-94dea6cd7c83", 
 "ed6fe5e3-38db-412d-a09a-0e081a3ba5ab",
 "46ac9252-f3ab-4ca9-8d0b-e16da293a380",
 "4a0a154f-9f95-4877-825b-24891ef83c39", 
 "7f9a09d7-f466-4f68-82aa-3d3c42e8a906",
 "db3ea411-5c03-474f-9bc4-bf745b405858",
 "0e6d64d8-3e4e-44ba-8e3b-24ebbcf640a4", 
 "0dbd9a02-2341-40a5-812e-6d627564fb0b",
 "98d94361-5697-4542-af6c-084002bb2099",
 "333639e3-efb9-490d-846b-86652fd0894b", 
 "01a539ed-42d5-4bc2-a0bb-83cc91815207",
 "083995b7-60f2-4087-a5d4-76b90a7c75fc",
 "b4b09a71-66f2-424c-afd1-2339d631ab18", 
 "64fa02bd-7d9d-477b-b17c-d7d6ba588410",
 "b78f4abb-0427-4c28-b2b9-aaff2265203f",
 "500cfbf3-fd7d-4313-b5f7-32b452172676", 
 "32b3cf15-a309-45ab-a7d8-79ebdc9550d0",
 "c2e668b3-456f-4962-a9f3-1a6c17f925f8",
 "2c531b9b-4ad3-4711-ad47-731d18c2a0ad", 
 "46bda532-8a4f-4a06-8d92-5befe93e7638",
 "071830be-d52a-47ff-ad02-5e7a95d72d2b",
 "66afd931-ff0b-4919-950d-9a42b20961f3", 
 "4944425d-fc41-4447-808a-dd049dfce91b",
 "af6026cf-98d3-42a6-92fc-e46c69f14506",
 "dddecbb1-a6e3-4e6c-80e8-9ab96b1f654c", 
 "22430eea-5a1f-4659-9166-8a788e6f4f6b",
 "1d3e59fb-31da-471f-adc0-1e188350c4f6",
 "7ae0bb0b-c1bd-4471-8239-17e80b4d189d", 
 "338e8185-ce0d-4bb4-bce1-8dddc197acec",
 "f66c22a0-733c-4b94-b3f8-1c53caecb654",
 "b9ebbb51-b251-4aa4-b797-052bdf21fa43", 
 "21188e4c-c110-4458-b868-9bd53fc616c1",
 "64fd840a-b789-4ae7-9dc7-659f760e9da2",
 "5ae6e57c-4440-4d39-85f9-1b82d96abd8b", 
 "0cfc728e-5356-4687-b483-7c4988f0e0d7",
 "44d9be12-53af-4112-a5eb-f10b276e4d14",
 "b59a94e8-744a-47a4-81e7-a865f302bc07", 
 "f93c6667-e312-439f-a148-db3293cbf90b",
 "7b2859ac-e3b0-44d6-80ba-b4051f44f378",
 "e353168a-1eb1-43cf-877c-80d1678fbacc", 
 "bd03fd3e-c1cf-45b6-8a56-8ad0487e5bec",
 "76b969d3-96d9-42f7-ada9-f094d4f71858",
 "151dfaeb-abc1-4dce-963e-ecaca0e89015", 
 "16cb7766-40ac-4649-b2be-a3b7e503260e",
 "4b54c0f5-3e3a-4aa1-95a4-0e054da466dd",
 "5f329605-72e9-4d95-9338-22a05284fd21", 
 "b3a9d3ca-5f79-460e-b161-a2f2a29dd333",
 "f100111e-bfa4-45da-b205-a14f0e41f48f",
 "073dd7f9-e3c2-4fc0-b545-fe760b429c1b", 
 "ba243693-a86c-40dc-8d33-3e1e54806565",
 "499d553f-a8d8-493f-bbc0-0f57ae254371",
 "61c64536-0a1c-4565-a29d-517d946f161d", 
 "25731d1a-7206-4efd-8502-e7fd46bc4089",
 "2c28b859-30b0-4935-b347-b088a4b8b392",
 "4d2321ff-5eeb-4f9c-aceb-987b0f785afb", 
 "5726e765-b92e-4887-a85d-a74f3a178f5a",
 "5e4390e2-cd78-4759-ab7a-4ffc61f6c0de",
 "66773b40-2444-4d08-bf7f-8eebfdd40346", 
 "5a56d2e3-aa9c-49ef-ab5f-4458c2b31671",
 "cea1d872-bd97-47e2-a186-7d4581698866",
 "05a07720-b758-403f-97df-33eeca50836a", 
 "41d6492e-fcca-46b9-b8a7-6e426c2815b5",
 "efeb7746-9568-4771-8f31-5effb382c66a",
 "1ab74d20-810f-4abc-b8c9-83ebca8a5267", 
 "ada7760c-f120-4571-b5b8-e1d72e8f3a90",
 "91017a06-37cc-4cf4-8317-df9fcc6ce543",
 "0f42950f-22c2-4403-9846-ce881ee1346f", 
 "97eb72bd-37d2-40c7-8baa-de530ac87bfb",
 "3004a02c-8b62-41de-9e21-0f17149eed46",
 "65b37c97-ff18-434b-9e39-06e7fd7f6a8a", 
 "09aca49b-a4fa-472e-b2b7-aa2b314dfd44",
 "2d67e8f4-1496-4ec2-a892-8e367fa3b082",
 "26c53b86-ada5-4418-9836-7d7323680ae0", 
 "6d6c9bdb-8a27-47a6-8892-179725d94efc",
 "b3b83532-55b1-4edc-8d40-f89c57a1d367",
 "19a40891-6609-44fa-9ed6-17ab80623dce", 
 "294be729-f57e-4fcc-9b16-f0369697afad",
 "90fa9969-5039-4f7a-beb2-e48ed6603799",
 "5c45d281-c11b-4640-be5a-643e5557e1f8", 
 "84cf99e9-a8c3-4e97-a33b-eab1d4e436f5",
 "26443e6d-bee3-4dad-b537-fd55a0036671",
 "da01de02-ca18-4084-9639-9bfb10b7c082", 
 "3d4043f4-0969-4581-a9a5-6a8e03ba8042",
 "d7469497-6424-4845-a188-0d0d66c73873",
 "ee376dad-7ecf-44df-86ce-c9c155ae222e", 
 "cd759f15-1a02-4b76-88af-55b62191881d",
 "58267801-cbe6-4877-90df-98a40664cfb8",
 "59965217-5066-4f7b-b253-b90a623bf030", 
 "b28ae399-aec0-4182-9669-cce947b3ba8f",
 "b7322f1a-053f-41e5-8594-b9579c847813",
 "e781a3b3-43df-40f6-b72a-1444abc60d61", 
 "c7ff63cd-0cb3-4f7f-b742-7c9e44a7b311",
 "c0c4dc05-5aa6-4da4-b49d-03141c745204",
 "dfac0061-ffb6-444b-9f7d-402dff91da3c", 
 "ac06a29f-fe12-4de2-932d-12c8d5f339ee",
 "e8685d08-4ac5-4e01-b448-0e940d072b09",
 "65d65a45-8da0-4b8c-bc2d-8956c68122a1", 
 "8f41b5eb-00f6-4d30-8195-c1667eed64af",
 "bb90892d-7549-4f6b-af66-c95fecd111aa",
 "65ca9511-4c42-4819-bb05-407cbe128c57", 
 "d318f271-3be9-4bb8-995a-75731c953ae3",
 "3acc7955-2fda-4a25-a388-25324748bff9",
 "551e9474-03eb-409f-81dc-b194be8b0842", 
 "015bd48f-5d86-4273-8851-7694f41cffb5",
 "9541a299-9e1b-4298-9bba-a954acec60cf",
 "1802f484-ed21-49e6-a568-34cc5450a624", 
 "4a633576-2f5b-402e-be2e-a23b9c01f31c",
 "ff8de21d-62c0-4282-8540-9d4487fe5e3f",
 "81951319-8ec8-4f64-a033-6e55a155c114", 
 "6fe5e114-362d-4b83-8d50-f77a7a409f60",
 "1bbd4c41-4abe-4b47-bd19-d8c6f4482a35",
 "3937d71c-5d7c-4147-9b4a-2b1f94a4947b", 
 "06097851-7102-4396-a0c3-7f0dd249e14f",
 "17112594-d1c9-41d5-b0d0-0190cc5cb59f",
 "8ad0fe0e-2ff6-4eb0-9d08-69615b6ec8b6", 
 "3898077a-e1c5-404f-896e-c7b998b48276",
 "50945ffe-3b0a-4401-acb7-6d6bd8bafe2a",
 "4c9e405e-01f3-4c21-ab6b-051b8fc57c50", 
 "9d03c642-b483-4f1a-b0fe-b49d786fcc40",
 "b67e7e7a-87e3-47d5-be7b-c9bc7b4db33b",
 "4f6b9253-5b4d-440f-8802-84548abd7ae5", 
 "142cce6a-664c-42d2-917a-a524adf5c6ba",
 "fe699495-6d9a-4f40-9c08-c70219f2f468",
 "88441e94-13dd-4392-a393-4fa7d3e4fe08", 
 "7b788332-7a0f-48f3-8424-77033f2c5ff3",
 "06d6fdcf-9027-4e37-8537-46cf96f7c5f9",
 "7f5a6b34-262f-4c1f-94a7-6717a076d07a", 
 "a7f80d67-c3e9-4f4b-8b80-7429d8b89098",
 "57c249cd-1057-4b0d-a59f-8eb3e02af958",
 "3cf18528-2a2a-4b79-a366-d9d66e6e2b07", 
 "9f9851f1-dbfc-48ac-af96-61712fa6d09a",
 "c9ee7106-415c-47ec-8c09-36afb439a0ed",
 "c1676bd2-ad61-4867-9fb7-502a95efff2d", 
 "4cd33d9d-b569-4924-bb6d-4dfa23bab795"
)

drop_visit = db_visit %>%
  filter(visit_id %in% drop_ids)

count = as.character(drop_visit %>% count() %>% pull())
cat("visit:", count)

drop_survey = db_survey %>%
  right_join(drop_visit, by = "visit_id") %>%
  select(all_of(colnames(db_survey))) %>%
  filter(!is.na(survey_id))

count = as.character(drop_survey %>% count() %>% pull())
cat("survey:", count)

drop_env = db_env %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_env))) %>%
  filter(!is.na(environmental_id))

count = as.character(drop_env %>% count() %>% pull())
cat("env:", count)

drop_edna = db_edna %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_edna))) %>%
  filter(!is.na(edna_id))

count = as.character(drop_edna %>% count() %>% pull())
cat("edna:", count)

drop_aural = db_aural %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_aural))) %>%
  filter(!is.na(aural_id))

count = as.character(drop_aural %>% count() %>% pull())
cat("aural:", count)

drop_ves = db_ves %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_ves))) %>%
  filter(!is.na(ves_id))

count = as.character(drop_ves %>% count() %>% pull())
cat("ves:", count)

drop_capture = db_capture %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_capture))) %>%
  filter(!is.na(capture_id))

count = as.character(drop_capture %>% count() %>% pull())
cat("capture:", count)

drop_sample_all = db_sample %>%
  right_join(drop_capture, by = "capture_id") %>%
  select(all_of(colnames(db_sample))) %>%
  filter(!is.na(sample_id))

bd_samples = db_bd %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  select(sample_id) %>%
  filter(!is.na(sample_id))

update_sample = drop_sample_all %>%
  inner_join(bd_samples, by = "sample_id") %>%
  mutate(capture_id = NA) %>%
  collect()

count = as.character(update_sample %>% count() %>% pull())
cat("sample_update:", count)

drop_sample = drop_sample_all %>%
  anti_join(bd_samples, by = "sample_id")

count = as.character(drop_sample %>% count() %>% pull())
cat("sample_drop:", count)


```

# cascade drop
```{r}

dbBegin(dbcon)

tryCatch(
  {
    db_sample = db_sample %>%
      rows_delete(drop_sample, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    temp_sample = stage_to_temp(dbcon, db_sample, update_sample)
    pointer = tbl(dbcon, temp_sample)
    db_sample = db_sample %>%
      rows_update(pointer, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    db_aural = db_aural %>%
      rows_delete(drop_aural, by="aural_id", unmatched = "ignore", in_place=TRUE)
    db_capture = db_capture %>%
      rows_delete(drop_capture, by="capture_id", unmatched = "ignore", in_place=TRUE)
    db_ves = db_ves %>%
      rows_delete(drop_ves, by="ves_id", unmatched = "ignore", in_place=TRUE)
    db_env = db_env %>%
      rows_delete(drop_env, by="environmental_id", unmatched = "ignore", in_place=TRUE)
    db_edna = db_edna %>%
      rows_delete(drop_edna, by="edna_id", unmatched = "ignore", in_place=TRUE)
    
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    db_visit = db_visit %>%
      rows_delete(drop_visit, by="visit_id", unmatched = "ignore", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```
# survey orphans
```{r}
drop_ids = c(
  "a7686f1f-2c5b-417d-8134-2f57aa936444"
)

drop_survey = db_survey %>%
  filter(survey_id %in% drop_ids)

drop_env = db_env %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_env))) %>%
  filter(!is.na(environmental_id))

drop_aural = db_aural %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_aural))) %>%
  filter(!is.na(aural_id))

drop_capture = db_capture %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_capture))) %>%
  filter(!is.na(capture_id))

drop_ves = db_ves %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_ves))) %>%
  filter(!is.na(ves_id))

```

# cascade drop
```{r}

dbBegin(dbcon)

tryCatch(
  {
    db_aural = db_aural %>%
      rows_delete(drop_aural, by="aural_id", unmatched = "ignore", in_place=TRUE)
    db_capture = db_capture %>%
      rows_delete(drop_capture, by="capture_id", unmatched = "ignore", in_place=TRUE)
    db_ves = db_ves %>%
      rows_delete(drop_ves, by="ves_id", unmatched = "ignore", in_place=TRUE)
    db_env = db_env %>%
      rows_delete(drop_env, by="environmental_id", unmatched = "ignore", in_place=TRUE)
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

