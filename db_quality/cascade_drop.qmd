---
title: "orphan_ripple_drop"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)

# connect to database
dbcon = hopToDB("wibbitr")

```

Pull metadata and tables

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from 
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))


```

# Visit orphans
```{r}
drop_ids = c("ecfd465d-7a02-5359-b27e-94fca9ca710f", "363d9515-6eeb-5344-aa27-4284e487c728", 
"68c01956-81a0-5dbc-9760-6f9c11f8ed3b", "54166a22-56b8-5b0d-9bb7-2fa61b242142", 
"06e7906b-2800-529d-bc0b-ba4c175d9cdf", "2417d954-cdcd-5eaa-9a6f-7fac577df709", 
"b84bb9e6-c10b-5935-833c-50f55b7f16ed", "f1478723-329c-5b4c-a264-91ff270f8bd6", 
"1d9febf9-d66d-59b6-96ca-03f4f1b51088", "b1fea89d-69ba-5c0f-895c-3abb8f60b38b", 
"2a1c1977-7a69-58ae-a8ad-d7a32608f343", "ada5cdff-dc78-5b68-99ba-b4141a7c7d92", 
"c59e9f25-bb35-5fd1-a900-dbb0c1efcf30", "f5753642-5956-5fb1-8ac4-e44d18426d13", 
"a1753df7-4777-5ece-a70e-f80b53a2e550", "24b1bd9f-c239-5884-b44b-97c607376f3b", 
"41828dd8-6b7f-5b9f-a869-a356158d2131", "8844f0f3-c613-5817-a57f-d7abc6bdfcd3", 
"e60a607e-d7ca-56d6-8ded-919dae2f8724", "64882455-a77a-5ae6-a6b4-89adc3167e7c", 
"5c261977-889e-5746-9e66-66a9486cdf20", "b49e193c-746b-537f-8155-dbc39106dad4", 
"986b4ae7-cc84-5329-a38e-3ef0e86149b0", "f2e02c07-2bb7-507f-a242-477e24fc18d1", 
"223eedc7-a6c3-586f-a4c2-4420e92ce99b", "ccaeeea5-5dda-5f48-955e-92c82ec9fd96", 
"605ce6cb-1c2c-5443-882c-272267e49c79", "7e970530-904d-51f0-b588-1df456648e0c", 
"caddcc42-7242-5091-8c94-fe41a4bfc5bc", "1447b61a-e07f-5493-bf63-9aab0744877a", 
"ecfd618f-92ea-52bc-9d50-5ce58c9733e1", "009b35b4-07da-511f-903d-00b7d1536357", 
"0184a015-a681-51ae-96f6-6aebc77fd7ec", "d1047352-2482-545f-abc3-490bd1b73648", 
"9a41557f-e8e6-58a2-8899-04b8d14041fd", "9c141162-6d0a-5a95-a18f-ae91ba0c370c", 
"23a2599e-c529-5e44-a168-5430a60b092d", "dc4c547d-8b6f-50a1-86d0-aa7134bd81f8", 
"3dbe5236-bb40-593a-9ef3-83b910a1b2fc", "00d9f26c-1976-58c8-a8c6-28e4a0feaa0d", 
"da831e0b-6906-59ed-9b12-b46f5fdf4518", "0e4d5254-42b1-5525-b699-a0422042d386", 
"2a00a984-2cdd-5713-b293-772d790a5185", "ca3b8fec-cc33-5825-80db-632494394e31", 
"18aa98bc-d715-562b-8391-8b8375d2ea4b", "6108b021-8272-584f-8215-a225c2eb3e51", 
"6dc65ea2-91c7-5bdc-86ff-bb73a602b077", "23ce50dc-885a-5a6e-a152-885af31f25ea", 
"490eaa45-79bf-5787-bd1b-f40cb967d0de", "c47110f2-7a79-55df-a996-455c01450503", 
"f6711e37-9a21-5304-a6fe-4a0a34503111", "d3c23212-8ee7-5745-bef2-cb240c35b255", 
"93f371a2-6fb5-500b-9c7a-6d454b597c83", "9e451c1e-ff02-5c0e-8aad-04f05b1b859c", 
"97d502f0-20f2-5e85-b4b0-4c46bd3b4e03", "312a78b0-bb9c-5c0d-ae9b-170065ec415b", 
"1da4d974-59fc-5286-8389-102731af0c24", "9de2834a-93d3-5b4f-bca1-ba88c3057b5b", 
"fdcdb233-2854-50ab-988e-2930608e088a", "0a62e6e3-9acb-5ffb-a553-14d5f1696328", 
"37958ae5-7f75-5812-8df1-d389342ec090", "a4309222-a61f-5292-a46f-764c39c46e76", 
"4a99380e-b8e4-530f-b420-3f33a39299be", "26fc8fbe-57be-5400-b99f-5e83a7120025", 
"f91101ee-3eb5-5403-a0bb-453c90fad52f", "16f0bdd4-8f52-57b5-9012-101d5eca5910", 
"7b34ee17-1441-5368-9cc2-6f1d58b1dcb7", "4976bae4-a158-5b90-ae95-c5e900560ec7", 
"d1cffa6d-c1e7-5e7c-a38b-83611a479ede", "9a72172b-9ced-502a-9178-403bdbb6fef9", 
"04a17c93-e50b-571e-a129-c169e5af4eb1", "251d2782-d13a-5008-baae-bafbe847cb79", 
"591ac328-8694-5898-9fb4-f66043992bba", "244224a4-4927-570f-ba19-48c65952236b", 
"65412a0d-039e-5d60-a063-5aa906872c26", "abfc2da8-0676-512a-81fb-b5a056c84b5e", 
"e2538b4e-5957-5d67-90dd-893ef76ddfcd", "c65f17fd-2e1e-5359-9994-2c7b2ebbd6ad", 
"0696b23d-2dcd-5fbb-8e64-e4ba604839ce", "c2d47f99-49fe-57dc-a1a6-05b201e64fe9", 
"b22e6551-12bd-58c4-9da7-08b76610f0d8", "14bb36fa-519c-5ad2-b650-3a33224b72c0", 
"27e3d1da-8c7e-5161-9386-812921cad1c0", "66226b62-f5be-5853-8dff-4f9f19e201be", 
"b2f8560c-32c7-5ab5-8208-8dc53c411c53", "fc4844d0-7fde-5c94-9d46-14c3f31671b0", 
"285f53d1-b4c9-5153-a1cf-0b43efc43c67", "c4f0496c-42ab-5298-b434-23c5795593fd", 
"377918f9-7c4a-5523-9276-f5fd636c96b5", "2597e5f5-2f40-5f1a-8a0d-1e2b26730665", 
"044bf818-cc03-5375-838a-4351b31c264d", "35ad6ed1-c4ff-5195-a1d2-fab20c464a13", 
"b0956245-4e43-5947-bf36-e0fafa97d692", "f42697ca-8e3e-5002-8eff-cb31454957c2", 
"8b2e5599-eb9f-5590-ae7a-77c7d8c8269a", "bfb45173-6ca1-5cf2-aea2-f9493985ca40", 
"c6c471fd-7f2d-5786-8c6f-f4beaee30737", "9a878d7f-6e08-566b-add6-06530e1053ef", 
"59096798-a4dd-5668-81df-5030d8ae71d9", "687f2631-aa4e-5fd0-b06d-445c4c99fea4", 
"be1d6ee0-5c9d-5133-9ba4-383dea913381", "4a88534a-084d-5f8d-b140-65e046002841", 
"fd685ca5-ca1d-5207-84ea-d1fcb9e4a0d2", "20522ac0-37ef-582c-94f7-8779e285ea73", 
"a5952513-0d83-5447-b7e9-ecc031de2928", "888c376e-7d90-5051-a3a3-bc273839ab00", 
"3dd3e7ca-98fd-5cc9-97e7-3d0e0bf94255", "5434f981-a3ae-5867-952d-2e6c5310ca67", 
"aef78d4c-0d37-5882-bbb8-6cd3818df99a", "8ae6bb08-6be2-53ea-b7bb-8c1c33e2fabd", 
"20161b1d-231f-59d6-a48b-b3ee93a75382", "d6ad00a3-ca54-50e8-aaa8-94964ae6a247", 
"e2673686-ff78-5c35-a190-c50b1cc99539", "ef8e7238-b916-5b37-acc7-e9097d63c9d6", 
"25c90c79-864f-5dab-bab6-1ca8f4779c9a", "96e6b3d4-e1ec-5063-af52-509611238cfd", 
"4a401d80-c571-54ae-9689-97253f10fe3e", "427876a3-c13e-5249-a2f3-74ada7b1b972", 
"5f0edfe2-e0a0-5be2-9372-ac712dda0c20", "05943ab6-d9d8-5dfd-aede-bc23287a9fdd", 
"3245074c-e4e2-59be-92ba-e108b7f4cf15", "4ffcdb52-8162-5e9a-8c2e-4cf17574d4bd", 
"f11cd73e-84e5-5f1d-9d13-8c7a7617c40a", "363f0f61-f30c-57b8-97a9-86ad16f59209", 
"010891d9-b144-53c6-a128-676992d38737", "10afc142-954e-5d04-a5a7-48371c93c01f", 
"e939277e-63d0-5fb1-b0c6-8dd6368517f1", "736e533f-6db1-5ad1-8ceb-62812afe4718", 
"eca85cb2-848a-5fb0-891f-0ae062abe843", "2f03112f-122e-5b60-b207-ba31f9e25aef", 
"c66e7c5e-7bb3-5dcf-946b-30caad7e9249", "a9f190e3-be7a-5241-a979-2aa8609f350e", 
"9eb0b588-4d98-54d9-99cc-0df6dab8746d", "e0fabb43-fc9d-5b41-b7c0-36b25073ed45", 
"e0ec3c6c-88a9-5aec-bcd3-7a98fdfe904a", "6edb5aee-bd2f-5f45-ac4b-7a2621ef814a"
)

drop_visit = db_visit %>%
  filter(visit_id %in% drop_ids)

count = as.character(drop_visit %>% count() %>% pull())
cat("visit:", count)

drop_survey = db_survey %>%
  right_join(drop_visit, by = "visit_id") %>%
  select(all_of(colnames(db_survey))) %>%
  filter(!is.na(survey_id))

count = as.character(drop_survey %>% count() %>% pull())
cat("survey:", count)

drop_env = db_env %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_env))) %>%
  filter(!is.na(environmental_id))

count = as.character(drop_env %>% count() %>% pull())
cat("env:", count)

drop_edna = db_edna %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_edna))) %>%
  filter(!is.na(edna_id))

count = as.character(drop_edna %>% count() %>% pull())
cat("edna:", count)

drop_aural = db_aural %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_aural))) %>%
  filter(!is.na(aural_id))

count = as.character(drop_aural %>% count() %>% pull())
cat("aural:", count)

drop_ves = db_ves %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_ves))) %>%
  filter(!is.na(ves_id))

count = as.character(drop_ves %>% count() %>% pull())
cat("ves:", count)

drop_capture = db_capture %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_capture))) %>%
  filter(!is.na(capture_id))

count = as.character(drop_capture %>% count() %>% pull())
cat("capture:", count)

drop_sample_all = db_sample %>%
  right_join(drop_capture, by = "capture_id") %>%
  select(all_of(colnames(db_sample))) %>%
  filter(!is.na(sample_id))

bd_samples = db_bd %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  select(sample_id) %>%
  filter(!is.na(sample_id))

update_sample = drop_sample_all %>%
  inner_join(bd_samples, by = "sample_id") %>%
  mutate(capture_id = NA) %>%
  collect()

count = as.character(update_sample %>% count() %>% pull())
cat("sample_update:", count)

drop_sample = drop_sample_all %>%
  anti_join(bd_samples, by = "sample_id")

count = as.character(drop_sample %>% count() %>% pull())
cat("sample_drop:", count)


```

# cascade drop
```{r}

dbBegin(dbcon)

tryCatch(
  {
    db_sample = db_sample %>%
      rows_delete(drop_sample, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    temp_sample = stage_to_temp(dbcon, db_sample, update_sample)
    pointer = tbl(dbcon, temp_sample)
    db_sample = db_sample %>%
      rows_update(pointer, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    db_aural = db_aural %>%
      rows_delete(drop_aural, by="aural_id", unmatched = "ignore", in_place=TRUE)
    db_capture = db_capture %>%
      rows_delete(drop_capture, by="capture_id", unmatched = "ignore", in_place=TRUE)
    db_ves = db_ves %>%
      rows_delete(drop_ves, by="ves_id", unmatched = "ignore", in_place=TRUE)
    db_env = db_env %>%
      rows_delete(drop_env, by="environmental_id", unmatched = "ignore", in_place=TRUE)
    db_edna = db_edna %>%
      rows_delete(drop_edna, by="edna_id", unmatched = "ignore", in_place=TRUE)
    
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    db_visit = db_visit %>%
      rows_delete(drop_visit, by="visit_id", unmatched = "ignore", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```
# survey orphans
```{r}
drop_ids = c(
  "a7686f1f-2c5b-417d-8134-2f57aa936444"
)

drop_survey = db_survey %>%
  filter(survey_id %in% drop_ids)

drop_env = db_env %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_env))) %>%
  filter(!is.na(environmental_id))

drop_aural = db_aural %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_aural))) %>%
  filter(!is.na(aural_id))

drop_capture = db_capture %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_capture))) %>%
  filter(!is.na(capture_id))

drop_ves = db_ves %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_ves))) %>%
  filter(!is.na(ves_id))

```

# cascade drop
```{r}

dbBegin(dbcon)

tryCatch(
  {
    db_aural = db_aural %>%
      rows_delete(drop_aural, by="aural_id", unmatched = "ignore", in_place=TRUE)
    db_capture = db_capture %>%
      rows_delete(drop_capture, by="capture_id", unmatched = "ignore", in_place=TRUE)
    db_ves = db_ves %>%
      rows_delete(drop_ves, by="ves_id", unmatched = "ignore", in_place=TRUE)
    db_env = db_env %>%
      rows_delete(drop_env, by="environmental_id", unmatched = "ignore", in_place=TRUE)
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

