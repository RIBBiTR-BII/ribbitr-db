---
title: "orphan_ripple_drop"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)

# connect to database
dbcon = hopToDB("wibbitr")

```

Pull metadata and tables

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from 
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))


```

# Visit orphans
```{r}
drop_ids = c("cccb1798-b4ec-56f3-9ffa-0a4f0f3ef53c", "23029d53-71f5-5e69-9c0d-8d445ce71c2b", 
"c7f832d3-72ae-584f-a0ea-301f2a835fb0", "ecc00e80-ee49-5c6e-b2f2-351523879c3e", 
"9252c72b-902c-5b86-90e8-a5e5d7872760", "5a168042-d0cb-5d89-914f-a4f3d5a4e35f", 
"a86cc849-6834-5fa7-bcd3-3e92eb3779ab", "61398c58-cef7-523a-bf6c-228d6f038ba4", 
"884007e8-47ee-5a18-b078-995300efe342", "3a767758-1938-578d-b33f-b88e7dd4414e", 
"22b1572a-0023-564e-9aa6-bd40d9889607", "ffeb4368-d549-5372-ae84-4ba2ad78e150", 
"28441d04-3e5b-590c-b0aa-4b63f4cadbd2", "23334997-9412-5dd4-bd02-0e2a52b50c1e", 
"d99007ed-a04a-57ca-a260-b0b0093d4a93", "5ffbc3e9-ebb0-52da-990a-357f9a00a3da", 
"2a588e82-2422-58dc-b82e-2e0799882d2f", "a4860a9d-2ef4-5153-845d-f35ff2a894e1", 
"a937e715-845c-5b8f-bd67-5fab88aa3239", "c08795fd-21e9-5ebe-9127-e51788277a2d", 
"96717fbe-d925-5b41-b329-c418d8c4ce5c", "4619465a-d0af-5ad0-81ca-5dc2cb3c10c6", 
"93e07a2e-ce34-5a8a-9a5d-6f2cf6884cb2", "9383086c-3912-573a-afc5-8229be103e84", 
"0bbc2db2-e5b5-5801-92f1-388867ba9777", "80ac2748-4465-51a3-83b8-074313b7268d", 
"9460df72-c456-578b-a72d-73286bb29c46", "498e946c-4e9c-5520-a764-6a5a49d930f5", 
"8accabd6-4dd6-5491-8916-508401d0fc32", "6eecaf24-143d-54da-a576-d2a9084e27f6", 
"efbf9f4b-cc83-5632-8d59-60250e387d34", "52498ece-ff5c-5602-905f-106d6e7ca560", 
"c21c706b-cc1c-56fe-8ec5-c6671d989133", "dd707fbd-4e24-5d0c-9b4f-79c058e8a0a8", 
"364582d8-018b-510f-b03e-b728ac52288c", "3f8a84c8-cea8-57c2-9cca-639acc95a3ad", 
"ad0bbdfc-2127-58f6-b76b-1fbf6f1ddc9d", "830e1aa1-e13a-54d0-9efd-c6c47a37d0c9", 
"104083e4-8f72-5ddc-a529-db2f18a0e184", "1bfbf538-06ef-5e15-899a-0339bbd5a4d6", 
"16b030b4-d19d-5fb5-bb95-aa8bd150a2f6", "eb47e949-3470-5f66-81b0-025d5cfe71cf", 
"60c4dc6a-2c66-5640-9654-84971f593876", "e93ce8bd-2225-5f33-8fae-60d1ee8bc28f", 
"bda5fe1e-ef7d-5c8e-a269-33a5499622fd", "3f6e250c-004f-5e1a-880c-18f7d2fa2ce1", 
"cced4c53-a2e4-51b3-83d6-dbcdbbbae1bd", "1234af51-27d5-5a8c-9626-47dcddc66405", 
"2c32804d-b15e-539b-bb44-1b28b8b7fd1b", "f6acf8d8-09a9-5758-b012-6e5a81cbb53b", 
"2b8adad0-d3a0-55ee-aed7-d8b779660069", "27e48710-08d9-5fb3-9eb4-b64458f60434", 
"66299313-1c9a-566b-a2c0-96a7a669fc68", "7716454a-92de-587e-9966-7c579e77df04", 
"0eb84482-03d0-5571-9a56-c7a45698d040", "97522976-c88f-5bc4-a26d-4b702143fb42", 
"8775ae52-789d-5463-ada9-5a9694afa82c", "668b7ffa-c445-5553-9534-134f309b2b7b", 
"c46c907f-c99e-56d9-942e-c288b2f56328", "5b547b05-bea4-571b-a832-9b1b0a5fdaa8", 
"71867ab0-cf8a-52d3-96c8-405c7494b43c", "5679ea19-daa1-56c1-add6-0b6f82e204bf", 
"cb30e833-887a-51ab-ad4c-47b825862c9d", "b76263e5-b3f2-54c3-9522-6ee6cc051d6c", 
"34c53584-a98e-5eae-9af1-2064444de0a1", "0bf5b240-7295-5a17-b207-fb6b4cfcadc3", 
"99236f18-4adc-500d-ac8e-c3310426e64e", "103d48ac-8dc0-54be-87c6-f7905b28fdde", 
"77eac520-72d3-50fe-9205-8ef560dda18c", "5b34f92e-9bce-5778-90ec-b266dcabe03f", 
"65b927a6-b9e2-5e39-b803-133e5a7b00f0", "94e0f8f1-6d03-5d7a-83e7-caa836bb0ef3", 
"61e43e91-a4e9-5e1c-9347-45f82b4d1bcf", "a4d86fa2-0055-5ae7-b6d9-1f9bf5ef1798", 
"0ce316eb-2fb3-51e7-9dc0-3b65013e2645", "bde4502d-c137-532c-9571-a79ba0da96f2", 
"28c0038a-fc9a-5370-a24e-ce146e9341fa", "6d115f54-72e0-5b10-aadd-ecd0c9468ed2", 
"864032a3-16fa-542b-a754-95844da72009", "e5d94170-5e86-5731-b716-c7dd0d4bcf99", 
"f13381eb-8ca0-55e2-892f-bf3a5f8fc437", "d0406da0-2564-5daf-989b-e59456668225", 
"13956d2d-93a1-52d9-af37-cce25da072ad", "2d2bb045-8b6d-5bf2-8ec9-730a3b9f80b1", 
"e1f413d4-d1f2-5b6b-9763-bd5beef2dd47", "07253520-070c-528c-bcd3-315f2614d6f7", 
"c8a7c370-fe37-5a2e-941f-23fb62dd462d", "a9caf7cd-e75e-5a05-9e98-0f11fb95b27c", 
"69311394-f564-515c-be7c-2d8f65872833", "01125fc9-03aa-56bf-aa90-9bba029167ae", 
"bec125fb-11fd-5642-894f-a4aa4366ff1f", "23441c84-e1fc-5481-bd77-ec5eef280057", 
"2c75c1c0-01b0-5fa2-b49a-f93de570c3e5", "70b517db-4c7e-52a8-be26-a1f93a4facdb", 
"1ce9ff1d-4ae1-57f5-8806-7ede772b461c", "5a31f511-d41b-56a6-9ee0-0835461850bc", 
"33cc01dc-afd2-5097-81d2-6976e2cbaed0", "0258c936-109b-557e-b3ff-3b45a6ad6918", 
"cfb0f98b-8524-5169-918a-b816b106c3ea", "89e604d1-00dd-589b-8916-83754b71bc84", 
"26932c76-4450-5485-bb9e-cc3584096686", "4ecc45c5-7857-54f4-a172-ae332c8916c9", 
"30058218-98bd-5c42-862f-e1f2fc2e4ac2", "86e93c8c-648c-5840-81ab-dd3bacb9b099", 
"9534f69a-1cf4-5caa-b3d6-e124420c3677", "cfb9f59d-bbb8-553e-b5a7-c76826d90f4b", 
"c7585a57-33ef-57d2-bd45-a53fbb4d8c02", "ac34aaa4-6b5b-5628-a0ea-5d2dd95c650b", 
"e9738bd9-2018-538a-8053-c199531d8390", "7b94976a-3dd5-5c45-a5b5-0ce7147afec4", 
"eac60987-8811-502b-944a-df8210aaf334", "8cba9241-c3ed-563f-a272-3e458e4e8bd5", 
"83e9fe28-9042-53ce-a090-bf9610259e5a", "23af31ab-914e-596e-ad59-a50bd8b24f81", 
"36eb2e46-fd09-5979-b070-98fc152ebf11", "c5c49ff5-1466-57a5-b5cc-1b737722f784", 
"15b71832-a9f7-5209-ab6e-917b1c8321c5", "46876d51-6e8a-5a99-b557-84871a1773b8", 
"3de33bfc-1d20-5c0c-8b84-2c07e26cbbab", "958dbf78-4573-5137-b4e7-fb5e6883996d", 
"6653f7b1-e7d5-5a25-b959-4ee70af1ec2c", "d4ab7db9-78ef-503c-b292-edad22911e8c", 
"9bd1a7a7-a795-5417-829b-1628d7e68ade", "7a7216ba-c7cc-5b81-9f10-52d7ab726539", 
"99f2a917-2884-515f-b39a-018cdf30d1ba", "3854e835-11c6-5a7f-9ecc-32b59d01658d", 
"5ef66fcc-ff12-5cc6-8f4c-ea05a74277f0", "e18e839d-8858-53ad-9dec-fe7a5168170f", 
"f22ee702-142e-545d-818a-41ebf7b86cf5", "a4dbdfc0-59fe-50cc-821e-ab0ddf0c43b4", 
"d1033661-af33-58e6-b7dc-e0e241225930", "29bb5a95-bb1f-5071-bb5a-4fce7e59e543", 
"ffdeb8ef-2466-5d45-92ce-7de12872128d", "3b646de3-3500-5096-a968-3d78e244c531", 
"2d886e96-eb1b-5313-b175-e482c55eb616", "7a914d12-d0b3-5fad-ac0e-66fd7418fb9a", 
"70086155-f719-5a15-8c66-744b2eae6325", "0ff43bc0-4db9-5bf3-b599-15f3b3e9f2e8", 
"83ca5b4c-5b6b-52a2-a1d5-3077be334ac1", "68b9a095-4591-5fd6-9392-2c192292fa94", 
"8f879d8e-8df0-5cc8-a133-40ec578de1e9", "18157cf4-ed11-53fb-b8e0-40abd32164c6", 
"c5a7653d-5516-5272-94fa-1173db35a02c", "6a57316e-0a78-5aa6-b05d-c578fe5ffb8b", 
"c6e72974-5fee-5eeb-a1a7-ff03c0e59c69", "99bb6fb3-8417-553b-8808-4896f6c680ce", 
"e72bcbb8-0e2e-59fc-966a-19baa3ba836d", "792cac94-fe0b-5420-bd80-a106985cbb6a", 
"10d14c1b-32e7-506f-9108-3668ffd9777b", "827553af-8be4-5b77-9b8a-a4680a2f50ae", 
"f0aa7479-9056-507a-b2d8-90d90ab65aff", "ec215b3d-527d-59c2-b2af-267a0b6bc04b", 
"4b9e7b90-afd6-59c4-93e5-53e29b649909", "a671a200-d6d7-56f7-8167-a6abfabdd22f", 
"741ba7ca-a04a-5ea2-b68e-120943aae0d3", "a2734261-4541-5887-b5a4-139f65c19fb0", 
"fd6c8ac2-787a-543e-9873-b76569a30eb0", "43b813b5-080a-528b-999b-7c117be807c1", 
"08d8ed57-ec94-5c63-bec8-0e6e029cf8a3", "6053496c-db38-53ed-b4e4-066785a0fc59", 
"7647f26f-e6d5-5121-a2c6-d0dbd5e57ddc", "726ba120-1722-54d7-998e-02516ca26042", 
"3e3c06eb-ac67-52b0-a437-07905ab3c70d", "722e3b78-727c-511b-9f40-856a5eff46b8", 
"e4e2354e-2546-59b1-ac58-d50a3da51efa", "f3de8fed-9948-5c57-bfc3-e3c30915e1bf", 
"42a3735a-2253-5574-981b-41e84b503abc", "bcf295ba-e714-5ee0-987e-7cc7d839a160", 
"4b70292e-e29f-5510-a500-904099d9a57d", "6ea75cb8-8003-5841-89f8-272d2b082ea3", 
"30e2ee2c-612f-59c8-9522-40a18db3f24d", "d95c390b-4e54-532b-b3c0-8a8383c9f353", 
"a75abf6d-3be1-56d6-8551-e2937afae54c", "58454e06-d0a9-5824-82f8-dca184a331ed", 
"9c9bc995-1981-58b6-af32-144ccc1e2e83", "17dfdd54-ee6d-5015-8d2a-70fadca75746", 
"47d8c726-e44a-56ac-90aa-8af1b6766052", "1a0ba32a-9ea6-59ef-9a1f-f5bd47eb8e0a", 
"8e9532d2-4c81-5815-8f7a-333dca61ddcf", "d5b6844d-23c8-58d1-89a3-274a5f8bcdbf", 
"8d49f521-1542-5be9-a0fb-96902116c790", "2aaf3ac9-b3dd-55b8-afb3-8bfbd17fe5f8", 
"0c589595-bdbe-5ace-866e-1365790f607b", "804e6b77-53bd-5af8-b9d4-778da15d3a0a", 
"3b1620b3-5e77-5e09-a322-d498d685d677", "dedd499b-b117-5e89-a9b9-80e2d70444fb", 
"667322b8-ceca-59dd-847e-8d8262773014", "de0caa95-7241-52b2-8987-299cc1393b4d", 
"f5b7f796-53a1-5e02-928d-7ab0ce02d94a", "06041975-a0d3-5fce-904d-8a90ac258ef7"
)

drop_visit = db_visit %>%
  filter(visit_id %in% drop_ids)

count = as.character(drop_visit %>% count() %>% pull())
cat("visit:", count)

drop_survey = db_survey %>%
  right_join(drop_visit, by = "visit_id") %>%
  select(all_of(colnames(db_survey))) %>%
  filter(!is.na(survey_id))

count = as.character(drop_survey %>% count() %>% pull())
cat("survey:", count)

drop_env = db_env %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_env))) %>%
  filter(!is.na(environmental_id))

count = as.character(drop_env %>% count() %>% pull())
cat("env:", count)

drop_edna = db_edna %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_edna))) %>%
  filter(!is.na(edna_id))

count = as.character(drop_edna %>% count() %>% pull())
cat("edna:", count)

drop_aural = db_aural %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_aural))) %>%
  filter(!is.na(aural_id))

count = as.character(drop_aural %>% count() %>% pull())
cat("aural:", count)

drop_ves = db_ves %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_ves))) %>%
  filter(!is.na(ves_id))

count = as.character(drop_ves %>% count() %>% pull())
cat("ves:", count)

drop_capture = db_capture %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_capture))) %>%
  filter(!is.na(capture_id))

count = as.character(drop_capture %>% count() %>% pull())
cat("capture:", count)

drop_sample_all = db_sample %>%
  right_join(drop_capture, by = "capture_id") %>%
  select(all_of(colnames(db_sample))) %>%
  filter(!is.na(sample_id))

bd_samples = db_bd %>%
  inner_join(drop_sample_all, by = "sample_id") %>%
  select(sample_id) %>%
  filter(!is.na(sample_id))

update_sample = drop_sample_all %>%
  inner_join(bd_samples, by = "sample_id") %>%
  mutate(capture_id = NA) %>%
  collect()

count = as.character(update_sample %>% count() %>% pull())
cat("sample_update:", count)

drop_sample = drop_sample_all %>%
  anti_join(bd_samples, by = "sample_id")

count = as.character(drop_sample %>% count() %>% pull())
cat("sample_drop:", count)


```

# cascade drop
```{r}

dbBegin(dbcon)

tryCatch(
  {
    db_sample = db_sample %>%
      rows_delete(drop_sample, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    temp_sample = stage_to_temp(dbcon, db_sample, update_sample)
    pointer = tbl(dbcon, temp_sample)
    db_sample = db_sample %>%
      rows_update(pointer, by="sample_id", unmatched = "ignore", in_place=TRUE)
    
    db_aural = db_aural %>%
      rows_delete(drop_aural, by="aural_id", unmatched = "ignore", in_place=TRUE)
    db_capture = db_capture %>%
      rows_delete(drop_capture, by="capture_id", unmatched = "ignore", in_place=TRUE)
    db_ves = db_ves %>%
      rows_delete(drop_ves, by="ves_id", unmatched = "ignore", in_place=TRUE)
    db_env = db_env %>%
      rows_delete(drop_env, by="environmental_id", unmatched = "ignore", in_place=TRUE)
    db_edna = db_edna %>%
      rows_delete(drop_edna, by="edna_id", unmatched = "ignore", in_place=TRUE)
    
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    db_visit = db_visit %>%
      rows_delete(drop_visit, by="visit_id", unmatched = "ignore", in_place=TRUE)
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```
# survey orphans
```{r}
drop_ids = c(
  "a7686f1f-2c5b-417d-8134-2f57aa936444"
)

drop_survey = db_survey %>%
  filter(survey_id %in% drop_ids)

drop_env = db_env %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_env))) %>%
  filter(!is.na(environmental_id))

drop_aural = db_aural %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_aural))) %>%
  filter(!is.na(aural_id))

drop_capture = db_capture %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_capture))) %>%
  filter(!is.na(capture_id))

drop_ves = db_ves %>%
  right_join(drop_survey, by = "survey_id") %>%
  select(all_of(colnames(db_ves))) %>%
  filter(!is.na(ves_id))

```

# cascade drop
```{r}

dbBegin(dbcon)

tryCatch(
  {
    db_aural = db_aural %>%
      rows_delete(drop_aural, by="aural_id", unmatched = "ignore", in_place=TRUE)
    db_capture = db_capture %>%
      rows_delete(drop_capture, by="capture_id", unmatched = "ignore", in_place=TRUE)
    db_ves = db_ves %>%
      rows_delete(drop_ves, by="ves_id", unmatched = "ignore", in_place=TRUE)
    db_env = db_env %>%
      rows_delete(drop_env, by="environmental_id", unmatched = "ignore", in_place=TRUE)
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

