---
title: "db_conflict_cleaning"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)

# connect to database
dbcon = hopToDB()

```

Pull metadata and tables

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from DB
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))

```

# nas on natural key columns
```{r}

# join down
aural_chain = tbl_chain("aural", mdc)
capture_chain = tbl_chain("capture", mdc)
ves_chain = tbl_chain("ves", mdc)

db_aural_chain = tbl_join(dbcon, aural_chain, join = "full")
db_capture_chain = tbl_join(dbcon, capture_chain, join = "full")
db_ves_chain = tbl_join(dbcon, ves_chain, join = "full")

# na on visit.date

# identify conflict
db_conflict_aural = db_aural_chain %>%
  filter(is.null(date),
         is.na(survey_id),
         !is.na(visit_id)) %>%
  collect()

db_conflict_capture = db_capture_chain %>%
  filter(is.null(date),
         is.na(survey_id),
         !is.na(visit_id)) %>%
  collect()

db_conflict_ves = db_ves_chain %>%
  filter(is.null(date),
         is.na(survey_id),
         !is.na(visit_id)) %>%
  collect()

# nothing depends on these. just drop.

drop_visit = db_visit %>%
  filter(is.na(date)) %>%
  collect()

# rows_delete(db_visit, drop_visit, by="visit_id", unmatched="ignore")

## null detection type

# visit_ids in survey which are not found in visit
survey_invalid = db_survey %>%
  filter(is.na(detection_type))

aural_invalid = inner_join(db_aural, survey_invalid, by="survey_id") %>% collect()
capture_invalid = inner_join(db_capture, survey_invalid, by="survey_id") %>% collect()
ves_invalid = inner_join(db_ves, survey_invalid, by="survey_id") %>% collect()

# no observations which depend on survey_invalid. great. drop the nulls.
drop_survey = db_survey %>%
  filter(is.na(observers_survey) & is.na(duration_minutes) & is.na(detection_type))


dbBegin(dbcon)

tryCatch(
  {
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    dbCommit(dbcon)
    print("Transaction successful! All tables are up to date.")
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

# relable as detection type "other"

detection_type_rename = db_survey %>%
  filter(is.na(detection_type)) %>%
  mutate(detection_type = "other")

dbBegin(dbcon)

tryCatch(
  {
    db_survey = db_survey %>%
      rows_update(detection_type_rename, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    dbCommit(dbcon)
    print("Transaction successful!")
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

orphaned data

```{r}

# visit_ids in survey which are not found in visit
survey_orphans = anti_join(db_survey, db_visit, by="visit_id")

aural_orphans = inner_join(db_aural, survey_orphans, by="survey_id") %>% collect()
capture_orphans = inner_join(db_capture, survey_orphans, by="survey_id") %>% collect()
ves_orphans = inner_join(db_ves, survey_orphans, by="survey_id") %>% collect()

# no orphans which depend on survey_orphans. great. drop them.

drop_survey = anti_join(db_survey, db_visit, by="visit_id") %>%
  select(any_of(colnames(db_survey)))

dbBegin(dbcon)

tryCatch(
  {
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    dbCommit(dbcon)
    print("Transaction successful! All tables are up to date.")
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

investigate duplicate bd_swab data...

```{r}

count_cap = db_capture %>% 
  filter(!is.na(bd_swab_id)) %>%
  summarize(count = n()) %>%
  pull(count)

count_pcr = db_bd %>% 
  filter(!is.na(bd_swab_id)) %>%
  summarize(count = n()) %>%
  pull(count)

unique_cap = db_capture %>% 
  filter(!is.na(bd_swab_id)) %>%
  select(bd_swab_id) %>%
  distinct() %>%
  summarize(count = n()) %>%
  pull(count)

unique_pcr = db_bd %>% 
  filter(!is.na(bd_swab_id)) %>%
  select(bd_swab_id) %>%
  distinct() %>%
  summarize(count = n()) %>%
  pull(count)

# investigate duplicates

dups_cap = db_capture %>%
  filter(!is.na(bd_swab_id)) %>%
  group_by(bd_swab_id) %>%
  mutate(n = n()) %>%
  filter(n>1) %>%
  ungroup() %>%
  collect()

dups_pcr = db_bd %>%
  filter(!is.na(bd_swab_id)) %>%
  group_by(bd_swab_id) %>%
  mutate(n = n()) %>%
  filter(n>1) %>%
  collect()

```

```{r}
# drop duplicates acrosss all capture rows except capture_id

duplicates_to_drop <- db_capture %>%
  group_by(across(-capture_id)) %>%
  mutate(row_number_in_group = row_number()) %>%
  ungroup() %>%
  filter(row_number_in_group > 1) %>%
  select(-row_number_in_group)

## drop
# db_capture = db_capture %>%
#   rows_delete(duplicates_to_drop, by="capture_id", unmatched = "ignore", in_place=TRUE)

```


```{r}
# collect all bd_swab_ids and capture_ids

peace = db_capture %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  group_by(survey_id,
           species_capture,
           time_of_capture,
           capture_trx_loc,
           body_temp_c,
           svl_mm,
           body_mass_g,
           microhabitat_type,
           site,
           date,
           region) %>%
  mutate(bd_id_count = n_distinct(bd_swab_id)) %>%
  filter(bd_id_count > 1,
         !is.na(time_of_capture)) %>%
  ungroup() %>%
  collect()

summarise(value = paste(unique(value), collapse = ", "), .groups = "drop")

train = db_capture %>%
  filter(survey_id == "01b5d9e9-ef7f-463d-b4a9-f8a1d64b9bbd") %>%
  collect()
```


```{r}
# coalesce percent_cloud_cover
cc_survey = db_survey %>%
  mutate(
    cloud_cover_percent = as.numeric(cloud_cover_percent),
    cloud_cover_percent = coalesce(cloud_cover_percent, percent_cloud_cover))

# update
db_survey = db_survey %>%
  rows_update(cc_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)

try = db_survey %>%
  filter(!is.na(cloud_cover_percent)) %>%
  collect()

this = db_survey %>%
  filter(!is.na(percent_cloud_cover)) %>%
  collect()

```

```{r}
# move survey environmental columns to visit?
colnames(db_survey)

env_cols = c(
  "wind_speed_m_s",
  "air_temp_c",
  "water_temp_c",
  "p_h",
  "tds_ppm",
  "wind",
  "sky",
  "air_time",
  "water_time",
  "survey_quality",
  "transect",
  "samp_loc",
  "pressure_psi",
  "relative_humidty_percent",
  "dissolved_o2_percent",
  "salinity_ppt",
  "cloud_cover_percent",
  "precip",
  "soil_humidity_m3m3",
  "wind_speed_scale",
  "precipitation_during_visit",
  "precipitation_last_48_h",
  "temperature_last_48_h",
  "weather_condition_notes",
  "pressure_psi_drop",
  "relative_humidity_percent",
  "relative_humidity_drop_percent",
  "wind_speed_min_m_s",
  "wind_speed_max_m_s",
  "air_temp_c_drop",
  "densiometer_d1_num_covered",
  "d1_n",
  "d1_s",
  "d1_e",
  "d1_w",
  "d1_percent_cover",
  "densiometer_d2_num_covered",
  "d2_n",
  "d2_s",
  "d2_e",
  "d2_w",
  "d2_percent_cover",
  "depth_of_water_from_d2_cm",
  "vegetation_cover_percent",
  "vegetation_notes",
  "secchi_depth_cm"
)

survey_env = db_survey %>%
  select(all_of(env_cols),
         "visit_id"
         )


distinct_check <- survey_env %>%
  group_by(visit_id) %>%
  filter(!is.na(air_time) | !is.na(water_time)) %>%
  distinct() %>%
  summarise(row_count = n(), .groups = 'drop') %>%
  filter(row_count > 1) %>%
  arrange(desc(row_count)) %>%
  left_join(db_survey, by = "visit_id") %>%
  collect()

# looks like there are indeed cases where a set of env. parameters were taken at the beginning of each survey. In which case we leave env parameters in survey table.
```

calculate survey.duration_minutes
```{r}
# flip start and end time when durration in greater than 18 hours

rectified = db_survey %>%
  mutate(dm = sql("
    ROUND(CASE 
      WHEN end_time::time < start_time::time 
      THEN EXTRACT(EPOCH FROM (('24:00:00'::interval + end_time::interval) - start_time::interval)) / 60
      ELSE EXTRACT(EPOCH FROM (end_time::interval - start_time::interval)) / 60
    END, 0)
  ")) %>%
  filter(dm > 18 * 60) %>%
  mutate(temp = start_time,
         start_time = end_time,
         end_time = temp) %>%
  select(-dm,
         -temp)

db_survey = db_survey %>%
  rows_update(rectified, by="survey_id", unmatched = "ignore", in_place=TRUE)

```

recalculate duration for all surveys
```{r}
dm_survey = db_survey %>%
  mutate(duration_minutes = sql("
    ROUND(CASE 
      WHEN end_time::time < start_time::time 
      THEN EXTRACT(EPOCH FROM (('24:00:00'::interval + end_time::interval) - start_time::interval)) / 60
      ELSE EXTRACT(EPOCH FROM (end_time::interval - start_time::interval)) / 60
    END, 0)
  "))

db_survey = db_survey %>%
  rows_update(dm_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)

```

calculate visit.time_of_day from min(survey.start_time)
```{r}
# preview
db_survey %>%
  left_join(db_visit, by = "visit_id") %>%
  select(start_time, end_time, visit_id, time_of_day) %>%
  mutate(mid_time = sql("
    CASE 
      WHEN end_time::time < start_time::time 
      THEN ((('24:00:00'::interval - start_time::interval) + end_time::interval) / 2 + start_time::interval)::time
      ELSE ((start_time::interval + end_time::interval) / 2)::time
    END
  ")) %>%
  group_by(visit_id) %>%
  mutate(tod_calc = ifelse(mean(hour(mid_time), na.rm=TRUE) >= 5 & mean(hour(mid_time), na.rm=TRUE) <= 18, "day", "night")) %>%
  ungroup() %>%
  filter(tod_calc != time_of_day)

as.in
glimpse(db_survey)

# preview
db_survey %>%
  left_join(db_visit, by = "visit_id") %>%
  select(start_time, end_time, visit_id, time_of_day) %>%
  group_by(visit_id) %>%
  mutate(tod_calc = ifelse(min(start_time, na.rm=TRUE) >= 6 & min(start_time, na.rm=TRUE) <= 18, "day", "night")) %>%
  ungroup() %>%
  filter(tod_calc != time_of_day)

peace = collect(db_survey)

mean(c(peace$start_time + peace$end_time))
```