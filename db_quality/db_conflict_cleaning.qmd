---
title: "db_conflict_cleaning"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

# connect to database
dbcon = hopToDB("wibbitr")

```

Pull metadata and tables

```{r}
mdc = tbl(dbcon, Id("survey_data", "metadata_columns")) %>%
  collect()

# pull relevant chain tables from DB
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_edna = tbl(dbcon, Id("survey_data", "edna"))
db_env = tbl(dbcon, Id("survey_data", "environmental"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))

db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_cmr = tbl(dbcon, Id("survey_data", "cmr"))
db_isolate = tbl(dbcon, Id("survey_data", "bd_isolate"))

db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_mucosome = tbl(dbcon, Id("survey_data", "mucosome_results"))

```

# NAs on natural key columns
```{r}

# join down
aural_chain = tbl_chain("aural", mdc)
capture_chain = tbl_chain("capture", mdc)
ves_chain = tbl_chain("ves", mdc)

db_aural_chain = tbl_join(dbcon, aural_chain, join = "full")
db_capture_chain = tbl_join(dbcon, capture_chain, join = "full")
db_ves_chain = tbl_join(dbcon, ves_chain, join = "full")

# na on visit.date

# identify conflict
db_conflict_aural = db_aural_chain %>%
  filter(is.null(date),
         is.na(survey_id),
         !is.na(visit_id)) %>%
  collect()

db_conflict_capture = db_capture_chain %>%
  filter(is.null(date),
         is.na(survey_id),
         !is.na(visit_id)) %>%
  collect()

db_conflict_ves = db_ves_chain %>%
  filter(is.null(date),
         is.na(survey_id),
         !is.na(visit_id)) %>%
  collect()

# nothing depends on these. just drop.

drop_visit = db_visit %>%
  filter(is.na(date)) %>%
  collect()

# rows_delete(db_visit, drop_visit, by="visit_id", unmatched="ignore")

## null detection type

# visit_ids in survey which are not found in visit
survey_invalid = db_survey %>%
  filter(is.na(detection_type))

aural_invalid = inner_join(db_aural, survey_invalid, by="survey_id") %>% collect()
capture_invalid = inner_join(db_capture, survey_invalid, by="survey_id") %>% collect()
ves_invalid = inner_join(db_ves, survey_invalid, by="survey_id") %>% collect()

# no observations which depend on survey_invalid. great. drop the nulls.
drop_survey = db_survey %>%
  filter(is.na(observers_survey) & is.na(duration_minutes) & is.na(detection_type))


dbBegin(dbcon)

tryCatch(
  {
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    dbCommit(dbcon)
    print("Transaction successful! All tables are up to date.")
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

# relable as detection type "other"

detection_type_rename = db_survey %>%
  filter(is.na(detection_type)) %>%
  mutate(detection_type = "other")

dbBegin(dbcon)

tryCatch(
  {
    db_survey = db_survey %>%
      rows_update(detection_type_rename, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    dbCommit(dbcon)
    print("Transaction successful!")
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

orphaned data
```{r}

# visit_ids in survey which are not found in visit
survey_orphans = anti_join(db_survey, db_visit, by="visit_id")

aural_orphans = inner_join(db_aural, survey_orphans, by="survey_id") %>% collect()
capture_orphans = inner_join(db_capture, survey_orphans, by="survey_id") %>% collect()
ves_orphans = inner_join(db_ves, survey_orphans, by="survey_id") %>% collect()

# no orphans which depend on survey_orphans. great. drop them.

drop_survey = anti_join(db_survey, db_visit, by="visit_id") %>%
  select(any_of(colnames(db_survey)))

dbBegin(dbcon)

tryCatch(
  {
    db_survey = db_survey %>%
      rows_delete(drop_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)
    
    dbCommit(dbcon)
    print("Transaction successful! All tables are up to date.")
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

investigate duplicate bd_swab data...

```{r}

count_cap = db_capture %>% 
  filter(!is.na(bd_swab_id)) %>%
  summarize(count = n()) %>%
  pull(count)

count_pcr = db_bd %>% 
  filter(!is.na(bd_swab_id)) %>%
  summarize(count = n()) %>%
  pull(count)

unique_cap = db_capture %>% 
  filter(!is.na(bd_swab_id)) %>%
  select(bd_swab_id) %>%
  distinct() %>%
  summarize(count = n()) %>%
  pull(count)

unique_pcr = db_bd %>% 
  filter(!is.na(bd_swab_id)) %>%
  select(bd_swab_id) %>%
  distinct() %>%
  summarize(count = n()) %>%
  pull(count)

# investigate duplicates

dups_cap = db_capture %>%
  filter(!is.na(bd_swab_id)) %>%
  group_by(bd_swab_id) %>%
  mutate(n = n()) %>%
  filter(n>1) %>%
  ungroup() %>%
  collect()

dups_pcr = db_bd %>%
  filter(!is.na(bd_swab_id)) %>%
  group_by(bd_swab_id) %>%
  mutate(n = n()) %>%
  filter(n>1) %>%
  collect()

```


# drop duplicates acrosss all capture rows except capture_id
```{r}
duplicates_to_drop <- db_capture %>%
  group_by(across(-capture_id)) %>%
  mutate(row_number_in_group = row_number()) %>%
  ungroup() %>%
  filter(row_number_in_group > 1) %>%
  select(-row_number_in_group)

## drop
# db_capture = db_capture %>%
#   rows_delete(duplicates_to_drop, by="capture_id", unmatched = "ignore", in_place=TRUE)

```


# collect all bd_swab_ids and capture_ids
```{r}

peace = db_capture %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  group_by(survey_id,
           species_capture,
           time_of_capture,
           capture_trx_loc,
           body_temp_c,
           svl_mm,
           body_mass_g,
           microhabitat_type,
           site,
           date,
           region,
           country_name) %>%
  summarise(bd_id_count = n_distinct(bd_swab_id), .groups = 'drop') %>%
  filter(bd_id_count > 1,
         !is.na(time_of_capture)) %>%
  ungroup() %>%
  collect()

train = db_capture %>%
  filter(survey_id == "01b5d9e9-ef7f-463d-b4a9-f8a1d64b9bbd") %>%
  collect()
```

Coalesce misnamed/duplicate columns
```{r}
# coalesce percent_cloud_cover
cc_survey = db_survey %>%
  mutate(
    cloud_cover_percent = as.numeric(cloud_cover_percent),
    cloud_cover_percent = coalesce(cloud_cover_percent, percent_cloud_cover))

# update
db_survey = db_survey %>%
  rows_update(cc_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)

try = db_survey %>%
  filter(!is.na(cloud_cover_percent)) %>%
  collect()

this = db_survey %>%
  filter(!is.na(percent_cloud_cover)) %>%
  collect()

# relative_humidity_percent, relative_humidty_percent, relative_humidity_drop_percent

try = db_survey %>%
  filter(!is.na(relative_humidity_percent)) %>%
  collect()

that = db_survey %>%
  filter(!is.na(relative_humidty_percent)) %>%
  collect()

rh_survey = db_survey %>%
  mutate(
    relative_humidity_percent = coalesce(relative_humidity_percent, relative_humidty_percent))

now = rh_survey %>%
  filter(!is.na(relative_humidity_percent)) %>%
  collect()

# update
db_survey = db_survey %>%
  rows_update(rh_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)

```

# move survey environmental columns to their own table

## organize column names
```{r}


calc_duration = function(start_time, end_time) {
  duration = if_else(end_time < start_time,
                         as_hms(86400) - start_time + end_time,
                         end_time - start_time)
  duration = duration / 60
  duration = str_remove(duration, " secs")
  duration = as.integer(round(as.numeric(duration), 0))
}

colnames(db_survey)

env_cols = c(
  "wind_speed_m_s",
  "air_temp_c",
  "water_temp_c",
  "p_h",
  "tds_ppm",
  "wind",
  "sky",
  "air_time",
  "water_time",
  "samp_loc",
  "pressure_psi",
  "dissolved_o2_percent",
  "salinity_ppt",
  "cloud_cover_percent",
  "precip",
  "soil_humidity_m3m3",
  "wind_speed_scale",
  "precipitation_during_visit",
  "precipitation_last_48_h",
  "temperature_last_48_h",
  "weather_condition_notes",
  "pressure_psi_drop",
  "relative_humidity_percent",
  "wind_speed_min_m_s",
  "wind_speed_max_m_s",
  "air_temp_c_drop",
  "densiometer_d1_num_covered",
  "d1_n",
  "d1_s",
  "d1_e",
  "d1_w",
  "d1_percent_cover",
  "densiometer_d2_num_covered",
  "d2_n",
  "d2_s",
  "d2_e",
  "d2_w",
  "d2_percent_cover",
  "depth_of_water_from_d2_cm",
  "vegetation_cover_percent",
  "vegetation_notes",
  "secchi_depth_cm",
  "conductivity_us_cm",
  "fish"
)

setdiff(colnames(db_survey), env_cols)

```

## scrape environmental surveys

```{r}

united_env = db_survey %>%
  select(-survey_id,
         -start_time,
         -end_time,
         -duration_minutes,
         -detection_type,
         -description,
         -transect) %>%
  collect() %>%
  mutate(detection_type = "environmental") %>%
  distinct() %>%
  filter(rowSums(is.na(select(., air_time, water_time, air_temp_c, water_temp_c))) < 4) %>%
  group_by(visit_id, air_time, water_time, air_temp_c, water_temp_c, sky, wind) %>%
  summarise(across(everything(), ~ first(na.omit(.)), .names = "{col}"), .groups = "drop") %>%
  ungroup()
  
gelled_env = united_env %>%
  group_by(visit_id) %>%
  mutate(start_time_temp = as_hms(min(water_time, air_time)),
         end_time_temp = as_hms(max(water_time, air_time)),
         duration_minutes = calc_duration(start_time_temp, end_time_temp),
         start_time = as_hms(ifelse(duration_minutes > 720, end_time_temp, start_time_temp)),
         end_time = as_hms(ifelse(duration_minutes > 720, start_time_temp, end_time_temp)),
         duration_minutes = calc_duration(start_time, end_time),
         observers_survey = str_flatten_comma(unique(na.omit(unlist(str_split(observers_survey, ",\\s*")))), na.rm = TRUE),
         comments_survey = str_flatten_comma(unique(comments_survey), na.rm = TRUE),
         survey_id = UUIDgenerate()) %>%
  ungroup() %>%
  mutate(number_observers = map_int(observers_survey, ~ length(unique(na.omit(unlist(str_split(gsub(" ", "", .x), ",")))))),
         environmental_id = "",
         environmental_id = map_chr(environmental_id, ~UUIDgenerate())) %>%
  select(-start_time_temp,
         -end_time_temp)
```

## subset and checks

```{r}


repeated_env = gelled_env %>%
  group_by(visit_id) %>%
  mutate(rcount = n()) %>%
  ungroup() %>%
  filter(rcount > 1) %>%
  arrange(visit_id)

subset_env_survey = gelled_env %>%
  select(-any_of(env_cols),
         -environmental_id) %>%
  distinct() %>%
  drop_na(survey_id)

repeated_env_survey = subset_env_survey  %>%
  group_by(visit_id) %>%
  mutate(rcount = n()) %>%
  ungroup() %>%
  filter(rcount > 1) %>%
  arrange(visit_id)

get_dupes(subset_env_survey, visit_id)

subset_env = gelled_env %>%
  select(environmental_id,
         survey_id, 
         any_of(env_cols)) %>%
  mutate(comments_environmental = "") %>%
  distinct() %>%
  drop_na(environmental_id)

get_dupes(subset_env, environmental_id)

compare_survey_env = compare_df_cols(db_survey %>% filter(FALSE) %>% collect(), subset_env_survey)

tray = compare_for_staging(db_survey %>% collect(), subset_env_survey, key_columns = "survey_id", return_all = TRUE, report = "env_survey")

compare_env = compare_df_cols(db_survey %>% filter(FALSE) %>% collect(), subset_env)



```
## commits
```{r}

# commit

dbBegin(dbcon)

tryCatch(
  {
    # drop existing environmental surveys first.
    drop_env = "DELETE FROM survey_data.survey WHERE detection_type = 'environmental'"
    dbExecute(dbcon, drop_env)
    
    
    temp_survey_env = stage_to_temp(dbcon, db_survey, subset_env_survey)
    pointer = tbl(dbcon, temp_survey_env)
    db_survey = rows_insert(db_survey, pointer, by="survey_id", in_place = TRUE, conflict = "ignore")
    
    
    dbWriteTable(dbcon, Id("survey_data", "environmental"), subset_env, overwrite = TRUE)
    

    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

# write to env table
# backup survey table
# append to survey table

```

## Drop environmental columns from survey table

```{r}

setdiff(colnames(db_survey), env_cols)
setdiff(env_cols, colnames(db_survey))

setdiff(colnames(db_env), env_cols)
setdiff(env_cols, colnames(db_env))

drop_env_cols = "
ALTER TABLE survey_data.survey
DROP COLUMN wind_speed_m_s,
DROP COLUMN air_temp_c,
DROP COLUMN water_temp_c,
DROP COLUMN p_h,
DROP COLUMN tds_ppm,
DROP COLUMN wind,
DROP COLUMN sky,
DROP COLUMN air_time,
DROP COLUMN water_time,
DROP COLUMN samp_loc,
DROP COLUMN pressure_psi,
DROP COLUMN dissolved_o2_percent,
DROP COLUMN salinity_ppt,
DROP COLUMN cloud_cover_percent,
DROP COLUMN precip,
DROP COLUMN soil_humidity_m3m3,
DROP COLUMN wind_speed_scale,
DROP COLUMN precipitation_during_visit,
DROP COLUMN precipitation_last_48_h,
DROP COLUMN temperature_last_48_h,
DROP COLUMN weather_condition_notes,
DROP COLUMN pressure_psi_drop,
DROP COLUMN relative_humidity_percent,
DROP COLUMN wind_speed_min_m_s,
DROP COLUMN wind_speed_max_m_s,
DROP COLUMN air_temp_c_drop,
DROP COLUMN densiometer_d1_num_covered,
DROP COLUMN d1_n,
DROP COLUMN d1_s,
DROP COLUMN d1_e,
DROP COLUMN d1_w,
DROP COLUMN d1_percent_cover,
DROP COLUMN densiometer_d2_num_covered,
DROP COLUMN d2_n,
DROP COLUMN d2_s,
DROP COLUMN d2_e,
DROP COLUMN d2_w,
DROP COLUMN d2_percent_cover,
DROP COLUMN depth_of_water_from_d2_cm,
DROP COLUMN vegetation_cover_percent,
DROP COLUMN vegetation_notes,
DROP COLUMN secchi_depth_cm,
DROP COLUMN conductivity_us_cm,
DROP COLUMN fish"

dbExecute(dbcon, drop_env_cols)

```

# investigate surveys with no children

```{r}
ids_aural = db_aural %>%
  select(survey_id)
ids_capture = db_capture %>%
  select(survey_id)
ids_ves = db_ves %>%
  select(survey_id)
ids_env = db_env %>%
  select(survey_id)

all_survey_ids = ids_aural %>%
  full_join(ids_capture, by = "survey_id") %>%
  full_join(ids_ves, by = "survey_id") %>%
  full_join(ids_env, by = "survey_id") %>%
  distinct()

loaners = db_survey %>%
  anti_join(all_survey_ids, by = "survey_id") %>%
  select(survey_id)

hope = loaners %>% collect()

get_dupes(db_survey %>% collect(), visit_id, detection_type)

drop_others = db_survey %>%
  filter(detection_type == "other",
         is.na(comments_survey)) %>%
  left_join(loaners, by = "survey_id")

peace = drop_others %>% collect()

# db_survey = db_survey %>%
#   rows_delete(drop_others, by = "survey_id", in_place = TRUE, unmatched = "ignore")

```

# calculate survey.duration_minutes
```{r}
# flip start and end time when durration in greater than 18 hours

rectified = db_survey %>%
  mutate(dm = sql("
    ROUND(CASE 
      WHEN end_time::time < start_time::time 
      THEN EXTRACT(EPOCH FROM (('24:00:00'::interval + end_time::interval) - start_time::interval)) / 60
      ELSE EXTRACT(EPOCH FROM (end_time::interval - start_time::interval)) / 60
    END, 0)
  ")) %>%
  filter(dm > 18 * 60) %>%
  mutate(temp = start_time,
         start_time = end_time,
         end_time = temp) %>%
  select(-dm,
         -temp)

db_survey = db_survey %>%
  rows_update(rectified, by="survey_id", unmatched = "ignore", in_place=TRUE)

```

## recalculate duration for all surveys
```{r}
dm_survey = db_survey %>%
  mutate(duration_minutes = sql("
    ROUND(CASE 
      WHEN end_time::time < start_time::time 
      THEN EXTRACT(EPOCH FROM (('24:00:00'::interval + end_time::interval) - start_time::interval)) / 60
      ELSE EXTRACT(EPOCH FROM (end_time::interval - start_time::interval)) / 60
    END, 0)
  "))

db_survey = db_survey %>%
  rows_update(dm_survey, by="survey_id", unmatched = "ignore", in_place=TRUE)

```

# calculate visit.time_of_day from min(survey.start_time)
```{r}
#define time of day as: midpoint of earliest survey start and latest survey end falls:
#   between 5:00 am and 18:59 pm -- day
#   Otherwise -- night

# preview
db_survey %>%
  left_join(db_visit, by = "visit_id") %>%
  group_by(date) %>%
  mutate(vs = n()) %>%
  filter(vs == 1) %>%
  ungroup() %>%
  select(start_time, end_time, visit_id, time_of_day) %>%
  group_by(visit_id) %>%
  mutate(mst = min(start_time, na.rm=TRUE),
         met = max(end_time, na.rm=TRUE),
         dur = ifelse(met < mst, met - mst + hours(24), met - mst),
         mid_time = mst + dur/2,
         tod_calc = ifelse(mean(hour(mid_time), na.rm=TRUE) >= 5 & mean(hour(mid_time), na.rm=TRUE) <= 18, "day", "night")) %>%
  ungroup() %>%
  filter(tod_calc != time_of_day)


# revise
tod_visit = db_survey %>%
  left_join(db_visit, by = "visit_id") %>%
  group_by(date) %>%
  mutate(vs = n()) %>%
  filter(vs == 1) %>%
  ungroup() %>%
  group_by(visit_id) %>%
  mutate(mst = min(start_time, na.rm=TRUE),
         met = max(end_time, na.rm=TRUE),
         dur = ifelse(met < mst, met - mst + hours(24), met - mst),
         mid_time = mst + dur/2,
         time_of_day = ifelse(mean(hour(mid_time), na.rm=TRUE) >= 5 & mean(hour(mid_time), na.rm=TRUE) <= 18, "day", "night")) %>%
  ungroup() %>%
  select(-mst,
         -met,
         -dur,
         -mid_time,
         -vs) %>%
  select(all_of(colnames(db_visit)))
  
db_visit = db_visit %>%
  rows_update(tod_visit, by="visit_id", unmatched = "ignore", in_place=TRUE)


```

# CMR duplicates
```{r}

# backup old cmr table
# cmr_backup = db_cmr %>%
#   collect()
# 
# # write_csv(cmr_backup, here("staging", "cmr_table_2024-11-18.csv"))
# 
# capture_backup = db_capture %>%
#   collect()
# 
# #write_csv(capture_backup, here("staging", "capture_table_2024-11-18.csv"))


cmr_scrape = db_capture %>%
  filter(!is.na(cmr_id)) %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  left_join(db_cmr, by = "cmr_id") %>%
  select(capture_id,
         cmr_id,
         local_cmr_id,
         species_capture,
         site,
         site_id,
         date,
         region,
         country_name) %>%
  distinct() %>%
  collect()


# does not generate unique uuids, needs fixing.
cmr_clean = cmr_scrape %>%
  mutate(uuidf = map_chr(cmr_id, ~ ifelse(!UUIDvalidate(.x), UUIDgenerate(), .x)),
         local_cmr_id = ifelse(UUIDvalidate(cmr_id), local_cmr_id, cmr_id),
         temp_cmr_id = uuidf) %>%
  filter(!is.na(local_cmr_id)) %>%
  select(-uuidf,
         -cmr_id)

cmr_typed = cmr_clean %>%
  mutate(id_type = case_when(is.na(local_cmr_id) ~ NA,
                                   region == "pennsylvania" ~ "toe_clip",
                                   TRUE ~ "pit_tag"))

toe_distinct = cmr_typed %>%
  filter(id_type == "toe_clip") %>%
  arrange(date) %>%
  group_by(species_capture, site_id) %>%
  distinct(local_cmr_id, .keep_all = TRUE) %>%
  ungroup()

pit_distinct = cmr_typed %>%
  filter(id_type == "pit_tag") %>%
  arrange(date) %>%
  distinct(local_cmr_id, .keep_all = TRUE) %>%
  ungroup()

cmr_distinct = bind_rows(toe_distinct,
                         pit_distinct) %>%
  rename(date_tagged = date,
         site_id_tagged = site_id,
         species_cmr = species_capture,
         cmr_id = temp_cmr_id) %>%
  select(cmr_id,
         everything(),
         -country_name,
         -region,
         -site,
         -capture_id)

# re-id duplicates in capture table...
cmr_capture = cmr_clean %>%
  select(-temp_cmr_id) %>%
  left_join(toe_distinct %>%
              select(local_cmr_id,
                     species_capture,
                     site_id,
                     temp_cmr_id), by = c("local_cmr_id", "species_capture", "site_id")) %>%
  left_join(pit_distinct %>%
              select(local_cmr_id,
                     temp_cmr_id), by = c("local_cmr_id")) %>%
  mutate(new_cmr_id = coalesce(temp_cmr_id.x, temp_cmr_id.y)) %>%
  select(capture_id, new_cmr_id) %>%
  rename(cmr_id = new_cmr_id)

dbWriteTable(dbcon, "temp_cmr_capture", cmr_capture, temporary = TRUE, overwrite = TRUE)

update_capture = db_capture %>%
  select(-cmr_id) %>%
  mutate(capture_id_text = sql("capture_id::text")) %>%
  left_join(
    tbl(dbcon, "temp_cmr_capture"),
    by = c("capture_id_text" = "capture_id")
  ) %>%
  select(-capture_id_text)

dbBegin(dbcon)

tryCatch(
  {
    
    db_capture = db_capture %>%
      rows_update(update_capture, by="capture_id", unmatched = "ignore", in_place = TRUE)
    
    
    dbWriteTable(dbcon, Id("survey_data", "cmr"), cmr_distinct, overwrite = TRUE)
    

    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })





```

```{r}
db_logger = tbl(dbcon, Id("microclimate_data", "logger"))
db_sensor = tbl(dbcon, Id("microclimate_data", "sensor"))
db_time_series = tbl(dbcon, Id("microclimate_data", "time_series"))

db_sensor %>%
  pull(sensor_type) %>%
  unique()

sensor_units = db_sensor %>%
  mutate(units = case_match(sensor_type,
                            "intensity_lux" ~ "lux_lx",
                            "temperature_c" ~ "degrees_celsius_c",
                            "relative_humidity_percent" ~ "percent",
                            "dew_point_c" ~ "degrees_celsius_c")) %>%
  collect()

dbBegin(dbcon)

tryCatch(
  {
    temp_sensor = stage_to_temp(dbcon, db_sensor, sensor_units)
    pointer = tbl(dbcon, temp_sensor)
    rows_update(db_sensor, pointer, by = "sensor_id", in_place=TRUE, unmatched = "ignore")
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

```{r}
peace = db_logger %>%
  left_join(db_sensor, by = "logger_id") %>%
  filter(sensor_id == "32a14024-bd66-43da-a3d5-d35622af1121") %>%
  left_join(db_time_series, by = "sensor_id") %>%
  collect()

```

# clean up detection types
```{r}
other_survey = db_survey %>%
  filter(detection_type == "other") %>%
  collect()

clean_survey = db_survey %>%
  filter(detection_type == "ves") %>%
  mutate(detection_type = "visual") %>%
  collect()

dbBegin(dbcon)

tryCatch(
  {
    temp_survey = stage_to_temp(dbcon, db_survey, clean_survey)
    pointer = tbl(dbcon, temp_survey)
    rows_update(db_survey, pointer, by = "survey_id", in_place=TRUE, unmatched = "ignore")
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })
```


# clean up sex
```{r}
sex_aural = db_aural %>%
  mutate(sex = tolower(sex),
         sex = case_match(sex,
                          "f" ~ "female",
                          "female" ~ "female",
                          "m" ~ "male",
                          "male" ~ "male",
                          "metamorph" ~ NA_character_,
                          "unknown" ~ NA_character_,
                          "unkonwn" ~ NA_character_,
                          .default = NA_character_))

sex_capture = db_capture %>%
  mutate(sex = tolower(sex),
         sex = case_match(sex,
                          "f" ~ "female",
                          "female" ~ "female",
                          "m" ~ "male",
                          "male" ~ "male",
                          "metamorph" ~ NA_character_,
                          "unknown" ~ NA_character_,
                          "unkonwn" ~ NA_character_,
                          .default = NA_character_))

sex_ves = db_ves %>%
  mutate(sex = tolower(sex),
         sex = case_match(sex,
                          "f" ~ "female",
                          "female" ~ "female",
                          "m" ~ "male",
                          "male" ~ "male",
                          "metamorph" ~ NA_character_,
                          "unknown" ~ NA_character_,
                          "unkonwn" ~ NA_character_,
                          .default = NA_character_))

dbBegin(dbcon)

tryCatch(
  {
    rows_update(db_aural, sex_aural, by = "aural_id", in_place=TRUE, unmatched = "ignore")
    rows_update(db_capture, sex_capture, by = "capture_id", in_place=TRUE, unmatched = "ignore")
    rows_update(db_ves, sex_ves, by = "ves_id", in_place=TRUE, unmatched = "ignore")
    
    # Commit the transaction if successful
    dbCommit(dbcon)
    print("Transaction successful!")
    
  }, error = function(e) {
    # Rollback in case of error
    dbRollback(dbcon)
    message("Transaction failed: ", e$message)
  })

```

# clean up life stage
```{r}
ls_capture = db_capture %>%
  mutate(life_stage = tolower(life_stage),
         life_stage = ifelse(life_stage == "unknown", NA_character_, life_stage))

db_capture = rows_update(db_capture, ls_capture, by = "capture_id", in_place=TRUE, unmatched = "ignore")
   

```

# clean up photo
```{r}
photo_capture = db_capture %>%
  mutate(photo = ifelse(is.na(photo), FALSE, photo))

rows_update(db_capture, photo_capture, by = "capture_id", in_place=TRUE, unmatched = "ignore")
   

```

# clean up marked
```{r}
marked_capture = db_capture %>%
  mutate(marked = ifelse(!is.na(cmr_id), TRUE, FALSE))

rows_update(db_capture, marked_capture, by = "capture_id", in_place=TRUE, unmatched = "ignore")
   

```

# clean up microhabitat_wet
```{r}
mhw_capture = db_capture %>%
  mutate(microhabitat_wet = case_match(microhabitat_wet,
                                       "yes" ~ TRUE,
                                       "no" ~ FALSE,
                                       .default = NA),
         microhabitat_wet = as.logical(microhabitat_wet))

rows_update(db_capture, mhw_capture, by = "capture_id", in_place=TRUE, unmatched = "ignore")
```

# microhab temp
```{r}

mht_capture_read = db_capture %>%
  select(substrate_temp_c, microhabitat_temperature) %>%
  filter(!is.na(substrate_temp_c) | !is.na(microhabitat_temperature)) %>%
  collect()

mht_capture = db_capture %>%
  mutate(substrate_temp_c = coalesce(substrate_temp_c, microhabitat_temperature))

rows_update(db_capture, mht_capture, by = "capture_id", in_place=TRUE, unmatched = "ignore")


```

# inside outside serdp
```{r}
io_capture = db_capture %>%
  mutate(inside_outside_serdp = tolower(inside_outside_serdp),
         inside_outside_serdp = case_match(inside_outside_serdp,
                                       "insdie" ~ "inside",
                                       "outsdie" ~ "outside",
                                       .default = inside_outside_serdp))

rows_update(db_capture, io_capture, by = "capture_id", in_place=TRUE, unmatched = "ignore")

```

# precipitation_during_visit & precipitation_notes
```{r}
clean_precip = db_env %>%
  mutate(precipitation_during_visit = tolower(precipitation_during_visit),
         precipitation_during_visit = case_match(precipitation_during_visit,
                                                 "hard rain" ~ "heavy rain",
                                                 "medium rain" ~ "moderate rain",
                                                 "no rain" ~ "none",
                                                 "light rain/drizzle" ~ "light rain",
                                                 .default = precipitation_during_visit),
         precipitation_during_visit = ifelse(is.na(precipitation_during_visit),
                                             case_match(precipitation_during_visit,
                                                 "drizzle" ~ "light rain",
                                                 "heavy rain at 1330" ~ "heavy rain",
                                                 "intermittent" ~ "moderate rain",
                                                 "heavy rain 0700-0800" ~ "heavy rain",
                                                 "intermittent showers during survey" ~ "moderate_rain",
                                                 "heavy rain, thunderstorm" ~ "heavy rain",
                                                 "rain" ~ "moderate rain",
                                                 "drizzling" ~ "light_rain",
                                                 "heavy rain began 11:00" ~ "heavy rain",
                                                 "intermittent rain" ~ "moderate rain",
                                                 "heavy rain throughout day" ~ "heavy rain",
                                                 "light mist" ~ "fog/mist",
                                                 "none" ~ "none",
                                                 "rain, thunder" ~ "heavy rain",
                                                 "rain all day" ~ "moderate rain",
                                                 "very misty foggy and dark" ~ "fog/mist",
                                                 "heavy rain in morning" ~ "heavy rain",
                                                 "0" ~ "none",
                                                 "heavy rain" ~ "heavy rain",
                                                 "100" ~ "moderate rain",
                                                 "1" ~ "moderate rain",
                                                 "heavy rain in morning and on hike in" ~ "heavy rain",
                                                 .default = precipitation_during_visit),
                                             precipitation_during_visit))

db_env = db_env %>%
  rows_update(clean_precip, by = "environmental_id", unmatched = "ignore", in_place = TRUE)

pdv = clean_precip %>%
  select(precipitation_during_visit) %>%
  distinct() %>%
  collect()

test = db_env %>%
  group_by(precipitation_during_visit) %>%
  summarise(val = first(na.omit(precipitation_notes))) %>%
  collect()

sql_render(test)

```
# SN 2022 mucosome & AMPs samples
```{r}
doi = db_sample %>%
  inner_join(db_capture, by = "capture_id") %>%
  filter(sample_type == "mucosome",
         grepl("^BII", sample_name)) %>%
  collect() %>%
  arrange(sample_name)

doi_manip = doi %>%
  select(any_of(colnames(db_sample)),
         -sample_id) %>%
  mutate(sample_type = "amp",
         sample_id = UUIDfromName("1208e62f-d3a1-462c-984f-0bf1f43f5837", paste0(sample_name, sample_type)))

temp_sample = stage_to_temp(dbcon, db_sample, doi_manip)
pointer = tbl(dbcon, temp_sample)
rows_insert(db_sample, pointer, by = "sample_id", in_place=TRUE, conflict = "ignore")

```

```{r}
svl_update = db_capture %>%
  filter(taxon_capture == "silverstoneia_flotator",
         svl_mm > 100) %>%
  collect()

svl_model = db_capture %>%
  filter(taxon_capture == "silverstoneia_flotator",
         svl_mm < 100) %>%
  collect()

ggplot(svl_model, aes(svl_mm, body_mass_g)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ x + 0)

m1 = lm(svl_mm ~ body_mass_g + 0, svl_model)
summary(m1)
```

# timestamp of capture
```{r}
data_capture = db_capture %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  select(capture_id,
         time_of_capture,
         start_timestamp_utc,
         end_timestamp_utc,
         date,
         time_zone) %>%
  collect()

timestamp_capture = data_capture %>%
  mutate(timestamp_of_capture_utc = start_timestamp_utc(date, time_of_capture, time_zone),
         timestamp_of_capture_utc = as_datetime(ifelse(timestamp_of_capture_utc < start_timestamp_utc,
                                           timestamp_of_capture_utc + hours(24),
                                           timestamp_of_capture_utc))) %>%
  filter(!is.na(timestamp_of_capture_utc)) %>%
  select(capture_id, timestamp_of_capture_utc)

update_capture = db_capture %>%
  select(-timestamp_of_capture_utc) %>%
  filter(!is.na(time_of_capture)) %>%
  collect() %>%
  right_join(timestamp_capture, by = "capture_id")

temp_capture = stage_to_temp(dbcon, db_capture, update_capture)
pointer = tbl(dbcon, temp_capture)
rows_update(db_capture, pointer, by = "capture_id", in_place=TRUE, unmatched = "ignore")

```