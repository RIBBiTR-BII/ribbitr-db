---
title: "db_investigation"
format: html
editor: source
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr)

# connect to database
dbcon = hopToDB("ribbitr")

mdc = tbl(dbcon, "all_columns") %>%
  filter(table_schema == "survey_data") %>%
  collect()

```

pointers to tables

```{r}

db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

db_bd_qpcr = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_cmr= tbl(dbcon, Id("survey_data", "cmr"))

```

How important is `time_of_day` as a natural key for visit?

```{r}

tbl_nkey("visit", mdc)

visit_chain = tbl_chain("visit", mdc)

iq_visit = tbl_left_join(dbcon, visit_chain) %>%
  group_by(site_id, date) %>%
  mutate(group_count = n()) %>%
  ungroup() %>%
  filter(group_count > 1) %>%
  arrange(date, site, time_of_day) %>%
  collect()

db_survey %>%
  collect() %>%
  left_join(iq_visit, by = "visit_id")

```

Yes, it is important in some cases. We will keep it, even though ultimately it is derived from survey.start_time.

Confused start and end times
```{r}
db_survey %>%
  filter(duration_minutes > 1800)
```

# visits with no site or no date
```{r}

vlist = db_visit %>% select(visit_id) %>% distinct() %>% pull()

peace = db_survey %>%
  filter(!(visit_id %in% vlist)) %>%
  collect()

```

```{r}

db_survey %>%
  left_join(db_visit, by = "visit_id") %>%
  filter(is.na(date))
```

Looking for observation with the same survey_id, but belonging to different dates/sites/detection types.
```{r}
chain_aural = tbl_chain("aural", mdc)
cn_aural = tbl_left_join(dbcon, chain_aural)

rep_aural = cn_aural %>%
  group_by(survey_id) %>%
  summarise(u_dates = n_distinct(date),
            u_sites = n_distinct(site),
            u_det = n_distinct(detection_type)) %>%
  filter(u_dates > 1 | u_sites > 1 | u_det > 1) %>%
  collect()


chain_capture = tbl_chain("capture", mdc)
cn_capture = tbl_left_join(dbcon, chain_capture)

rep_capture = cn_capture %>%
  group_by(survey_id) %>%
  summarise(u_dates = n_distinct(date),
            u_sites = n_distinct(site),
            u_det = n_distinct(detection_type)) %>%
  filter(u_dates > 1 | u_sites > 1 | u_det > 1) %>%
  collect()

chain_ves = tbl_chain("ves", mdc)
cn_ves = tbl_left_join(dbcon, chain_ves)

rep_ves= cn_ves %>%
  group_by(survey_id) %>%
  summarise(u_dates = n_distinct(date),
            u_sites = n_distinct(site),
            u_det = n_distinct(detection_type)) %>%
  filter(u_dates > 1 | u_sites > 1 | u_det > 1) %>%
  collect()



```
# who is?
```{r}

who_is = db_survey %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  select(survey_id, detection_type, transect, visit_id,  time_of_day, site, date, region, country_name) %>%
  group_by(site, date, detection_type) %>%
  mutate(rcount = n()) %>%
  ungroup() %>%
  filter(rcount > 1) %>%
  arrange(visit_id) %>%
  collect()


```