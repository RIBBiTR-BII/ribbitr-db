---
title: "bd_qpcr_results_plot"
format: html
---

```{r}
librarian::shelf(tidyverse, dbplyr, lubridate, RPostgres, DBI, RIBBiTR-BII/ribbitrrr, ggplot2)

## Connect to DB
dbcon <- hopToDB("ribbitr")

sncon <- hopToDB("qpcr")
```

# data pointers
```{r}
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))

sn_bd = tbl(sncon, Id("public", "results"))
sn_plate = tbl(sncon, Id("public", "plates"))
```

# plotting
```{r}
data_bd = db_bd %>%
  collect()

data_sn = sn_bd %>%
  left_join(sn_plate, by = c("plate_id" = "id")) %>%
  collect()

ggplot(data=data_bd, aes(x=log(average_target_quant), y=log(target_quant_per_swab), color=standard_target_type)) +
      geom_point()

ggplot(data=data_bd, aes(x=log(average_target_quant), y=log(target_quant_per_swab), color=standard)) +
      geom_point()

ggplot(data=data_bd, aes(x=log(average_target_quant), y=log(target_quant_per_swab), color=qpcr_lab)) +
      geom_point()

ggplot(data=data_sn, aes(x=log(average_target_quant), y=log(target_quant_per_swab), color=standard)) +
      geom_point()

```

# understand calculations
```{r}
# ct -> target_quant

ggplot(data = data_bd, aes(x=cycle_quant, y=log(target_quant), color = standard)) +
      geom_point()

# target_quant -> target_quant_per_swab

back_calc = data_bd %>%
  mutate(ratio = round(target_quant_per_swab / (target_quant * extract_volume_uL/(template_dna_volume_uL * qpcr_dilution_factor)), digits = 1)) %>%
  group_by(standard, ratio) %>%
  summarise(count = n())

peace = data_bd %>%
  filter(standard == "plasmid")

ggplot(data = data_bd, aes(x=log(target_quant * extract_volume_uL/(template_dna_volume_uL * qpcr_dilution_factor)), y=log(target_quant_per_swab), color = standard)) +
      geom_point()

ggplot(data = data_bd, aes(x=log(target_quant_per_swab), y=log(its1_copies_per_swab), color = standard)) +
      geom_point()

peace = data_bd %>%
  mutate(ratio = round(its1_copies_per_swab / target_quant_per_swab, digits = 0)) %>%
  group_by(ratio) %>%
  summarise(count = n()) %>%
  ungroup()



```

# check for comparison between standards
```{r}
comps = data_sn %>%
  group_by(sample_id) %>%
  mutate(std_count = n_distinct(std_type)) %>%
  ungroup() %>%
  filter(std_count > 1) %>%
  arrange(sample_id)

# there are!

wide_comps = comps %>%
  pivot_wider(id_cols = sample_id,
              names_from = std_type,
              values_from = start_quant) %>%
  mutate(ratio = gblock / genomic)

ggplot(data = wide_comps, aes(x=log(genomic), y=ratio)) +
      geom_point() +
  ylim(0, 1500)
```