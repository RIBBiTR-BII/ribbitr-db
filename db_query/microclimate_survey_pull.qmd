---
title: "microclimate_survey_pull"
format: html
---


```{r}
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, rio, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr, plotly)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

## Connect to DB
dbcon <- hopToDB("ribbitr")

```

table pointers
```{r}
# survey data
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))

# microclimate data
db_ts01 = tbl(dbcon, Id("microclimate_data", "time_series_01_raw"))
db_sensor = tbl(dbcon, Id("microclimate_data", "sensor"))
db_logger = tbl(dbcon, Id("microclimate_data", "logger"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))
```

# define functions
```{r}
microclimate_subset_site = function(site_id, start, end, metadata = TRUE, quiet = TRUE) {
  
  if (!quiet) {
    message(paste0("Collecting for site_id: ", site_id, ", start: ", as.character(start), ", end: ", as.character(end)))
  }
  
  # main query
  mc_data_long_query = db_ts01 %>%
      left_join(db_sensor, by = "sensor_id") %>%
      left_join(db_logger, by = "logger_id") %>%
      filter(site_id == site_id,
             timestamptz >= start,
             timestamptz <= end)
  
  if (!metadata) {
    mc_data_long = mc_data_long_query %>%
      select(all_of(colnames(db_ts01))) %>%
      collect()
  } else {
    mc_data_long = mc_data_long_query %>%
      collect()
  }
  
  return(mc_data_long)
}

microclimate_subset_presurvey = function(survey_data, buffer, time_sensitive = FALSE, output_timezone = NA) {
  
  if (!is.na(output_timezone)) {
    message(paste0("Changing session timezone to ", output_timezone))
    # retrieve current timezone
    session_tz = dbGetQuery(dbcon, "SHOW timezone;")[["TimeZone"]]
    # set to passed time zone
    tz_query = dbExecute("SET TIME ZONE '",output_timezone , "';")
  }
  
  # check data format
  if (is.data.frame(survey_data)) {
    data_cols = colnames(survey_data)
  } else {
    stop("survey_data format not recognized. Expected data frame.")
  }
  
  # time/date check
  if (time_sensitive) {
    # check for timestamp
    if ("start_timestamp" %in% data_cols & "end_timestamp" %in% data_cols) {
      # check format
      if (!all(c(class(survey_data$start_timestamp) == c("POSIXct", "POSIXt"), class(survey_data$end_timestamp) == c("POSIXct", "POSIXt")))) {
        stop("Unexpected format of 'start_timestamp' and 'end_timestamp' columns. Expected c('POSIXct', 'POSIXt')")
      }
    } else {
      stop("Required columns 'start_timestamp' and 'end_timestamp' not found in survey_data")
    }
  } else {
    # check for date
    if ("date" %in% data_cols) {
      # check format
      if (!is.Date(survey_data$date)) {
        stop("Unexpected format of 'date' column. Expected Date.")
      }
    } else {
      stop("Required column 'date' not found in survey_data")
    }
  }
  
  # check for site_id
  if ("site_id" %in% data_cols) {
    # check format
    if (!is.character(survey_data$site_id)) {
      stop("Unexpected format of 'site_id' column. Expected character.")
    }
  } else {
    stop("Required column 'site_id' not found in survey_data")
  }
  
  # check for survey_id
  if ("survey_id" %in% data_cols) {
    # check format
    if (!is.character(survey_data$site_id)) {
      stop("Unexpected format of 'site_id' column. Expected character.")
    }
  } else {
    stop("Required column 'site_id' not found in survey_data")
  }
  
    # parse buffer
  if (is.na(buffer)) {
    buffer = days(0)
  } else {
    if (!class(buffer) == "Period") {
      stop("'buffer' format not recognized. Expected lubridate 'Period'.")
    }
  }
  
  # build sites_present list
  sites_data = unique(sort(survey_data$site_id))
  
  sites_mc = db_logger %>%
    select(site_id) %>%
    distinct() %>%
    filter(site_id %in% site_list) %>%
    pull(site_id)
  
  sites_present = intersect(sites_data, sites_mc)
  sites_absent = setdiff(sites_data, sites_mc)
  
  if (length(sites_absent != 0)) {
    warning(paste0("The following site_id's found in provided data have no associated microclimate loggers and will be ignored: ", paste(sites_absent, collapse = ", ")))
  }
  
  if (time_sensitive) {
    survey_start_end = data_ex %>%
      filter(site_id %in% sites_present) %>%
      mutate(start = start_timestamp - buffer,
             end = start_timestamp) %>%
      select(survey_id, site_id, start, end)
    
    time_var = "start_timestamp"
  } else {
    survey_start_end = data_ex %>%
      filter(site_id %in% sites_present) %>%
      mutate(start = date - buffer,
             end = date) %>%
      select(survey_id, site_id, start, end)
    
    time_var = "date"
  }
  
  invalid_start_end = survey_start_end %>%
    filter(is.na(start) | is.na(end)) %>%
    pull(survey_id)
  
  if (length(invalid_start_end) > 0) {
    warning(paste0("NA value for survey ", time_var, " for the following surveys:\n\t"),
            paste0(invalid_start_end, sep = "\n\t"),
            "\n")
  }
  
  survey_start_end_valid = survey_start_end %>%
    filter(!(survey_id %in% invalid_start_end))
  
  # main query
  if (nrow(survey_start_end_valid) > 0) {
    mc_data = pmap_df(survey_start_end,
                      function(survey_id, site_id, start, end) {
                        microclimate_subset_site(site_id, start, end, metadata = FALSE, quiet = FALSE) %>%
                          mutate(survey_id = survey_id)
                      })
  } else {
    stop("No valid surveys for given parameters, query aborted.")
  }
  
  # join with metadata
  mc_meta = db_sensor %>%
    left_join(db_logger, by = "logger_id") %>%
    collect()
  
  mc_data_final = mc_data %>%
    left_join(mc_meta, by = "sensor_id") %>%
    select(survey_id,
           sensor_id,
           everything())
  
  # reset to initial timezone
  if (!is.na(output_timezone)) {
    message(paste0("Changing session timezone back to ", session_tz))
    # set to passed time zone
    tz_query = dbExecute("SET TIME ZONE '",session_tz , "';")
  }
  
  return(mc_data_final)
  
}

```

# example dataset
```{r}
sites_mc = db_logger %>%
  select(site_id) %>%
  distinct() %>%
  pull(site_id)

data_ex = db_survey %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(date >= "2023-06-01",
         date <= "2023-08-01",
         region == "pennsylvania",
         site_id %in% sites_mc) %>%
  collect()

```

# call function
```{r}
test_1 = microclimate_subset_site(site_id = "9076d776-20f1-4532-834a-6f0512a4f15f", start = "2022-06-01", end = "2022-07-01", quiet = FALSE)

test_2 = microclimate_subset_presurvey(data_ex, buffer = days(14), time_sensitive = FALSE, output_timezone = NA)

# currently fails becuase start_timestamp needs to be calculated for a number of our surveys still. Working on this.
test_3 = microclimate_subset_presurvey(data_ex, buffer = days(14), time_sensitive = TRUE, output_timezone = NA)
```