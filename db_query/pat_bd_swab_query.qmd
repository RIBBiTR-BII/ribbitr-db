---
title: "db_inquiry"
format: html
editor: source
---


```{r}
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, RPostgres, DBI, RIBBiTR-BII/ribbitrrr, here)

# connect to database
dbcon = hopToDB(prefix = "ribbitr")

```

## Query Bd/capture data

```{r}
# load column metadata for survey_data (data exploration). Use to see what columns exist.
mdc = tbl(dbcon, Id("public", "all_columns")) %>%
  filter(table_schema == "survey_data") %>%
  collect()

# capture data table, select desired columns, filter to valid bs_swab_id
db_capture = tbl(dbcon, Id("survey_data", "capture")) %>%
  select(all_of(tbl_keys("capture", mdc)),
         species_capture,
         bd_swab_id,
         microbiome_swab_id,
         bacterial_swab_id,
         life_stage,
         svl_mm) %>%
  filter(!is.na(bd_swab_id))
  
# generate table chain object of related supporting tables
capture_chain = tbl_chain("capture", mdc, until="region")

# recursively join supporting tables, filter to date range, valid site
db_capture_chain = tbl_join(dbcon, capture_chain, tbl=db_capture) %>%
  filter(date >= "2022-01-01",
         date < "2023-01-01",
         !is.na(site)) # drop orphan swab data currently missing site

# inner join capture and
db_bd_capture = tbl(dbcon, Id("survey_data", "qpcr_bd_results")) %>%
  inner_join(db_capture_chain, by="bd_swab_id")

# inspect query (informational only)
colnames(db_bd_capture)
sql_render(db_bd_capture)

# pull data from database
data_bd_capture = db_bd_capture %>%
  collect()

# write to 
write_csv(db_penn_bd, here("staging", paste0("bd_capture_query_", today(), ".csv")))

```