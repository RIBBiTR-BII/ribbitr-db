---
title: "sn_mapping"
format: html
---

```{r}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, dbplyr, here, janitor, lubridate, RPostgres, stringr, DBI, parsedate, uuid, hms, RIBBiTR-BII/ribbitrrr, sf)
# librarian::shelf(RIBBiTR-BII/ribbitrrr, update_all = TRUE)

# connect to database
sncon = hopToDB("amphibians")
dbcon = hopToDB("ribbitr")

```
# pointers
```{r}
mdc = tbl(dbcon, "all_columns") %>%
  collect()

# observation_tables
db_aural = tbl(dbcon, Id("survey_data", "aural"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_cmr = tbl(dbcon, Id("survey_data", "cmr"))

# lookup tables
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))

sn_surveyor = tbl(sncon, "surveyor")
sn_relocate = tbl(sncon, "relocate")

```

# cmr between sites
```{r}
cmr_exchange = db_capture %>%
  inner_join(db_cmr, by = "cmr_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  filter(region == "california") %>%
  group_by(cmr_id, local_cmr_id) %>%
  summarise(n = n_distinct(site),
            sites = str_flatten(distinct(site), collapse = ", ")) %>%
  filter(n > 1) %>%
  ungroup() %>%
  collect()

cmr_exchange_points = db_capture %>%
  inner_join(db_cmr, by = "cmr_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  filter(cmr_id %in% cmr_exchange$cmr_id) %>%
  group_by(site, site_latitude, site_longitude) %>%
  summarise(n = n()) %>%
  collect()



cmr_exchange_pairs = cmr_exchange %>%
  mutate(sites = str_split(sites, ", ")) %>%
  unnest(sites) %>%
  arrange(sites) %>%
  group_by(cmr_id, local_cmr_id) %>%
  reframe(sites = combn(sites, 2, simplify = FALSE)) %>%
  mutate(site_1 = map_chr(sites, ~ .x[1]),
         site_2 = map_chr(sites, ~ .x[2])) %>%
  group_by(site_1, site_2) %>%
  summarise(n = n()) %>%
  left_join(db_site %>%
              select(site,
                     site_latitude,
                     site_longitude) %>%
              collect(),
            by = c("site_1" = "site")) %>%
  rename(site_longitude_1 = site_longitude,
         site_latitude_1 = site_latitude) %>%
  left_join(db_site %>%
              select(site,
                     site_latitude,
                     site_longitude) %>%
              collect(),
            by = c("site_2" = "site")) %>%
  rename(site_longitude_2 = site_longitude,
         site_latitude_2 = site_latitude)


# Convert the point data to an sf object
points_sf = cmr_exchange_points %>%
  st_as_sf(coords = c("site_longitude", "site_latitude"), crs = 4326)

# Convert start and end points to sf POINT objects
start_points <- st_as_sf(cmr_exchange_pairs, coords = c("site_longitude_1", "site_latitude_1"), crs = 4326)
end_points <- st_as_sf(cmr_exchange_pairs, coords = c("site_longitude_2", "site_latitude_2"), crs = 4326)

# Create LINESTRING geometries by combining start and end points
lines = map2(start_points$geometry, end_points$geometry, ~ st_linestring(rbind(st_coordinates(.x), st_coordinates(.y))))

# Create an sf object with the linestrings and include the attribute variable
lines_sf <- st_sf(
  count_exchanges = cmr_exchange_pairs$n,
  geometry = st_sfc(lines),
  crs = 4326
)

# Write to shapefile
# st_write(points_sf, here("staging", "sn_mapping", "cmr_point.shp"), delete_layer = TRUE)
# st_write(lines_sf, here("staging", "sn_mapping", "cmr_line.shp"), delete_layer = TRUE)

```
# translocations between sites
```{r}
data_relocate = sn_relocate %>%
  collect()

relocate_events = data_relocate %>%
  pivot_longer(cols = c("release_siteid1", "release_siteid2"),
               names_to = "site_type",
               values_to = "release_siteid") %>%
  filter(!is.na(release_siteid)) %>%
  select(-site_type) %>%
  mutate(collect_siteid = str_split(collect_siteid, ","),
         release_siteid = as.character(release_siteid)) %>%
  unnest(collect_siteid)

relocate_points = relocate_events %>%
  pivot_longer(cols = c("collect_siteid", "release_siteid"),
               names_to = "event_type",
               values_to = "site") %>%
  mutate(event_type = case_match(event_type,
                                 "collect_siteid" ~ "collect",
                                 "release_siteid" ~ "release")) %>%
  group_by(site, event_type) %>%
  count() %>%
  left_join(db_site %>%
              select(site,
                     site_latitude,
                     site_longitude) %>%
              collect(),
            by = "site")

relocate_lines = relocate_events %>%
  group_by(collect_siteid, release_siteid) %>%
  count() %>%
    left_join(db_site %>%
              select(site,
                     site_latitude,
                     site_longitude) %>%
              collect(),
            by = c("collect_siteid" = "site")) %>%
  rename(site_longitude_1 = site_longitude,
         site_latitude_1 = site_latitude) %>%
  left_join(db_site %>%
              select(site,
                     site_latitude,
                     site_longitude) %>%
              collect(),
            by = c("release_siteid" = "site")) %>%
  rename(site_longitude_2 = site_longitude,
         site_latitude_2 = site_latitude)
  

# Convert the point data to an sf object
points_sfx = relocate_points %>%
  st_as_sf(coords = c("site_longitude", "site_latitude"), crs = 4326)

# Convert start and end points to sf POINT objects
start_points <- st_as_sf(relocate_lines, coords = c("site_longitude_1", "site_latitude_1"), crs = 4326)
end_points <- st_as_sf(relocate_lines, coords = c("site_longitude_2", "site_latitude_2"), crs = 4326)

# Create LINESTRING geometries by combining start and end points
lines = map2(start_points$geometry, end_points$geometry, ~ st_linestring(rbind(st_coordinates(.x), st_coordinates(.y))))

# Create an sf object with the linestrings and include the attribute variable
lines_sfx <- st_sf(
  count_exchanges = relocate_lines$n,
  geometry = st_sfc(lines),
  crs = 4326
)

# Write to shapefile
# st_write(points_sfx, here("staging", "sn_mapping", "trx_point.shp"), delete_layer = TRUE)
# st_write(lines_sfx, here("staging", "sn_mapping", "trx_line.shp"), delete_layer = TRUE)
  
```

# Capture counts per site
```{r}
ccs = db_capture %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  filter(region == "california") %>%
  select(taxon_capture, life_stage, date, site_id, site, site_latitude, site_longitude) %>%
  collect() %>%
  mutate(year = year(date))


ccs_sum = ccs %>%
  group_by(site, site_latitude, site_longitude) %>%
  summarise(count = n(),
            adult_count = sum(life_stage == "adult"),
            subadult_count = sum(life_stage == "subadult"),
            tadpole_count = sum(life_stage == "tadpole"),
            years = n_distinct(year),
            years_all = paste0(sort(unique(year)), collapse = ", ")) %>%
  ungroup() %>%
  filter(!is.na(site_longitude))

write_csv(ccs_sum, here("staging", "sn_mapping", "capture_counts.csv"))
```

# bd swab counts per site
```{r}
bdcs = db_sample %>%
  left_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  filter(region == "california",
         sample_type == "bd") %>%
  select(taxon_capture, life_stage, date, site_id, site, site_latitude, site_longitude) %>%
  collect() %>%
  mutate(year = year(date))

bdcs_sum = bdcs %>%
  group_by(site, site_latitude, site_longitude) %>%
  summarise(count = n(),
            adult_count = sum(life_stage == "adult"),
            subadult_count = sum(life_stage == "subadult"),
            tadpole_count = sum(life_stage == "tadpole"),
            years = n_distinct(year),
            years_all = paste0(sort(unique(year)), collapse = ", ")) %>%
  ungroup() %>%
  filter(!is.na(site_longitude))

write_csv(bdcs_sum, here("staging", "sn_mapping", "bd_sample_counts.csv"))

```